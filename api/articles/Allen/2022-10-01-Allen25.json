{"title":"25)🧰 Swift - 클래스(Class)의 상속","uid":"ed9964861ab21bcd20187bc915c28720","slug":"Allen/2022-10-01-Allen25","date":"2022-09-30T15:00:00.000Z","updated":"2023-03-31T10:33:38.122Z","comments":true,"path":"api/articles/Allen/2022-10-01-Allen25.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"클래스의-상속과-재정의\"><a href=\"#클래스의-상속과-재정의\" class=\"headerlink\" title=\"클래스의 상속과 재정의\"></a>클래스의 상속과 재정의</h1><h2 id=\"클래스의-상속-Inheritance\"><a href=\"#클래스의-상속-Inheritance\" class=\"headerlink\" title=\"클래스의 상속 (Inheritance)\"></a>클래스의 상속 (Inheritance)</h2><h3 id=\"상속의-기본-개념\"><a href=\"#상속의-기본-개념\" class=\"headerlink\" title=\"상속의 기본 개념\"></a>상속의 기본 개념</h3><ul>\n<li><p>성격이 비슷한 타입을 새로 만들어 <strong>데이터(저장속성)를 추가</strong>하거나 <strong>기능(메서드)을 변형</strong>시켜 사용하는 것</p>\n</li>\n<li><p>하위 클래스는 상위 클래스의 멤버를 일단 상속</p>\n<ul>\n<li>이후 저장 속성을 추가하거나 메서드를 변형</li>\n</ul>\n</li>\n<li><p>기본(Base) 클래스 ➡️  상속 클래스</p>\n<ul>\n<li>부모(Parent) 클래스, 슈퍼(Super) &#x2F; 상위 클래스</li>\n<li>자식(Child) 클래스, 서브(Sub) &#x2F; 하위 클래스</li>\n</ul>\n</li>\n<li><p>상속 저장 속성을 상속할 때 복사해오지 않는다.</p>\n<ul>\n<li>상속받은 클래스는 상위 클래스의 저장 속성을 소유하지 않는다.</li>\n<li>따라서 상위 클래스의 저장 속성의 구조에 대한 권한이 없다.</li>\n</ul>\n</li>\n<li><p>하지만 메서드를 상속할 때는 새로운 테이블로 복사해온다.</p>\n<ul>\n<li>메서드의 메모리 주소로 이루어진 배열의 형태</li>\n<li>따라서 <code>override</code>를 이용해 재정의가 가능하다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Person &#123;\n\tvar id &#x3D; 0\n\tvar name &#x3D; &quot;이름&quot;\n\tvar email &#x3D; &quot;abc@gmail.com&quot;\n&#125;\n\nclass Student: Person &#123; &#x2F;&#x2F; Person의 child class\n\tvar studentId &#x3D; 0\n&#125;\n\nclass Undergraduate: Student &#123; &#x2F;&#x2F; Student의 child class\n\tvar major &#x3D; &quot;전공&quot;\n&#125;\n\nvar uGraduate &#x3D; Undergraduate()\nprint(uGraduate.name) &#x2F;&#x2F; &quot;이름&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"저장-속성-상속의-메모리-동작\"><a href=\"#저장-속성-상속의-메모리-동작\" class=\"headerlink\" title=\"저장 속성 상속의 메모리 동작\"></a>저장 속성 상속의 메모리 동작</h3><ol>\n<li>하위 클래스는 <strong>본인이 소유한 저장 속성의 값을 메모리에 추가</strong>한다.<ul>\n<li>붕어빵을 “살짝” 찍는다!</li>\n</ul>\n</li>\n<li>상위 클래스의 상속 받은 저장 속성에 대한 권한은 없기에 <strong>상위 클래스에 저장 속성 값 추가를 요청</strong>한다.</li>\n<li>상위 클래스는 마찬가지로 <strong>본인이 소유한 저장 속성의 값을 메모리에 추가</strong>한다.<ul>\n<li>붕어빵을 또 “살짝” 찍는다..!</li>\n</ul>\n</li>\n<li>한 단계 더 상위 클래스가 있다면 위 과정을 반복한다.<ul>\n<li>붕어빵 완성! (분업 완료)</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"잠깐\"><a href=\"#잠깐\" class=\"headerlink\" title=\"잠깐!\"></a>잠깐!</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>그러면 베이스 클래스만 데이터 영역에 있고 나머지 하위 클래스들은 힙 영역에 있나요?</p></blockquote>\n<p><strong>아닙니다.</strong> 모든 클래스들은 <strong>데이터 영역</strong>에 존재합니다. 힙 영역에는 <strong>저장 속성의 “값”을 저장</strong>하는 것이지 저장 속성은 저장하지 않습니다.<br>보통 메서드와 헷갈릴 때 이렇게 생각할 수 있는데, <strong>메서드와 저장 속성은 별개</strong>로 놓고 생각해야합니다!</p>\n<ul>\n<li><code>final</code><ul>\n<li>클래스 상속 금지 키워드</li>\n<li>멤버 앞에 붙일 수도 있다.<ul>\n<li>해당 멤버의 재정의를 금지</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">final class Student: Person &#123;\n\tvar studentId &#x3D; 0\n&#125;\n\nclass Undergraduate: Student &#123; &#x2F;&#x2F; Error: Inheritance from a final class\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>override</code><ul>\n<li>상위 클래스의 멤버를 재정의하고 싶을 때</li>\n<li>저장 속성의 경우에는 불가능</li>\n<li>메서드에 주로 사용</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"상속의-방향\"><a href=\"#상속의-방향\" class=\"headerlink\" title=\"상속의 방향\"></a>상속의 방향</h3><ul>\n<li>하나의 클래스는 여러 하위 클래스를 가질 수 있다.</li>\n<li>하지만 Swift에서 다중 상속은 불가능하다.<ul>\n<li>하나의 클래스는 상위의 두 가지 클래스는 상속받을 수 없다.</li>\n<li>다른 언어에서는 가능한 경우도 있다</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"잠깐-1\"><a href=\"#잠깐-1\" class=\"headerlink\" title=\"잠깐!\"></a>잠깐!</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>앱을 만들 때를 보면 이런 것들도 있던데, 이거 다중 상속 아닌가요..?</p></blockquote>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class HomeViewController: UIViewController, UICollectionViewFlowDelegate &#123;\n\n\toverride func viewDidLoad() &#123;\n\t\tsuper.viewDidLoad()\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이 경우에서 <code>HomeViewController</code> 클래스의 뒤에 붙어 있는 친구들은 <code>class</code>가 아닙니다. 위 예시는 <code>protocol</code>을 사용한 경우입니다. 그리고 위 경우에는 대표적으로 <code>Delegate</code> 패턴을 사용한 경우인데, 이후 포스트에서 두 가지 모두 자세하게 다뤄볼 예정입니다.</p>\n<h2 id=\"재정의-Overriding\"><a href=\"#재정의-Overriding\" class=\"headerlink\" title=\"재정의 (Overriding)\"></a>재정의 (Overriding)</h2><h5 id=\"참고\"><a href=\"#참고\" class=\"headerlink\" title=\"참고\"></a>참고</h5><h6 id=\"오버로딩-overloading-vs-오버라이딩-overriding\"><a href=\"#오버로딩-overloading-vs-오버라이딩-overriding\" class=\"headerlink\" title=\"오버로딩(overloading) vs 오버라이딩 (overriding)\"></a>오버로딩(overloading) vs 오버라이딩 (overriding)</h6><ul>\n<li><strong>오버로딩(overloading)</strong>: 하나의 이름에 대해 여러 함수를 대응하는 것</li>\n<li><strong>오버라이딩(overriding)</strong>: 상위 클래스의 속성과 메서드를 재정의하는 것</li>\n</ul>\n<h3 id=\"재정의-대상\"><a href=\"#재정의-대상\" class=\"headerlink\" title=\"재정의 대상\"></a>재정의 대상</h3><ul>\n<li>속성<ul>\n<li>저장 속성 X</li>\n<li>계산 속성 O (메서드이기 때문에)</li>\n</ul>\n</li>\n<li>메서드 (메서드, 서브 스크립트, 생성자)</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class One &#123;\n\tfunc doSomething() &#123;\n\t\tprint(&quot;Do Something&quot;)\n\t&#125;\n&#125;\n\nclass Two: One &#123;\n\toverride func doSomething() &#123;\n\t\tsuper.doSomething() &#x2F;&#x2F; &quot;Do Something&quot;\n\t\tprint(&quot;Do another job&quot;) &#x2F;&#x2F; &quot;Do another job&quot;\n\t\tsuper.doSomething() &#x2F;&#x2F; &quot;Do Something&quot;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"재정의-기본-문법\"><a href=\"#재정의-기본-문법\" class=\"headerlink\" title=\"재정의 기본 문법\"></a>재정의 기본 문법</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class SomeSuperClass &#123;\n\tvar aValue &#x3D; 0\n\n\tfunc doSomething() &#123;\n\t\tprint(&quot;Do Something&quot;)\n\t&#125;\n&#125;\n\nclass SomeSubClass: SomeSuperclass &#123;\n\t&#x2F;&#x2F; 저장 속성의 재정의 불가\n\toverride var aValue &#x3D; 3 &#x2F;&#x2F; Error\n\n\t&#x2F;&#x2F; 계산 속성으로서 재정의 가능 (메서드 형태로 변형)\n\toverride var aValue: Int &#123;\n\t\tget &#123;\n\t\t\treturn 1\n\t\t&#125;\n\t\tset &#123;\n\t\t\tsuper.aValue &#x3D; newValue\n\t\t&#125;\n\t&#125;\n\n\toverride func doSomething() &#123;\n\t\tsuper.doSomething()\n\t\tprint(&quot;Do Something 2&quot;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"재정의-방식\"><a href=\"#재정의-방식\" class=\"headerlink\" title=\"재정의 방식\"></a>재정의 방식</h3><h4 id=\"속성의-재정의\"><a href=\"#속성의-재정의\" class=\"headerlink\" title=\"속성의 재정의\"></a>속성의 재정의</h4><ol>\n<li><strong>저장 속성의 재정의</strong><ul>\n<li>원칙적으로 <strong>불가능</strong>하다. (메모리 공간은 유지해야한다.)<ul>\n<li>저장 속성은 고유의 메모리 공간이 있으므로 하위 클래스에서 수정 불가능</li>\n</ul>\n</li>\n<li><strong>메서드 형태로 추가하는 방식</strong>의 재정의는 <strong>가능</strong>하다.<ul>\n<li>읽기&#x2F;쓰기 가능한 계산 속성으로 재정의 가능<ul>\n<li>읽기 전용의 계산 속성으로는 재정의 불가능 (<strong>축소 불가능</strong>)</li>\n</ul>\n</li>\n<li>속성 감시자 추가 가능</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>계산 속성(메서드)의 재정의</strong><ul>\n<li>메서드이기 때문에 재정의 가능<ul>\n<li><strong>기능 축소의 형태는 마찬가지로 불가능</strong></li>\n</ul>\n</li>\n<li>읽기 전용 계산 속성<ul>\n<li>읽기&#x2F;쓰기 가능한 속성으로 재정의 가능 (<strong>확장 가능</strong>)</li>\n<li><strong>속성 감시자 추가 불가능</strong> (읽기 전용이기 때문에 <strong>값이 변할 일이 없음</strong>)</li>\n</ul>\n</li>\n<li>읽기&#x2F;쓰기 계산 속성<ul>\n<li>읽기만 가능한 속성으로 재정의 불가능 (<strong>축소 불가능</strong>)</li>\n<li><strong>속성 감시자 추가 재정의 가능</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"메서드의-재정의\"><a href=\"#메서드의-재정의\" class=\"headerlink\" title=\"메서드의 재정의\"></a>메서드의 재정의</h4><ul>\n<li>상위 클래스 인스턴스 메서드 또는 타입 메서드 상관없이 기능 추가 가능</li>\n<li>상위 기능 무시하고 새롭게 구현하는 것도 가능</li>\n</ul>\n<h3 id=\"재정의-예시\"><a href=\"#재정의-예시\" class=\"headerlink\" title=\"재정의 예시\"></a>재정의 예시</h3><ul>\n<li>속성 재정의</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Vehicle &#123;\n\tvar currentSpeed &#x3D; 0.0 &#x2F;&#x2F; 저장 속성\n\n\tvar halfSpeed: Double &#123; &#x2F;&#x2F; 계산 속성\n\t\tget &#123;\n\t\t\treturn currentSpeed &#x2F; 2\n\t\t&#125;\n\t\tset &#123;\n\t\t\tcurrentSpeed &#x3D; newValue * 2\n\t\t&#125;\n\t&#125;\n&#125;\n\nclass Bicycle: Vehicle &#123;\n\t&#x2F;&#x2F; 저장 속성 추가\n\tvar hasBasket &#x3D; false\n\n\t&#x2F;&#x2F; 저장 속성 currentSpeed를 계산 속성으로 재정의\n\toverride var currentSpeed: Double &#123;\n\t\tget &#123;\n\t\t\treturn super.currentSpeed\n\t\t&#125;\n\t\tset &#123;\n\t\t\tsuper.currentSpeed &#x3D; newValue\n\t\t&#125;\n\t&#125;\n\n\t&#x2F;&#x2F; 저장 속성에 속성 감시자 추가 가능\n\toverride var currentSpeed: Double &#123;\n\t\twillSet &#123;\n\t\t\tprint(&quot;값이 \\(currentSpeed)에서 \\(newValue)로 변경 예정&quot;)\n\t\t&#125;\n\t\tdidSet &#123;\n\t\t\tprint(&quot;값이 \\(oldValue)에서 \\(currentSpeed)로 변경 예정&quot;)\n\t\t&#125;\n\t&#125;\n\n\t&#x2F;&#x2F; 계산 속성 재정의 가능\n\toverride var halfSpeed: Double &#123;\n\t\tget &#123;\n\t\t\treturn super.currentSpeed &#x2F; 2\n\t\t&#125;\n\t\tset &#123;\n\t\t\tsuper.currentSpeed &#x3D; newValue * 2\n\t\t&#125;\n\t&#125;\n\n\t&#x2F;&#x2F; 계산 속성을 재정의 하면서 속성 감시자 추가 가능\n\toverride var halfSpeed: Double &#123;\n\t\twillSet &#123;\n\t\t\tprint(&quot;값이 \\(halfSpeed)에서 \\(newValue)로 변경 예정&quot;)\n\t\t&#125;\n\t\tdidSet &#123; \n\t\t\tprint(&quot;값이 \\(oldValue)에서 \\(halfValue)로 변경 예정&quot;)\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>메서드 재정의</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Vehicle &#123;\n\tvar currentSpeed &#x3D; 0.0\n\tvar datas &#x3D; [&quot;1&quot;,&quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]\n\n\tfunc makeNoise() &#123;\n\t\tprint(&quot;경적을 울린다.&quot;)\n\t&#125;\n\n\tsubscript(index: Int) -&gt; String &#123;\n\t\tget &#123;\n\t\t\tif index &gt; 4 &#123;\n\t\t\t\treturn &quot;0&quot;\n\t\t\t&#125;\n\t\t\treturn datas[index]\n\t\t&#125;\n\t\tset &#123;\n\t\t\tdatas[index] &#x3D; newValue\n\t\t&#125;\n\t&#125;\n&#125;\n\nclass Bicycle: Vehicle &#123;\n\t&#x2F;&#x2F; 상위에서 하위 호출 가능\n\toverride func makeNoise() &#123;\n\t\tsuper.makeNoise() &#x2F;&#x2F; 상위 호출 가능\n\t\tprint(&quot;자전거가 지나간다고 소리친다.&quot;)\n\t\tsuper.makeNoise() &#x2F;&#x2F; 나중에 호출도 가능\n\t&#125;\n\n\t&#x2F;&#x2F; 상위 메서드를 무시하고 재정의도 가능\n\toverride func makeNoise() &#123;\n\t\tprint(&quot;경적을 울리고, 자전거가 지나간다고 소리친다.&quot;)\n\t&#125;\n\n\t&#x2F;&#x2F; 서브 스크립트 재정의 가능\n\toverride subscript(index: Int) -&gt; String &#123;\n\t\tget &#123;\n\t\t\tif index &gt; 4 &#123;\n\t\t\t\treturn &quot;777&quot;\n\t\t\t&#125;\n\t\t\treturn super[index] &#x2F;&#x2F; super &#x3D; 상위 클래스의 서브스크립트 호출\n\t\t&#125;\n\t\tset &#123;\n\t\t\tsuper[index] &#x3D; newValue\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 클래스의 상속과 재정의클래스의 상속 (Inheritance)상속의 기본 개념 성격이 비슷한 타입을 새로 만들어 데이터(저장속성)를 추가하거나 기능(메서드)을 변형시켜 사용하는 것...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%83%81%EC%86%8D%EA%B3%BC-%EC%9E%AC%EC%A0%95%EC%9D%98\"><span class=\"toc-text\">클래스의 상속과 재정의</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%83%81%EC%86%8D-Inheritance\"><span class=\"toc-text\">클래스의 상속 (Inheritance)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90\"><span class=\"toc-text\">상속의 기본 개념</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A0%80%EC%9E%A5-%EC%86%8D%EC%84%B1-%EC%83%81%EC%86%8D%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%8F%99%EC%9E%91\"><span class=\"toc-text\">저장 속성 상속의 메모리 동작</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%9E%A0%EA%B9%90\"><span class=\"toc-text\">잠깐!</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D%EC%9D%98-%EB%B0%A9%ED%96%A5\"><span class=\"toc-text\">상속의 방향</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%9E%A0%EA%B9%90-1\"><span class=\"toc-text\">잠깐!</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%9E%AC%EC%A0%95%EC%9D%98-Overriding\"><span class=\"toc-text\">재정의 (Overriding)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%B0%B8%EA%B3%A0\"><span class=\"toc-text\">참고</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9-overloading-vs-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-overriding\"><span class=\"toc-text\">오버로딩(overloading) vs 오버라이딩 (overriding)</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%9E%AC%EC%A0%95%EC%9D%98-%EB%8C%80%EC%83%81\"><span class=\"toc-text\">재정의 대상</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%9E%AC%EC%A0%95%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95\"><span class=\"toc-text\">재정의 기본 문법</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%9E%AC%EC%A0%95%EC%9D%98-%EB%B0%A9%EC%8B%9D\"><span class=\"toc-text\">재정의 방식</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%86%8D%EC%84%B1%EC%9D%98-%EC%9E%AC%EC%A0%95%EC%9D%98\"><span class=\"toc-text\">속성의 재정의</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9E%AC%EC%A0%95%EC%9D%98\"><span class=\"toc-text\">메서드의 재정의</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%9E%AC%EC%A0%95%EC%9D%98-%EC%98%88%EC%8B%9C\"><span class=\"toc-text\">재정의 예시</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"26)🧰 Swift - 생성자(Init)","uid":"b634a4054ae5c0257e715086c4d854c8","slug":"Allen/2022-10-03-Allen26","date":"2022-10-02T15:00:00.000Z","updated":"2023-03-31T10:33:45.074Z","comments":true,"path":"api/articles/Allen/2022-10-03-Allen26.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 초기화와 생성자초기화 (Initialization) 클래스, 구조체, 열거형의 인스턴스를 생성하는 과정 각 저장 속성에 대한 초기값 설정 인스턴스를 사용 가능한 상태로 만드는 과...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"23)🧰 Swift - 메서드(Method)","uid":"142b77ed1f32b84f0b8d08fde4f6ac05","slug":"Allen/2022-09-30-Allen23","date":"2022-09-29T15:00:00.000Z","updated":"2023-03-31T10:33:24.909Z","comments":true,"path":"api/articles/Allen/2022-09-30-Allen23.json","keywords":null,"cover":[],"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 구조체와 클래스의 메서드메서드의 메모리 동작 코드 영역에서 bori.sit()과 같은 접근연산자를 사용한 메서드를 마주친다. 스택 영역의 bori 변수에 찾아간다. bori 변수...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}