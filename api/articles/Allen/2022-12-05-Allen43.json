{"title":"43)🧰 Swift - 제네릭 (Generics)","uid":"c2e56e6a64d2c2ad251d398ab5d466c0","slug":"Allen/2022-12-05-Allen43","date":"2022-12-04T15:00:00.000Z","updated":"2023-03-31T10:35:34.166Z","comments":true,"path":"api/articles/Allen/2022-12-05-Allen43.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"제네릭-Generics\"><a href=\"#제네릭-Generics\" class=\"headerlink\" title=\"제네릭 (Generics)\"></a>제네릭 (Generics)</h1><h2 id=\"제네릭이-왜-필요한가\"><a href=\"#제네릭이-왜-필요한가\" class=\"headerlink\" title=\"제네릭이 왜 필요한가?\"></a>제네릭이 왜 필요한가?</h2><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var num1 &#x3D; 10\nvar num2 &#x3D; 20\n\nfunc swapTwoInts(_ a: inout  Int, _ b: inout Int) &#123;\n\tlet tempA &#x3D; a\n\ta &#x3D; b\n\tb &#x3D; tempA\n&#125;\n\nswapTwoInts(&amp;num1, &amp;num2)\nprint(num1) \nprint(num2)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>타입을 한정지어 메서드를 만든다면 위의 예시와 같이 만들면 되고, 아무런 문제가 없습니다.</p>\n<p>그런데 만약 <code>Double</code> 타입도 파라미터로 받고 싶다면..?</p>\n<p><code>String</code>까지도 받고 싶다면 어떻게 해야할까요?</p>\n<p>타입별로 모든 메서드를 따로 만들어줘야겠죠.</p>\n<p>그런데 이런 방법은 너무 번거롭습니다.</p>\n<p>제네릭을 사용하면 여러 타입에 대해 대응이 가능하기 때문에 이런 번거로움이 줄일 수 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func swapTwoValues&lt;T&gt;(_ a: inout T, _ b: inout T) -&gt; T &#123;\n\tlet tempA &#x3D; a\n\ta &#x3D; b\n\tb &#x3D; tempA\n\treturn a\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"제네릭-문법\"><a href=\"#제네릭-문법\" class=\"headerlink\" title=\"제네릭 문법\"></a>제네릭 문법</h2><p>제네릭 문법은 타입에 관계없이 한번의 구현으로 모든 타입에 대한 처리가 가능해서 유연한 함수를 작성할 수 있도록 해주는 문법입니다.</p>\n<p>심지어 함수 뿐만 아니라 구조체, 클래스, 열거형 모두 일반화가 가능합니다.</p>\n<p>타입 파라미터는 함수 내부에서 파라미터 형식이나 리턴형으로 사용할 수 있습니다.</p>\n<p>보통 <code>T</code>(Type)로 사용하지만 다른 이름을 사용해도 문제는 없으며, 두 개 이상을 선언하는 것도 아무 문제가 없습니다.</p>\n<h3 id=\"제네릭의-사용-예시-Swift-문법\"><a href=\"#제네릭의-사용-예시-Swift-문법\" class=\"headerlink\" title=\"제네릭의 사용 예시 (Swift 문법)\"></a>제네릭의 사용 예시 (Swift 문법)</h3><p>저희는 사실 이런 제네릭 문법을 지금까지 많이 사용했습니다.</p>\n<p>Swift에서 컬렉션은 모두 제네릭 타입의 구조체로 구현되어 있기 떄문인데요..</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let array1: [String] &#x3D; [] \nlet array2: Array&lt;String&gt; &#x3D; []\n\nlet dictionary1: [String: Int] &#x3D; [&quot;Steve&quot;: 24]\nlet dictionary2: Dictionary&lt;String, Int&gt; &#x3D; [&quot;Alex&quot;: 25]\n\nlet optional1: String?\nlet optional2: Optional&lt;String&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>배열, 딕셔너리, 옵셔널 모두 사실은 제네릭 타입을 사용하고 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">[1, 2, 3].map(transform: (Int) throws -&gt; T)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>또한 <code>map</code>과 같은 고차함수들도 모두 제네릭 타입을 사용하고 있습니다.</p>\n<h2 id=\"제네릭-정의하기\"><a href=\"#제네릭-정의하기\" class=\"headerlink\" title=\"제네릭 정의하기\"></a>제네릭 정의하기</h2><h3 id=\"구조체로-제네릭-정의하기\"><a href=\"#구조체로-제네릭-정의하기\" class=\"headerlink\" title=\"구조체로 제네릭 정의하기\"></a>구조체로 제네릭 정의하기</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct GenericMember&lt;T&gt; &#123;\n\tvar members: [T] &#x3D; []\n&#125;\nvar member1 &#x3D; GenericMember(members: [&quot;Jobs&quot;, &quot;Cook&quot;, &quot;Musk&quot;])\nvar member2 &#x3D; GenericMember(members: [1, 2, 3])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"클래스로-제네릭-정의하기\"><a href=\"#클래스로-제네릭-정의하기\" class=\"headerlink\" title=\"클래스로 제네릭 정의하기\"></a>클래스로 제네릭 정의하기</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class GridPoint&lt;A&gt; &#123;\n\tvar x: A\n\tvar y: A\n\n\tinit(x: A, y: A) &#123;\n\t\tself.x &#x3D; x\n\t\tself.y &#x3D; y\n\t&#125;\n&#125;\n\nlet aPoint &#x3D; GridPoint(x: 10, y: 20)\nlet bPoint &#x3D; GridPoint(x: 10.4, y: 20.5)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"열거형으로-제네릭-정의하기\"><a href=\"#열거형으로-제네릭-정의하기\" class=\"headerlink\" title=\"열거형으로 제네릭 정의하기\"></a>열거형으로 제네릭 정의하기</h3><p>열거형에서는 연관값을 가질때만 제네릭으로 정의할 수 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum Pet&lt;T&gt; &#123;\n\tcase dog\n\tcase cat\n\tcase etc(T)\n&#125;\n\nlet animal &#x3D; Pet.etc(&quot;고슴도치&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"제네릭-구조체의-확장\"><a href=\"#제네릭-구조체의-확장\" class=\"headerlink\" title=\"제네릭 구조체의 확장\"></a>제네릭 구조체의 확장</h3><p>제네릭 타입을 확장할 떄는 <code>&lt;T&gt;</code>는 생략해야 합니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Coordinates&lt;T&gt; &#123;\n\tvar x: T\n\tvar y: T\n&#125;\n\nextension Coordinates &#123; &#x2F;&#x2F; Coordinates&lt;T&gt; (X)\n\tfunc getPlace() -&gt; (T, T) &#123;\n\t\treturn (x, y)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>또한 <code>where</code>절을 추가하여 제네릭 타입에 제한을 줄 수도 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Coordinates where T &#x3D;&#x3D; Int &#123;\n\tfunc getIntArray() -&gt; [T] &#123;\n\t\treturn [x, y]\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"타입-제약\"><a href=\"#타입-제약\" class=\"headerlink\" title=\"타입 제약\"></a>타입 제약</h2><p>제네릭을 사용하더라도 모든 타입에 대해서 열어두기는 싫을 때가 있겠죠.</p>\n<p>그럴때는 타입 매개 변수 뒤에 콜론(<code>:</code>)을 붙이고 프로토콜이나 단일 클래스를 적어 제한을 둘 수 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">find findIndex&lt;T: Equatable&gt;(item: T, array: [T]) -&gt; Int? &#123;\n\tfor (index, value) in array.enumerated() &#123;\n\t\tif item &#x3D;&#x3D; value &#123;\n\t\t\treturn index\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\nlet aNumber &#x3D; 5\nlet someArray &#x3D; [3, 4, 5, 6, 7]\n\nif let index &#x3D; findIndex(item: aNumber, array: someArray) &#123;\n\tprint(&quot;밸류 값과 같은 배열의 인덱스: \\(index)&quot;) &#x2F;&#x2F; 2\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위 예시에서 <code>T</code> 타입은 <code>Equatable</code> 프로토콜을 채택한 타입들만 들어갈 수 있습니다.</p>\n<h2 id=\"프로토콜에서의-제네릭-문법-사용\"><a href=\"#프로토콜에서의-제네릭-문법-사용\" class=\"headerlink\" title=\"프로토콜에서의 제네릭 문법 사용\"></a>프로토콜에서의 제네릭 문법 사용</h2><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">protocol RemoteControl &#123;\n\tassociatedtype T\n\tfunc chnageChannel(to: T)\n\tfunc alert() -&gt; T?\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>protocol</code>에서도 제네릭 타입을 사용할 수 있지만, <code>&lt;T&gt;</code>와 같이 사용하는 것이 아니라 <code>associatedtype</code>을 사용합니다.</p>\n<p>이 프로토콜을 사용하는 방법은 아래와 같습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct TV: RemoteControl &#123;\n\ttypealias T &#x3D; Int &#x2F;&#x2F; 생략 가능\n\n\tfunc changeChannel(to: Int) &#123;\n\t\tprint(&quot;TV 채널바꿈: \\(to)&quot;)\n\t&#125;\n\n\tfunc alert() -&gt; Int? &#123;\n\t\treturn 1\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 제네릭 (Generics)제네릭이 왜 필요한가?var num1 &#x3D; 10 var num2 &#x3D; 20 func swapTwoInts(_ a: inout Int, _ ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":80,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":80,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-Generics\"><span class=\"toc-text\">제네릭 (Generics)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%B4-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80\"><span class=\"toc-text\">제네릭이 왜 필요한가?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%AC%B8%EB%B2%95\"><span class=\"toc-text\">제네릭 문법</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C-Swift-%EB%AC%B8%EB%B2%95\"><span class=\"toc-text\">제네릭의 사용 예시 (Swift 문법)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">제네릭 정의하기</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EB%A1%9C-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">구조체로 제네릭 정의하기</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">클래스로 제네릭 정의하기</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9C%BC%EB%A1%9C-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">열거형으로 제네릭 정의하기</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%9D%98-%ED%99%95%EC%9E%A5\"><span class=\"toc-text\">제네릭 구조체의 확장</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%83%80%EC%9E%85-%EC%A0%9C%EC%95%BD\"><span class=\"toc-text\">타입 제약</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%97%90%EC%84%9C%EC%9D%98-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%AC%B8%EB%B2%95-%EC%82%AC%EC%9A%A9\"><span class=\"toc-text\">프로토콜에서의 제네릭 문법 사용</span></a></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"45)🧰 Swift - Date","uid":"7d828fe1b889c290d917612e7e7aa09f","slug":"Allen/2022-12-06-Allen45","date":"2022-12-05T15:00:00.000Z","updated":"2023-03-31T10:35:42.504Z","comments":true,"path":"api/articles/Allen/2022-12-06-Allen45.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) DateUTC (Coordinated Universal Time)UTC는 국제적인 표준 시간(협전 세계시)입니다. 영국의 그리니치 천문대를 기준으로 하여 전세계적인 시간 기준을 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":80,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":80,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"44)🧰 Swift - Result","uid":"a100c7d58a4f32a64e774374f49a8b76","slug":"Allen/2022-12-05-Allen44","date":"2022-12-04T15:00:00.000Z","updated":"2023-03-31T10:35:38.474Z","comments":true,"path":"api/articles/Allen/2022-12-05-Allen44.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) ResultResult 타입은 열거형입니다. 내부적으로 success(연관값)과 failure(연관값)을 갖고 있어요. 성공했을 때와 실패했을 때의 정보를 모두 담고 있는 것이죠...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":80,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":80,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}