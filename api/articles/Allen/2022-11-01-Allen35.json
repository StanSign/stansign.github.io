{"title":"35)🧰 Swift - 클로저 (Closure)","uid":"05c7a8ad61ab635112e2267f3af9157c","slug":"Allen/2022-11-01-Allen35","date":"2022-10-31T15:00:00.000Z","updated":"2023-03-31T10:34:46.389Z","comments":true,"path":"api/articles/Allen/2022-11-01-Allen35.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"클로저-Closure\"><a href=\"#클로저-Closure\" class=\"headerlink\" title=\"클로저 (Closure)\"></a>클로저 (Closure)</h1><h2 id=\"클로저의-개념-및-1급-객체-취급\"><a href=\"#클로저의-개념-및-1급-객체-취급\" class=\"headerlink\" title=\"클로저의 개념 및 1급 객체 취급\"></a>클로저의 개념 및 1급 객체 취급</h2><h5 id=\"클로저를-보기-전에\"><a href=\"#클로저를-보기-전에\" class=\"headerlink\" title=\"클로저를 보기 전에\"></a>클로저를 보기 전에</h5><p>기존의 함수의 타입 표기와 사용법은 다음과 같습니다. </p>\n<ol>\n<li><code>() -&gt; ()</code>, <code>() -&gt; Void</code></li>\n<li><code>(String) -&gt; String</code></li>\n<li><code>(Int, Int) -&gt; ()</code>, <code>(Int, Int) -&gt; Void</code></li>\n</ol>\n<h3 id=\"클로저\"><a href=\"#클로저\" class=\"headerlink\" title=\"클로저\"></a>클로저</h3><ul>\n<li>이름이 없는 (익명의) 함수</li>\n<li>클로저와 함수는 기능은 완전히 동일하지만, 형태가 다르다.</li>\n</ul>\n<h3 id=\"함수와-클로저\"><a href=\"#함수와-클로저\" class=\"headerlink\" title=\"함수와 클로저\"></a>함수와 클로저</h3><ul>\n<li>함수: 이름이 있는 코드의 묶음<ul>\n<li>다른 코드가 함수 이름으로 호출하기 위해</li>\n</ul>\n</li>\n<li>클로저: 이름이 없는 코드의 묶음<ul>\n<li>굳이 이름이 없어도 호출할 수 있는 형태로 사용 가능</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"함수와-클로저의-형태\"><a href=\"#함수와-클로저의-형태\" class=\"headerlink\" title=\"함수와 클로저의 형태\"></a>함수와 클로저의 형태</h3><ul>\n<li>함수</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func aFunction(str: String) -&gt; String &#123;\n\treturn &quot;Hello, \\(str)&quot;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>클로저</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let _ &#x3D; &#123; (str: String) -&gt; String in\n\treturn &quot;Hello, \\(str)&quot;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>&#123;&#125;</code>(중괄호)를 함수라고 인식하면 좋다…!</p></blockquote>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let aClosureType &#x3D; &#123; print(&quot;안녕!&quot;) &#125; &#x2F;&#x2F; () -&gt; ()\naClosureType() &#x2F;&#x2F; 호출( 안녕! )<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"일급객체\"><a href=\"#일급객체\" class=\"headerlink\" title=\"일급객체\"></a>일급객체</h3><p>Swift는 <strong>함수</strong>를 <strong>일급객체</strong>로서 취급합니다. 따라서 함수는 <strong>타입</strong>으로서 취급됩니다. 함수를 타입으로서 취급하여 얻을 수 있는 이점들을 다음과 같습니다.</p>\n<ol>\n<li>함수를 <strong>변수</strong>에 할당할 수 있다.</li>\n<li>함수를 호출할 때, 함수를 <strong>파라미터로 전달</strong>할 수 있다.</li>\n<li>함수에서 함수를 <strong>반환</strong>할 수 있다.</li>\n</ol>\n<h2 id=\"클로저는-왜-필요할까\"><a href=\"#클로저는-왜-필요할까\" class=\"headerlink\" title=\"클로저는 왜 필요할까?\"></a>클로저는 왜 필요할까?</h2><h3 id=\"콜백함수-Callback-Function\"><a href=\"#콜백함수-Callback-Function\" class=\"headerlink\" title=\"콜백함수 (Callback Function)\"></a>콜백함수 (Callback Function)</h3><ul>\n<li><strong>콜백함수</strong>: 함수를 실행할 때 파라미터로 전달하는 함수</li>\n</ul>\n<ol>\n<li>클로저를 파라미터로 받는 함수 정의</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func closureParamFunction(closure: () -&gt; Void) &#123;\n\tprint(&quot;안녕하세요!&quot;)\n\tclosure()\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>함수를 실행할 때 파라미터를 클로저 형태로 전달</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">closureParamFunction(closure: &#123;\n\tprint(&quot;안녕히계세요!&quot;)\n&#125;)\n&#x2F;&#x2F; 안녕하세요!\n&#x2F;&#x2F; 안녕히계세요!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>함수 실행할 때 클로저를 정의하면서 실행하는게 왜 좋은거에요?</p></blockquote>\n<p>콜백함수인데 따로 다른 곳에서는 쓰이지 않는 함수가 있다면 그 함수는 굳이 이름이 필요가 없겠죠.. 클로저는 그럴 때 유용합니다. </p>\n<h3 id=\"파라미터를-처리한-결과를-함수에-바로-넣고-싶을-때-사후처리\"><a href=\"#파라미터를-처리한-결과를-함수에-바로-넣고-싶을-때-사후처리\" class=\"headerlink\" title=\"파라미터를 처리한 결과를 함수에 바로 넣고 싶을 때 (사후처리)\"></a>파라미터를 처리한 결과를 함수에 바로 넣고 싶을 때 (사후처리)</h3><ol>\n<li>클로저를 파라미터로 받는 함수 정의</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func closureCaseFunction(a: Int, b: Int, closure: (Int) -&gt; Void) &#123;\n\tlet c &#x3D; a + b\n\tclosure(c)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>함수를 실행할 때 클로저 형태로 전달</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">closureCaseFunction(a: 5, b: 2, closure: &#123; (number) in \n\tprint(&quot;클로저의 결과: \\(number)&quot;)\n&#125;)\n&#x2F;&#x2F; 클로저의 결과: 7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>이게 왜 좋은건지 도저히 느낌이 안와요!</p></blockquote>\n<p>예시는 단순 출력문만 있기 때문에 느낌이 안올 수 있어요. 하지만 후처리로 개발자가 원하는대로 클로저를 줄 수 있다는 것은 개발 과정에서의 엄청난 자율성과 활용성을 제공해줍니다.</p>\n<p>실제로 Swift 언어를 사용하는 개발자들은 이러한 형태의 코드를 굉장히 많이 사용하고 있어요. 오픈소스 라이브러리를 살펴보면, 이러한 클로저의 사후처리 개념을 알지 못하면 기능을 전혀 이해를 할 수 없을 정도에요!</p>\n<p>보통 애플이나 오픈소스 라이브러리 작성자들이 번거롭고 어려운 내용의 코드들을 작성해두고, 해당 코드의 결과를 다른 개발자들이 쉽게 이용할 수 있도록 클로저를 파라미터로 받는 형태로 함수를 제공합니다.</p>\n<h2 id=\"클로저의-간소화-문법\"><a href=\"#클로저의-간소화-문법\" class=\"headerlink\" title=\"클로저의 간소화 문법\"></a>클로저의 간소화 문법</h2><p>클로저는 실사용시의 가독성과 편의성을 위해 매우 다양한 축약 형태를 제공합니다. 크게 네 가지 형태로 나눌 수 있고, 다음과 같습니다.</p>\n<ol>\n<li>문맥 상 파라미터와 리턴 밸류 타입 추론 (Type Inference)</li>\n<li>싱글 익스프레션일 경우 (한 줄), 리턴 생략 (Implicit Return)</li>\n<li>아규먼트 이름을 축약 (Shorthand Arguments)</li>\n<li>트레일링(후행) 클로저 (Trailing Closure)</li>\n</ol>\n<p>하나씩 한 번 살펴보겠습니다.</p>\n<h3 id=\"트레일링-Trailing-클로저\"><a href=\"#트레일링-Trailing-클로저\" class=\"headerlink\" title=\"트레일링 (Trailing) 클로저\"></a>트레일링 (Trailing) 클로저</h3><ol>\n<li>원문</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">closureParamFunction(closure: &#123;\n\tprint(&quot;안녕히계세요.&quot;)\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>소괄호 앞으로 이동</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">closureParamFunction(closure: ) &#123;\n\tprint(&quot;안녕히계세요.&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>인자(Argument) 레이블 생략</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">closureParamFunction() &#123;\n\tprint(&quot;안녕히계세요.&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>마지막 인자로 클로저가 전달되는 경우 소괄호 생략 가능</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">closureParamFunction &#123;\n\tprint(&quot;안녕히계세요.&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"현실적인-사용-예시\"><a href=\"#현실적인-사용-예시\" class=\"headerlink\" title=\"현실적인 사용 예시\"></a>현실적인 사용 예시</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func closureCaseFunction(a: Int, b: Int, closure: (Int) -&gt; Void) &#123;\n\tlet c &#x3D; a + b\n\tclosure(c)\n&#125;\n\nclosureCaseFunction(a: 3, b: 4) &#123; res in &#x2F;&#x2F; 함수 인자 앞까지 소괄호 이동\n\tprint(&quot;Update Complete: \\(res) obtained.&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"멀티플-트레일링-클로저\"><a href=\"#멀티플-트레일링-클로저\" class=\"headerlink\" title=\"멀티플 트레일링 클로저\"></a>멀티플 트레일링 클로저</h4><p>Swift 5.3에서 추가된 클로저 편의성 추가 기능입니다.</p>\n<p>원래는 마지막 클로저만 트레일링 클로저를 적용할 수 있었습니다. 하지만 5.3 버전부터는 여러 개의 클로저에 모두 적용할 수 있게 되었습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func multipleClosure(first: () -&gt; (), _ second: () -&gt; (), third: () -&gt; ()) &#123;\n\tfirst()\n\tsecond()\n\tthird()\n&#125;\n\n&#x2F;&#x2F; 5.3 이전\nmultipleClosure(first: &#123;\n\tprint(&quot;1&quot;)\n&#125;, _: &#123;\n\tprint(&quot;2&quot;)\n&#125;) &#123;\n\tprint(&quot;3&quot;)\n&#125;\n\n&#x2F;&#x2F; 5.3 이후\nmultipleClosure &#123;\n\tprint(&quot;1&quot;)\n&#125; _: &#123;\n\tprint(&quot;2&quot;)\n&#125; third: &#123;\n\tprint(&quot;3&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"파라미터-및-생략-등의-간소화\"><a href=\"#파라미터-및-생략-등의-간소화\" class=\"headerlink\" title=\"파라미터 및 생략 등의 간소화\"></a>파라미터 및 생략 등의 간소화</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func performClosure(param: (String) -&gt; (Int) &#123;\n\tparam(&quot;Swift&quot;)\n&#125;\n\nperformClosure(param: &#123; (str: String) -&gt; Int in \n\treturn str.count\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>타입 추론</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">performClosure(param: &#123; str in\n\treturn str.count\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>한 줄일 경우 <code>return</code> 생략 가능</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">performClosure(param: &#123; str in\n\tstr.count\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>인자(argument) 이름을 축약</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">performClosure(param: &#123;\n\t$0.count\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>엥.. $가 뭐에요…</p></blockquote>\n<p><code>$0</code>은 순서 상 첫 번째 파라미터입니다. 마찬가지로  <code>$1</code>, <code>$2</code>, <code>$3</code> 은 각각 두 번째, 세 번째, 네 번째 파라미터입니다.</p>\n<ol start=\"4\">\n<li>트레일링 클로저</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">performClosure &#123;\n\t$0.count\n&#125;\n\nperformClosure &#123; $0.count &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"실제-사용-예시\"><a href=\"#실제-사용-예시\" class=\"headerlink\" title=\"실제 사용 예시\"></a>실제 사용 예시</h2><p>단순해지고 편해지는건 알겠는데, 실제로 써먹을 때의 모습을 봐야 이해가 딱 될 것 같아요.</p>\n<h3 id=\"URLSession\"><a href=\"#URLSession\" class=\"headerlink\" title=\"URLSession\"></a>URLSession</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">URLSession(configuration: .default).dataTask(with: URL(string: &quot;https:&#x2F;&#x2F;address&quot;)!) &#123; data, response, error in\n\tswitch response &#123;\n\tcase .success:\n\t\treturn data\n\tcase .failure:\n\t\tprint(error)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>물론 위처럼 간단하게는 못 써요..! 중요한 건 클로저니까 형태 정도만 보면 됩니다.</p>\n<h3 id=\"Timer\"><a href=\"#Timer\" class=\"headerlink\" title=\"Timer\"></a>Timer</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false) &#123; _ in\n\tprint(&quot;0.5초 뒤에 출력&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"dismiss\"><a href=\"#dismiss\" class=\"headerlink\" title=\"dismiss\"></a>dismiss</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">vc.dismiss(animated: true) &#123;\n\tprint(&quot;화면 종료&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"클로저의-메모리\"><a href=\"#클로저의-메모리\" class=\"headerlink\" title=\"클로저의 메모리\"></a>클로저의 메모리</h2><h3 id=\"클로저는-참조타입\"><a href=\"#클로저는-참조타입\" class=\"headerlink\" title=\"클로저는 참조타입!\"></a>클로저는 참조타입!</h3><p>클로저는 클래스와 마찬가지로 참조 타입입니다. </p>\n<p>시작은 다른 모든 함수들과 동일하게 스택 영역에서 실행됩니다. </p>\n<p>클로저가 일반적인 함수와 다른 점은 함수를 호출할 때 일어납니다. </p>\n<p>일반적인 함수는 호출되면 코드 영역의 코드 블럭 시작점을 찾아가 한 줄씩 코드를 실행합니다.</p>\n<p>하지만 클로저는 참조 타입이기 때문에 <strong>힙 영역</strong>에 있는 클로저 주소에 찾아간 후에, 힙 영역에 저장된 코드 블럭 주소를 받아 코드 영역의 코드를 실행합니다.</p>\n<p>그렇다면 클로저는 왜 참조 타입으로 저장될까요?</p>\n<h3 id=\"클로저의-캡처-현상\"><a href=\"#클로저의-캡처-현상\" class=\"headerlink\" title=\"클로저의 캡처 현상\"></a>클로저의 캡처 현상</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var stored &#x3D; 0\nlet closure &#x3D; &#123; (number: Int) -&gt; Int in\n\tstored +&#x3D; number\n\treturn stored\n&#125;\n\nclosure(3) &#x2F;&#x2F; 3\nclosure(4) &#x2F;&#x2F; 7\nclosure(5) &#x2F;&#x2F; 12\nstored &#x3D; 0\nclosure(5) &#x2F;&#x2F; 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위 예시에서 <code>stored</code>이라는 변수는 클로저 내부에 정의된 변수가 아니라 외부에 있는 변수입니다. 따라서 클로저는 <strong>변수에 할당되거나 호출되는 순간</strong>, 자신이 참조하는 외부의 변수를 <strong>캡처</strong>합니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>클로저 내부에서 사용할 외부의 값을 필요할 경우 <strong>힙 영역</strong>에 <strong>저장</strong>해둔다는 의미입니다. 이 때 저장되는 값은 값 자체보다는 스택 영역에 저장된 변수의 주소가 참조 타입으로 저장됩니다.</p></blockquote>\n<p>자 그러면 동일한 기능을 가지는 함수를 각각 일반적인 함수와 클로저를 사용하여 어떻게 과정과 결과가 달라지는지 확인해보겠습니다.</p>\n<h4 id=\"일반적인-함수-Nested-Function\"><a href=\"#일반적인-함수-Nested-Function\" class=\"headerlink\" title=\"일반적인 함수 (Nested Function)\"></a>일반적인 함수 (Nested Function)</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func calculate(number: Int) -&gt; Int &#123;\n\tvar sum &#x3D; 0\n\n\tfunc square(num: Int) -&gt; Int &#123;\n\t\tsum +&#x3D; (num * num)\n\t\treturn sum\n\t&#125;\n\n\tlet result &#x3D; square(num: number)\n\n\treturn result\n&#125;\n\ncalculate(number: 10) &#x2F;&#x2F; 100\ncalculate(number: 20) &#x2F;&#x2F; 400\ncalculate(number: 30) &#x2F;&#x2F; 900<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위 예시의 경우에는 일반적인 함수를 사용하는 방법입니다.</p>\n<p>이 경우에는, 모든 연산은 오직 <strong>스택 영역</strong>에서만 이루어집니다. Nested Function이라 할지라도 새로운 스택을 쌓아가며, 스택 안에서만 모든 연산들이 이루어지죠.</p>\n<h4 id=\"변수를-캡처하는-함수\"><a href=\"#변수를-캡처하는-함수\" class=\"headerlink\" title=\"변수를 캡처하는 함수\"></a>변수를 캡처하는 함수</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func calculateFunc() -&gt; ((Int) -&gt; Int) &#123;\n\tvar sum &#x3D; 0\n\n\tfunc square(num: Int) -&gt; Int &#123;\n\t\tsum +&#x3D; (num * num)\n\t\treturn sum\n\t&#125;\n\n\treturn square\n&#125;\n\nvar squareFunc &#x3D; calculateFunc() &#x2F;&#x2F; square((Int) -&gt; Int)\nsquareFunc(10) &#x2F;&#x2F; 100\nsquareFunc(20) &#x2F;&#x2F; 500\nsquareFunc(30) &#x2F;&#x2F; 1400\nvar dodoFunc &#x3D; squareFunc\ndodoFunc(20) &#x2F;&#x2F; 1800<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위 예시의 경우에는 캡처 현상이 발생하는 함수입니다.</p>\n<p><code>squareFunc</code> 변수에는 <code>calculateFunc</code> 함수 내부에 있는 <code>square</code> 함수가 담겼습니다. 어떤 함수의 내부에 있는 함수가 리턴되는 경우, 클로저와 동일하게 <strong>힙 영역에 내부 함수를 저장</strong>하고 그 주소를 리턴하게 됩니다.</p>\n<p>따라서 <code>squareFunc</code> 변수에는 내부 함수 <code>square</code>가 <strong>힙 영역</strong>에 저장된 주소가 저장되게 됩니다.</p>\n<p>그런데 내부 함수 <code>square</code>는 외부의 변수 <code>sum</code>을 사용하고 있습니다. 문제는 여기서 발생합니다.</p>\n<p><code>calculateFunc</code> 함수의 실행이 끝나면 해당 함수는 스택 영역에서 해제됩니다. 그런데 그 내부에 있는 <code>square</code> 함수는 새로운 변수 <code>squareFunc</code>에 저장되어 보존되었고, <code>calculateFunc</code> 함수에 저장되었던 <code>sum</code>이라는 변수를 필요로 합니다.</p>\n<p>스택 영역에서 해제되버리면 <code>sum</code> 변수또한 해제되어 버리기 때문에, <code>squareFunc</code> 변수에 저장된 함수를 실행하면 무조건 에러가 나게 되었습니다. 이런 현상을 방지하기 위해 <strong>캡처 현상</strong>이 발생합니다. </p>\n<p>내부의 <code>square</code> 함수는 외부에 있지만 필요한 <code>sum</code>이라는 변수를 <strong>본인의 저장 공간(힙 영역)에 함께 저장</strong>합니다.</p>\n<p>이런 <strong>캡처 현상</strong> 때문에 일반적인 함수를 사용할 때처럼 매번 변수를 초기화하지 못하고 저장된 변수를 계속해서 사용하기 때문에 이전에 넣어주었던 값이 계속해서 보존되게 되는 것입니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>캡처 현상은 이렇게 힙 영역에 함수를 저장하는 현상이 발생하는 <strong>(1) 함수를 변수에 할당</strong>하거나 <strong>(2) 클로저</strong>를 사용하는 경우 발생합니다.</p></blockquote>\n<h2 id=\"escaping-x2F-autoclosure-클로저\"><a href=\"#escaping-x2F-autoclosure-클로저\" class=\"headerlink\" title=\"@escaping &#x2F; @autoclosure 클로저\"></a>@escaping &#x2F; @autoclosure 클로저</h2><h3 id=\"escaping-클로저\"><a href=\"#escaping-클로저\" class=\"headerlink\" title=\"@escaping 클로저\"></a>@escaping 클로저</h3><p>원칙적으로 지금까지 배운 클로저들은 함수의 실행이 종료되면 파라미터로 쓰였던 클로저까지 함께 메모리에서 해제됩니다. </p>\n<p><code>@escaping</code> 클로저는 클로저를 제거하지 않고 함수에서 탈출시킵니다. 다른 말로, 함수가 종료되어도 클로저가 해제되지 않습니다.</p>\n<p>이런 기능이 필요한 경우는 크게 두 가지입니다.</p>\n<ol>\n<li>내부에서 사용한 클로저를 외부 변수에 저장</li>\n<li>GCD (비동기 코드의 사용)</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var aSavedFunction: () -&gt; () &#x3D; &#123; print(&quot;출력&quot;) &#125;\n\nfunc performEscaping2(closure: @escaping () -&gt; ()) &#123;\n\taSavedFunction &#x3D; closure &#x2F;&#x2F; 클로저를 외부 aSavedFunction에 할당\n&#125;\n\nperformEscaping2(closure: &#123; print(&quot;다르게 출력&quot;) &#125;)\naSavedFunction() &#x2F;&#x2F; 다르게 출력<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func performEscaping1(closure: @escaping (String) -&gt; ()) &#123;\n\tvar name &#x3D; &quot;홍길동&quot;\n\n\tDispatchQueue.main.asyncAfter(deadline: .now() + 1) &#123;\n\t\tclosure(name)\n\t&#125;\n&#125;\n\nperformEscaping1 &#123; name in\n\tprint(&quot;이름 출력하기: \\(name)&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>정리</p></blockquote>\n<ul>\n<li>함수 주소가 힙 영역에 저장되는 경우 ( &#x3D; 함수가 비교적 긴 시간 저장되어야 하는 경우)</li>\n</ul>\n<ol>\n<li>함수를 변수에 담는 경우</li>\n<li>중첩함수(Nested Function)에서 내부 함수를 반환하고, 그것을 외부 변수에 담는 경우</li>\n<li>비동기적인 클로저의 실행의 경우</li>\n</ol>\n<h3 id=\"autoclosure\"><a href=\"#autoclosure\" class=\"headerlink\" title=\"@autoclosure\"></a>@autoclosure</h3><p><code>@autoclosure</code>는 자동으로 클로저 처리를 해주는 키워드입니다. 번거로움을 조금이라도 줄이기 위해 자동으로 중괄호를 씌워줍니다.</p>\n<p><code>@autoclosure</code>는 파라미터가 없는 경우에만 사용할 수 있습니다.</p>\n<p>하지만 사실 잘 사용되지 않는 문법입니다. 코드가 명확하지 않게 작성되기 때문에 애플에서도 추천하지 않고 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func someFunction(closure: @autoclosure () -&gt; Bool) &#123;\n\tif closure() &#123;\n\t\tprint(&quot;참입니다.&quot;)\n\t&#125; else &#123;\n\t\tprint(&quot;거짓입니다.&quot;)\n\t&#125;\n&#125;\n\nvar num &#x3D; 1\nsomeFunction(closure: true)\n&#x2F;&#x2F; someFunction(closure: &#123; true &#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"클로저-사용-예시-코드로-UI-작성\"><a href=\"#클로저-사용-예시-코드로-UI-작성\" class=\"headerlink\" title=\"클로저 사용 예시 (코드로 UI 작성)\"></a>클로저 사용 예시 (코드로 UI 작성)</h2><ul>\n<li>설정까지 완료된 UI 컴포넌트의 반환</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let emailTextField: UITextField &#x3D; &#123;\n\tlet tf &#x3D; UITextField()\n\ttf.placeholder &#x3D; &quot;Email&quot;\n\ttf.backgroundColor &#x3D; .systemRed\n\ttf.borderStyle &#x3D; .roundedRect\n\ttf.font &#x3D; UIFont.systemFont(ofSize: 14)\n\ttf.addTarget(self, action: ..., for: ...)\n\treturn tf\n&#125;() &#x2F;&#x2F; 해당 클로저를 바로 실행하여 반환값을 할당<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 클로저 (Closure)클로저의 개념 및 1급 객체 취급클로저를 보기 전에기존의 함수의 타입 표기와 사용법은 다음과 같습니다. () -&gt; (), () -&gt; Void (...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":75,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":75,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80-Closure\"><span class=\"toc-text\">클로저 (Closure)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%EA%B0%9C%EB%85%90-%EB%B0%8F-1%EA%B8%89-%EA%B0%9D%EC%B2%B4-%EC%B7%A8%EA%B8%89\"><span class=\"toc-text\">클로저의 개념 및 1급 객체 취급</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EB%A5%BC-%EB%B3%B4%EA%B8%B0-%EC%A0%84%EC%97%90\"><span class=\"toc-text\">클로저를 보기 전에</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80\"><span class=\"toc-text\">클로저</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%95%A8%EC%88%98%EC%99%80-%ED%81%B4%EB%A1%9C%EC%A0%80\"><span class=\"toc-text\">함수와 클로저</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%95%A8%EC%88%98%EC%99%80-%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%ED%98%95%ED%83%9C\"><span class=\"toc-text\">함수와 클로저의 형태</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%9D%BC%EA%B8%89%EA%B0%9D%EC%B2%B4\"><span class=\"toc-text\">일급객체</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EB%8A%94-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\"><span class=\"toc-text\">클로저는 왜 필요할까?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98-Callback-Function\"><span class=\"toc-text\">콜백함수 (Callback Function)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%9C-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%ED%95%A8%EC%88%98%EC%97%90-%EB%B0%94%EB%A1%9C-%EB%84%A3%EA%B3%A0-%EC%8B%B6%EC%9D%84-%EB%95%8C-%EC%82%AC%ED%9B%84%EC%B2%98%EB%A6%AC\"><span class=\"toc-text\">파라미터를 처리한 결과를 함수에 바로 넣고 싶을 때 (사후처리)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%EA%B0%84%EC%86%8C%ED%99%94-%EB%AC%B8%EB%B2%95\"><span class=\"toc-text\">클로저의 간소화 문법</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%8A%B8%EB%A0%88%EC%9D%BC%EB%A7%81-Trailing-%ED%81%B4%EB%A1%9C%EC%A0%80\"><span class=\"toc-text\">트레일링 (Trailing) 클로저</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%ED%98%84%EC%8B%A4%EC%A0%81%EC%9D%B8-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\"><span class=\"toc-text\">현실적인 사용 예시</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EB%A9%80%ED%8B%B0%ED%94%8C-%ED%8A%B8%EB%A0%88%EC%9D%BC%EB%A7%81-%ED%81%B4%EB%A1%9C%EC%A0%80\"><span class=\"toc-text\">멀티플 트레일링 클로저</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%B0%8F-%EC%83%9D%EB%9E%B5-%EB%93%B1%EC%9D%98-%EA%B0%84%EC%86%8C%ED%99%94\"><span class=\"toc-text\">파라미터 및 생략 등의 간소화</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\"><span class=\"toc-text\">실제 사용 예시</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#URLSession\"><span class=\"toc-text\">URLSession</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Timer\"><span class=\"toc-text\">Timer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dismiss\"><span class=\"toc-text\">dismiss</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC\"><span class=\"toc-text\">클로저의 메모리</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EB%8A%94-%EC%B0%B8%EC%A1%B0%ED%83%80%EC%9E%85\"><span class=\"toc-text\">클로저는 참조타입!</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%EC%BA%A1%EC%B2%98-%ED%98%84%EC%83%81\"><span class=\"toc-text\">클로저의 캡처 현상</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%ED%95%A8%EC%88%98-Nested-Function\"><span class=\"toc-text\">일반적인 함수 (Nested Function)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EB%B3%80%EC%88%98%EB%A5%BC-%EC%BA%A1%EC%B2%98%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98\"><span class=\"toc-text\">변수를 캡처하는 함수</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#escaping-x2F-autoclosure-%ED%81%B4%EB%A1%9C%EC%A0%80\"><span class=\"toc-text\">@escaping &#x2F; @autoclosure 클로저</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#escaping-%ED%81%B4%EB%A1%9C%EC%A0%80\"><span class=\"toc-text\">@escaping 클로저</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#autoclosure\"><span class=\"toc-text\">@autoclosure</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-UI-%EC%9E%91%EC%84%B1\"><span class=\"toc-text\">클로저 사용 예시 (코드로 UI 작성)</span></a></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"36)🧰 Swift - 고차함수 (High-Order Function)","uid":"e87344a11426ba57cb8d3c641a799f55","slug":"Allen/2022-11-04-Allen36","date":"2022-11-03T15:00:00.000Z","updated":"2023-03-31T10:34:54.018Z","comments":true,"path":"api/articles/Allen/2022-11-04-Allen36.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 고차 함수 함수를 파라미터로 사용하거나, 함수 실행의 결과를 함수로 리턴하는 함수 mapmap 함수는 기존 배열등의 컬렉션을 새롭게 매핑해서 새로운 배열을 리턴하는 함수입니다. ...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":75,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":75,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"13)🍎 Swift - ScrollView 오토 레이아웃으로 구현하기","uid":"28d16104e44090134cb96751618130c4","slug":"Swift/2022-10-21-Swift13","date":"2022-10-20T15:00:00.000Z","updated":"2023-03-31T10:42:31.441Z","comments":true,"path":"api/articles/Swift/2022-10-21-Swift13.json","keywords":null,"cover":[],"text":"UIScrollView는 스토리보드에서 사용할 때마다 에러를 내는 UI 컴포넌트 중 대표적인 친구입니다.하지만 언제나처럼 컴퓨터는 잘못이 없죠.제대로 알고 사용하지 못해서 일어나는 장애물이라고 생각하고 머리를 정리할 겸 단계별로 알아보겠습니다. UIS...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":27,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":75,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":75,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}