{"title":"31)🧰 Swift - 확장 (Extension)","uid":"292d583f42b056cdd5b64c3d16288af9","slug":"Allen/2022-10-10-Allen31","date":"2022-10-09T15:00:00.000Z","updated":"2023-03-31T10:34:08.341Z","comments":true,"path":"api/articles/Allen/2022-10-10-Allen31.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"확장-Extension\"><a href=\"#확장-Extension\" class=\"headerlink\" title=\"확장 (Extension)\"></a>확장 (Extension)</h1><ul>\n<li>현재 존재하는 타입에 <strong>기능(메서드)를 추가</strong>하여 사용</li>\n<li>Swift에서는 확장에서 정의한 메서드에 대한 재정의 불가</li>\n<li>본체에 대한 재정의도 불가</li>\n</ul>\n<h5 id=\"상속과의-차이점\"><a href=\"#상속과의-차이점\" class=\"headerlink\" title=\"상속과의 차이점\"></a>상속과의 차이점</h5><ul>\n<li><strong>상속</strong>(Inheritance): <strong>수직 확장</strong><ul>\n<li>성격이 비슷한 타입을 새로 만드는 것<ul>\n<li>저장속성을 추가하거나</li>\n<li>메서드를 변형시켜 사용</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>확장</strong>(Extension): <strong>수평 확장</strong><ul>\n<li>현재 존재하는 타입에 메서드를 추가하는 것<ul>\n<li>저장속성의 추가는 불가</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"예시\"><a href=\"#예시\" class=\"headerlink\" title=\"예시\"></a>예시</h2><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Person &#123;\n\tvar id &#x3D; 0\n\tvar name &#x3D; &quot;이름&quot;\n\tvar email &#x3D; &quot;123@gmail.com&quot;\n\n\tfunc walk() &#123;\n\t\tprint(&quot;사람이 걷는다.&quot;)\n\t&#125;\n&#125;\n\nclass Student: Person &#123;\n\tvar studentId &#x3D; 1\n\n\toverride func walk() &#123;\n\t\tprint(&quot;학생이 걷는다.&quot;)\n\t&#125;\n&#125;\n\nlet student &#x3D; Student()\nstudent.play() &#x2F;&#x2F; &quot;학생이 논다.&quot;\n&#x2F;&#x2F; extension이 뒤에 있어도 가능\n\nextension Student &#123;\n\tfunc play() &#123;\n\t\tprint(&quot;학생이 논다.&quot;)\n\t&#125;\n&#125;\n\nlet student2 &#x3D; Student()\nstudent2.play() &#x2F;&#x2F; &quot;학생이 논다.&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"상속-x2F-확장과-메모리-구조\"><a href=\"#상속-x2F-확장과-메모리-구조\" class=\"headerlink\" title=\"상속&#x2F;확장과 메모리 구조\"></a>상속&#x2F;확장과 메모리 구조</h2><ul>\n<li>확장은 <strong>메서드 테이블 외의 공간</strong>에 메서드를 추가하는 동작</li>\n<li>따라서 확장하여 정의된 메서드는 <strong>상속</strong>은 되지만 <strong>재정의</strong>는 되지 않는다.<ul>\n<li><code>@objc</code> 키워드를 메서드 앞에 붙이면 재정의도 가능은 하다.</li>\n<li>Obj-C에서는 가능하기 때문!</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"확장의-장점\"><a href=\"#확장의-장점\" class=\"headerlink\" title=\"확장의 장점\"></a>확장의 장점</h2><ul>\n<li>애플이 구현해둔 기능들에  나만의 기능을 추가할 수 있다…!</li>\n<li><code>Int</code>, <code>UIViewController</code>, <code>UIColor</code> 등</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Int &#123;\n\tvar squared: Int &#123;\n\t\treturn self * self\n\t&#125;\n&#125;\n\nprint(5.squared) &#x2F;&#x2F; 25<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"확장-가능한-멤버\"><a href=\"#확장-가능한-멤버\" class=\"headerlink\" title=\"확장 가능한 멤버\"></a>확장 가능한 멤버</h2><ul>\n<li>기본적으로 메서드의 형태는 모두 가능하다고 보면 된다.</li>\n</ul>\n<ol>\n<li>계산 속성</li>\n<li><strong>메서드</strong></li>\n<li>새로운 생성자<ul>\n<li>클래스의 경우 <strong>편의생성자</strong>만 추가 가능, 지정생성자&#x2F;소멸자는 본체에 구현</li>\n</ul>\n</li>\n<li>서브스크립트</li>\n<li>새로운 중첩 타입 정의 및 사용</li>\n<li>프로토콜 채택 및 프로토콜 관련 메서드</li>\n</ol>\n<h3 id=\"계산-속성\"><a href=\"#계산-속성\" class=\"headerlink\" title=\"계산 속성\"></a>계산 속성</h3><h4 id=\"타입-계산-속성-static\"><a href=\"#타입-계산-속성-static\" class=\"headerlink\" title=\"타입 계산 속성 (static)\"></a>타입 계산 속성 (<code>static</code>)</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Double &#123;\n\tstatic var zero: Double &#123; return 0.0 &#125;\n&#125;\nprint(Double.zero) &#x2F;&#x2F; 0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"인스턴스-계산-속성\"><a href=\"#인스턴스-계산-속성\" class=\"headerlink\" title=\"인스턴스 계산 속성\"></a>인스턴스 계산 속성</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Double &#123;\n\tvar km: Double &#123; return self * 1000.0 &#125;\n\tvar m: Double &#123; return self &#125;\n\tvar cm: Double &#123; return self &#x2F; 100.0 &#125;\n\tvar mm: Double &#123; return self &#x2F; 1000.0&#125;\n\tvar ft: Double &#123; return self &#x2F; 3.28084 &#125;\n&#125;\n\n10.0.km &#x2F;&#x2F; 10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"메서드\"><a href=\"#메서드\" class=\"headerlink\" title=\"메서드\"></a>메서드</h3><h4 id=\"타입-메서드-static\"><a href=\"#타입-메서드-static\" class=\"headerlink\" title=\"타입 메서드 (static)\"></a>타입 메서드 (<code>static</code>)</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">Int.random(in: 1...100)\n\nextension Int &#123;\n\tstatic func prinNumbersFrom1to5() &#123;\n\t\tfor i in 1...5 &#123;\n\t\t\tprint(i)\n\t\t&#125;\n\t&#125;\n&#125;\n\nInt.printNumbersFrom1to5() &#x2F;&#x2F; 1 2 3 4 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"인스턴스-메서드\"><a href=\"#인스턴스-메서드\" class=\"headerlink\" title=\"인스턴스 메서드\"></a>인스턴스 메서드</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension String &#123;\n\tfunc printHelloRepetitions(of times: Int) &#123;\n\t\tfor _ in 0..&lt;times &#123;\n\t\t\tprint(&quot;Hello \\(self)!&quot;)\n\t\t&#125;\n\t&#125;\n&#125;\n\n&quot;Steve&quot;.printHelloRepetitions(of: 4)\n&#x2F;&#x2F; &quot;Hello Steve!&quot;\n&#x2F;&#x2F; &quot;Hello Steve!&quot;\n&#x2F;&#x2F; &quot;Hello Steve!&quot;\n&#x2F;&#x2F; &quot;Hello Steve!&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"mutating-인스턴스-메서드\"><a href=\"#mutating-인스턴스-메서드\" class=\"headerlink\" title=\"mutating 인스턴스 메서드\"></a><code>mutating</code> 인스턴스 메서드</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Int &#123;\n\tmutating func square() &#123;\n\t\tself &#x3D; self * self\n\t&#125;\n&#125;\n\nvar someInt &#x3D; 3\nsomeInt.square()\nprint(someInt) &#x2F;&#x2F; 9<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"생성자\"><a href=\"#생성자\" class=\"headerlink\" title=\"생성자\"></a>생성자</h3><h4 id=\"클래스\"><a href=\"#클래스\" class=\"headerlink\" title=\"클래스\"></a>클래스</h4><ul>\n<li>클래스의 경우 <strong>편의생성자</strong>만 추가 가능</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">UIColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\n\nextension UIColor &#123;\n\tconvenience init(color: CGFloat) &#123;\n\t\tself.init(red: color&#x2F;255, green: color&#x2F;255, blue: color&#x2F;255, alpha: 1)\n\t&#125;\n&#125;\n\nUIColor.init(color: 1)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"구조체\"><a href=\"#구조체\" class=\"headerlink\" title=\"구조체\"></a>구조체</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Dog &#123;\n\tvar name: String &#x3D; &quot;&quot;\n\tvar weight: Int &#x3D; 0\n\tvar height: Int &#x3D; 0\n&#125;\n\nextension Dog &#123;\n\tinit(name: String) &#123;\n\t\tself.name &#x3D; name\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 3개의 생성자를 사용할 수 있다.\n&#x2F;&#x2F; 원칙적으로 개발자가 생성자를 정의해주었으니\n&#x2F;&#x2F; 아래의 예시처럼\n&#x2F;&#x2F; 기본생성자인 Dog()와 \n&#x2F;&#x2F; 멤버와이즈 생성자인 Dog(name:,weight:,height:)는 제공이 되지 않아야 한다.\nDog()\nDog(name: String)\nDog(name: String, weight: Int, height: Int)\n\nstruct Dog &#123;\n\tvar name: String &#x3D; &quot;&quot;\n\tvar weight: Int &#x3D; 0\n\tvar height: Int &#x3D; 0\n\n\tinit(name: String) &#123;\n\t\tself.name &#x3D; name\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 개발자가 정의한 생성자만 제공된다.\nDog(name: String)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"서브스크립트\"><a href=\"#서브스크립트\" class=\"headerlink\" title=\"서브스크립트\"></a>서브스크립트</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Int &#123;\n\t&#x2F;&#x2F; n 자리의 십진수 반환하도록 하는 서브스크립트\n\tsubscript(digitIndex: Int) -&gt; Int &#123;\n\t\tvar decimalBase &#x3D; 1\n\t\tfor _ in 0..&lt;digitIndex &#123;\n\t\t\tdecimalBase *&#x3D; 10\n\t\t&#125;\n\t\treturn (self &#x2F; decimalBase)  % 10\n\t&#125;\n&#125;\n\n746381295[0] &#x2F;&#x2F; 5\n746381295[1] &#x2F;&#x2F; 9\n746381295[2] &#x2F;&#x2F; 2\n746381295[3] &#x2F;&#x2F; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"중첩-타입-Nested-Types\"><a href=\"#중첩-타입-Nested-Types\" class=\"headerlink\" title=\"중첩 타입 (Nested Types)\"></a>중첩 타입 (Nested Types)</h3><ul>\n<li>중첩 타입이란?<ul>\n<li>연관이 너무 깊은 타입일 경우 하나의 타입 안에 다른 타입을 정의 가능</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Day &#123;\n\tenum Weekday &#123;\n\t\tcase mon\n\t\tcase tue\n\t\tcase wed\n\t&#125;\n\n\tvar day: Weekday &#x3D; .mon\n&#125;\n\nvar ddd: Day.Weekday &#x3D; Day.Weekday.mon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Int &#123;\n\tenum Kind &#123;\n\t\tcase negative, zero, positive\n\t&#125;\n\n\tvar kind: Kind &#123;\n\t\tswitch self &#123;\n\t\tcase 0:\n\t\t\treturn .zero\n\t\tcase let x where x &gt; 0:\n\t\t\treturn .positive\n\t\tcase let x where x &lt; 0:\n\t\t\treturn .negative\n\t\t&#125;\n\t&#125;\n&#125;\n\nlet a &#x3D; 1\nprint(a.kind) &#x2F;&#x2F; &quot;positive&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 확장 (Extension) 현재 존재하는 타입에 기능(메서드)를 추가하여 사용 Swift에서는 확장에서 정의한 메서드에 대한 재정의 불가 본체에 대한 재정의도 불가 상속과의 차이...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":80,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":80,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%ED%99%95%EC%9E%A5-Extension\"><span class=\"toc-text\">확장 (Extension)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D%EA%B3%BC%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\"><span class=\"toc-text\">상속과의 차이점</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%98%88%EC%8B%9C\"><span class=\"toc-text\">예시</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D-x2F-%ED%99%95%EC%9E%A5%EA%B3%BC-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\"><span class=\"toc-text\">상속&#x2F;확장과 메모리 구조</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%99%95%EC%9E%A5%EC%9D%98-%EC%9E%A5%EC%A0%90\"><span class=\"toc-text\">확장의 장점</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%A9%A4%EB%B2%84\"><span class=\"toc-text\">확장 가능한 멤버</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B3%84%EC%82%B0-%EC%86%8D%EC%84%B1\"><span class=\"toc-text\">계산 속성</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%ED%83%80%EC%9E%85-%EA%B3%84%EC%82%B0-%EC%86%8D%EC%84%B1-static\"><span class=\"toc-text\">타입 계산 속성 (static)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EA%B3%84%EC%82%B0-%EC%86%8D%EC%84%B1\"><span class=\"toc-text\">인스턴스 계산 속성</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EB%A9%94%EC%84%9C%EB%93%9C\"><span class=\"toc-text\">메서드</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%ED%83%80%EC%9E%85-%EB%A9%94%EC%84%9C%EB%93%9C-static\"><span class=\"toc-text\">타입 메서드 (static)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%84%9C%EB%93%9C\"><span class=\"toc-text\">인스턴스 메서드</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#mutating-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%84%9C%EB%93%9C\"><span class=\"toc-text\">mutating 인스턴스 메서드</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%83%9D%EC%84%B1%EC%9E%90\"><span class=\"toc-text\">생성자</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\"><span class=\"toc-text\">클래스</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4\"><span class=\"toc-text\">구조체</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%84%9C%EB%B8%8C%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\"><span class=\"toc-text\">서브스크립트</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A4%91%EC%B2%A9-%ED%83%80%EC%9E%85-Nested-Types\"><span class=\"toc-text\">중첩 타입 (Nested Types)</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"30)🧰 Swift - Any","uid":"ef533afe96035326c780dd33d82b0d35","slug":"Allen/2022-10-10-Allen30","date":"2022-10-09T15:00:00.000Z","updated":"2023-03-31T10:34:04.842Z","comments":true,"path":"api/articles/Allen/2022-10-10-Allen30.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) Any와 AnyObject를 위한 타입 캐스팅Any 타입 기본 타입들을 포함하여 커스텀 클래스, 옵셔널, 구조체, 열거형, 함수 타입 등 모든 타입을 포함하여 어떤 타입도 표현할...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":80,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":80,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"28)🧰 Swift - 타입 캐스팅 (Type Casting)","uid":"f95356eadf2eace8ae678d705c540cf0","slug":"Allen/2022-10-05-Allen28","date":"2022-10-04T15:00:00.000Z","updated":"2023-03-31T10:33:54.064Z","comments":true,"path":"api/articles/Allen/2022-10-05-Allen28.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 타입 캐스팅 (Type Casting)is 연산자 (Type Check Operator) 타입에 대한 검사를 수행하는 연산자 [instance] is [type] 참: true ...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":80,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":80,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}