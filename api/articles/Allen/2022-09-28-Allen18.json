{"title":"18)🧰 Swift - Enumeration","uid":"aea8aabe27f9653e7cb5727da120f0b0","slug":"Allen/2022-09-28-Allen18","date":"2022-09-27T15:00:00.000Z","updated":"2023-03-31T10:33:00.531Z","comments":true,"path":"api/articles/Allen/2022-09-28-Allen18.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"열거형-Enumeration\"><a href=\"#열거형-Enumeration\" class=\"headerlink\" title=\"열거형 (Enumeration)\"></a>열거형 (Enumeration)</h1><ul>\n<li>타입 자체를 한정된 사례(case) 안에서 정의할 수 있는 타입</li>\n<li>연관된 상수들을 하나의 이름으로 묶음</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum Weekday &#123;\n\tcase monday\n\tcase tuesday\n\tcase wednesday\n\tcase thursday\n\tcase friday\n\tcase saturday\n\tcase sunday\n&#125;\n\nenum CompassPoint &#123;\n\tcase north, south, east, west\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>한정된 사례 안에서 정의되는 경우에 매우 유용!<ul>\n<li>ex) 월화수목금토일, 동서남북, 왼쪽가운데오른쪽, 남여, 가위바위보</li>\n</ul>\n</li>\n<li>코드의 가독성과 안정성 ⬆️<ul>\n<li>명확한 분기 처리 가능</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"열거형은-타입이다\"><a href=\"#열거형은-타입이다\" class=\"headerlink\" title=\"열거형은 타입이다!\"></a>열거형은 타입이다!</h2><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var today: Weekday &#x3D; Weekday.monday\ntoday &#x3D; .wednesday &#x2F;&#x2F; Weekday 생략 (타입이 명확할 때)\n\nif today &#x3D;&#x3D; .sunday &#123;\n\tprint(&quot;오늘은 일요일입니다.&quot;)\n&#125; else if today &#x3D;&#x3D; .monday &#123;\n\tprint(&quot;오늘은 월요일입니다.&quot;)\n&#125;\n\nswitch todya &#123;\ncase .monday:\n\tprint(&quot;오늘은 월요일입니다.&quot;)\ncase .tuesday:\n\tprint(&quot;오늘은 화요일입니다.&quot;)\n\t...\ncase .sunday:\n\tprint(&quot;오늘은 일요일입니다.&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"열거형의-원시값과-연관값\"><a href=\"#열거형의-원시값과-연관값\" class=\"headerlink\" title=\"열거형의 원시값과 연관값\"></a>열거형의 원시값과 연관값</h2><h3 id=\"원시값-Raw-Value\"><a href=\"#원시값-Raw-Value\" class=\"headerlink\" title=\"원시값 (Raw Value)\"></a>원시값 (Raw Value)</h3><ul>\n<li>매칭되는 기본값을 정하여 열거형을 좀 더 쉽게 활용 가능할 수 있도록 돕는 값<ul>\n<li>원시값은 Hashable한 타입은 모두 가능하다.</li>\n<li>하지만 일반적으로 <code>Int</code>와 <code>String</code> 타입을 사용한다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum Alignment: Int &#123; &#x2F;&#x2F; Int 타입 원시값\n\tcase left\n\tcase center\n\tcase right\n&#125;\n\nenum Alignment2: String &#123; &#x2F;&#x2F; String 타입 원시값\n\tcase left\n\tcase center &#x3D; &quot;C&quot;\n\tcase right\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p><code>Int</code> 타입 원시값<br>위의 경우처럼 원시값을 따로 지정해주지 않으면, 앞에서부터 순서대로 0, 1, 2, …가 원시값으로 부여됩니다.<br>부분적으로 설정해준다면, 설정된 다음의 원시값 또한 자동으로 1씩 증가되며 부여됩니다.</p>\n<ul>\n<li>ex) 0, 2(설정), 3, 4 , …</li>\n</ul>\n</li>\n<li><p><code>String</code> 타입 원시값<br>원시값을 따로 지정해주지 않으면, <code>case</code>의 이름을 그대로 가져다 부여됩니다.</p>\n<ul>\n<li>ex) left, center, right</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let align &#x3D; Alignment(rawValue: 0) &#x2F;&#x2F; Optional (해당 rawValue를 지니지 않을 수도 있기 때문에)\nlet leftValue &#x3D; Alignment.center.rawValue &#x2F;&#x2F; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"활용\"><a href=\"#활용\" class=\"headerlink\" title=\"활용\"></a>활용</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum RpsGame: Int &#123;\n\tcase &quot;Rock&quot;, &quot;Scissor&quot;, &quot;Paper&quot;\n&#125;\n\nlet number &#x3D; Int.random(in: 0...100) % 3\nprint(RpsGame(rawValue: number)!)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"연관값-Associative-Value\"><a href=\"#연관값-Associative-Value\" class=\"headerlink\" title=\"연관값 (Associative Value)\"></a>연관값 (Associative Value)</h3><ul>\n<li>구체적인 추가 정보를 저장하기 위해 사용</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum Computer &#123;\n\tcase cpu(core: Int, ghz: Double)\n\tcase ram(Int, String)\n\tcase hardDisk(gb: Int)\n&#125;\n\nvar chip &#x3D; Computer.cpu(core: 8, ghz: 3.1)\n\nswitch chip &#123;\ncase .cpu(let a, let b):\n\tprint(&quot;CPU ](a)코어 \\(b)GHZ입니다.&quot;)\ncase let .ram(a, _):\n\tprint(&quot;램 \\(a) 기가램입니다.&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"잠깐-이제-Optional을-정확하게-이해할-수-있다\"><a href=\"#잠깐-이제-Optional을-정확하게-이해할-수-있다\" class=\"headerlink\" title=\"잠깐! 이제 Optional을 정확하게 이해할 수 있다!\"></a>잠깐! 이제 Optional을 정확하게 이해할 수 있다!</h5><ul>\n<li><code>Optional</code> 타입의 내부는 열거형이다.</li>\n<li>결국 Optional 타입은 값이 없을 때 에러가 나지 않도록 임시로 열거형 타입의 값을 넣어두는 것..!</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum Optional&lt;Wrapped&gt; &#123;\n\tcase some(Wrapped)\n\tcase none &#x2F;&#x2F; nil\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"열거형과-switch문\"><a href=\"#열거형과-switch문\" class=\"headerlink\" title=\"열거형과 switch문\"></a>열거형과 <code>switch</code>문</h2><ul>\n<li>열거형은 <code>switch</code>문과 함께 사용했을 때 사용성이 높아진다!<ul>\n<li>열거형은 한정된 사례로 만든 타입이고, 스위치문은 표현식에 대한 분기 처리에 최적화되어 있기 때문에, 서로 잘 맞는다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum LoginProvider: String &#123;\n\tcase email\n\tcase facebook\n\tcase google\n&#125;\n\nlet userLogin &#x3D; LoginProvider.email\n\nswitch userLogin &#123;\ncase .email:\n\tprint(&quot;이메일 로그인&quot;)\ncase .facebook:\n\tprint(&quot;페이스북 로그인&quot;)\ncase .google:\n\tprint(&quot;구글 로그인&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"옵셔널-열거형과-switch문\"><a href=\"#옵셔널-열거형과-switch문\" class=\"headerlink\" title=\"옵셔널 열거형과 switch문\"></a>옵셔널 열거형과 <code>switch</code>문</h3><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">SomeEnum</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token keyword\">left</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token keyword\">right</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SomeEnum</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">left</span> <span class=\"token comment\">// Optional은 열거형</span>\n<span class=\"token comment\">// 열거형 안에 열거형이 있는 형태</span>\n\n<span class=\"token comment\">// 따라서 원칙적으로는 아래와 같이 처리해야 한다.</span>\n<span class=\"token keyword\">switch</span> x <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">switch</span> value <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">left</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"왼쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">right</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오른쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">none</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"계속 전진\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 하지만 너무 불편하다.</span>\n<span class=\"token comment\">// 편의적 장치가 당연히 마련되어 있다.</span>\n<span class=\"token keyword\">switch</span> x <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">left</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"왼쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오른쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">none</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"계속 전진\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 조금 더 편하게!</span>\n<span class=\"token keyword\">switch</span> x <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">left</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"왼쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">right</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오른쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"계속 전진\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"열거형에-연관값이-있는-경우의-활용\"><a href=\"#열거형에-연관값이-있는-경우의-활용\" class=\"headerlink\" title=\"열거형에 연관값이 있는 경우의 활용\"></a>열거형에 연관값이 있는 경우의 활용</h2><ul>\n<li>열거형 <code>case</code> 패턴<ul>\n<li><code>case Enum.case(let 변수이름):</code></li>\n<li><code>case let Enum.case(변수이름):</code></li>\n</ul>\n</li>\n<li>특이하게도 이 패턴은 <code>if / guard / for-in / while</code>에서도 사용 가능하다.</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">if case Computer.hardDisk(gb: let gB) &#x3D; chip &#123;\n\tprint(&quot;\\(gB)기가 바이트 하드디스크&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>원래는 <code>switch</code>문에서 시작되었다.<ul>\n<li>한 가지 값만 체크하고 싶을 때도 <code>switch</code>문을 사용해야하는 불편함</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"열거형-케이스-패턴-for\"><a href=\"#열거형-케이스-패턴-for\" class=\"headerlink\" title=\"열거형 케이스 패턴 (for)\"></a>열거형 케이스 패턴 (<code>for</code>)</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let arrays: [Int?] &#x3D; [nil, 2, 3, nil, 5]\n\nfor case let .some(number) in arrays &#123;\n\tprint(&quot;Found a \\(number)&quot;)\n&#125;\nfor case .some(let number) in arrays &#123;\n\tprint(&quot;Found a \\(number)&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"옵셔널-패턴-Optional-Pattern\"><a href=\"#옵셔널-패턴-Optional-Pattern\" class=\"headerlink\" title=\"옵셔널 패턴 (Optional Pattern)\"></a>옵셔널 패턴 (Optional Pattern)</h2><ul>\n<li>옵셔널 타입에서 열거형 케이스 패턴을 더 간소화</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let a: Int? &#x3D; 1\n\n&#x2F;&#x2F; 열거형 케이스 패턴\nswitch a &#123;\ncase .some(let z):\n\tprint(z)\ncase .none:\n\tprint(&quot;nil&quot;)\n&#125;\n\n&#x2F;&#x2F; 옵셔널 패턴\nswitch a &#123;\ncase let z?: &#x2F;&#x2F; .some 간소화\n\tprint(z)\ncase nil: &#x2F;&#x2F; &#x3D;&#x3D; .none\n\tprint(&quot;nil&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let arrays: [Int?] &#x3D; [nil, 2, 3, nil, 5]\n\n&#x2F;&#x2F; 열거형 케이스 패턴\nfor case .some(let number) in arrays &#123;\n\tprint(&quot;Found a \\(number)&quot;)\n&#125;\n\n&#x2F;&#x2F; 옵셔널 패턴\nfor case let number? in arrays &#123;\n\tprint(&quot;Found a \\(number)&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"unknown\"><a href=\"#unknown\" class=\"headerlink\" title=\"@unknown\"></a><code>@unknown</code></h2><ul>\n<li>열거형 케이스가 늘어난다면 올바른 처리를 하고 있는 것일까?</li>\n</ul>\n<p>아래 에시는 열거형 타입을 <code>switch</code>문으로 사용하고 있다. 이 때 열거형 <code>LoginProvider</code>에 <code>case</code>가 추가되었을 경우, 아래의 <code>switch</code>문에서 매번 제대로 처리를 할 수 있을까?<br><code>default</code>문에 의해 개발자가 캐치하지 못할 수 있다. 이 때 에러 처리를 할 수 있는 방법이 있다면, 발견하기 어려웠던 에러를 처리하기 쉬워질 것이다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum LoginProvider: String &#123;\n\tcase email\n\tcase facebook\n\tcase google\n\tcase kakaotalk\n&#125;\n\nlet userLogin &#x3D; LoginProvider.email\n\nswitch userLogin &#123;\ncase .email:\n\tprint(&quot;이메일 로그인&quot;)\ncase .facebook:\n\tprint(&quot;페이스북 로그인&quot;)\ncase .google:\n\tprint(&quot;구글 로그인&quot;)\ncase .kakaotalk:\n\tprint(&quot;카카오톡 로그인&quot;)\n@unknown default:\n\tprint(&quot;그 외 로그인&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>default</code>의 앞에 <code>@unknown</code> 키워드를 추가함으로서 열거형의 모든 <code>case</code>를 다루지 않았음을 <strong>경고</strong>로서 알려준다.</p>\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 열거형 (Enumeration) 타입 자체를 한정된 사례(case) 안에서 정의할 수 있는 타입 연관된 상수들을 하나의 이름으로 묶음 enum Weekday &#123; case...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%EC%97%B4%EA%B1%B0%ED%98%95-Enumeration\"><span class=\"toc-text\">열거형 (Enumeration)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%80-%ED%83%80%EC%9E%85%EC%9D%B4%EB%8B%A4\"><span class=\"toc-text\">열거형은 타입이다!</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%98-%EC%9B%90%EC%8B%9C%EA%B0%92%EA%B3%BC-%EC%97%B0%EA%B4%80%EA%B0%92\"><span class=\"toc-text\">열거형의 원시값과 연관값</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%9B%90%EC%8B%9C%EA%B0%92-Raw-Value\"><span class=\"toc-text\">원시값 (Raw Value)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%ED%99%9C%EC%9A%A9\"><span class=\"toc-text\">활용</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%97%B0%EA%B4%80%EA%B0%92-Associative-Value\"><span class=\"toc-text\">연관값 (Associative Value)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%9E%A0%EA%B9%90-%EC%9D%B4%EC%A0%9C-Optional%EC%9D%84-%EC%A0%95%ED%99%95%ED%95%98%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\"><span class=\"toc-text\">잠깐! 이제 Optional을 정확하게 이해할 수 있다!</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EA%B3%BC-switch%EB%AC%B8\"><span class=\"toc-text\">열거형과 switch문</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EC%97%B4%EA%B1%B0%ED%98%95%EA%B3%BC-switch%EB%AC%B8\"><span class=\"toc-text\">옵셔널 열거형과 switch문</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%97%90-%EC%97%B0%EA%B4%80%EA%B0%92%EC%9D%B4-%EC%9E%88%EB%8A%94-%EA%B2%BD%EC%9A%B0%EC%9D%98-%ED%99%9C%EC%9A%A9\"><span class=\"toc-text\">열거형에 연관값이 있는 경우의 활용</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%97%B4%EA%B1%B0%ED%98%95-%EC%BC%80%EC%9D%B4%EC%8A%A4-%ED%8C%A8%ED%84%B4-for\"><span class=\"toc-text\">열거형 케이스 패턴 (for)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%8C%A8%ED%84%B4-Optional-Pattern\"><span class=\"toc-text\">옵셔널 패턴 (Optional Pattern)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#unknown\"><span class=\"toc-text\">@unknown</span></a></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"22)🧰 Swift - 속성(Property)","uid":"5947096696ce0c574876d193148e2ccd","slug":"Allen/2022-09-29-Allen22","date":"2022-09-28T15:00:00.000Z","updated":"2023-03-31T10:33:20.694Z","comments":true,"path":"api/articles/Allen/2022-09-29-Allen22.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 구조체와 클래스의 속성저장 속성 (Stored Properties)저장 속성 (Stored Properties) 값이 저장되는 일반적인 속성(변수) 특정한 메모리 공간을 가지고 ...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"17)🧰 Swift - Collection","uid":"bc8ee1187329b643d5f24f6ff5a92ac2","slug":"Allen/2022-09-27-Allen17","date":"2022-09-26T15:00:00.000Z","updated":"2023-03-31T10:32:54.557Z","comments":true,"path":"api/articles/Allen/2022-09-27-Allen17.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 컬렉션 (Collection)스위프트의 컬렉션 컬렉션: 여러개의 데이터를 한꺼번에 다루는 바구니 타입 데이터를 효율적으로 관리하기 위한 자료형(타입)**** 배열(Array), ...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}