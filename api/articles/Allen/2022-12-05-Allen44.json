{"title":"44)🧰 Swift - Result","uid":"a100c7d58a4f32a64e774374f49a8b76","slug":"Allen/2022-12-05-Allen44","date":"2022-12-04T15:00:00.000Z","updated":"2023-03-31T10:35:38.474Z","comments":true,"path":"api/articles/Allen/2022-12-05-Allen44.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h1><p><code>Result</code> 타입은 열거형입니다.</p>\n<p>내부적으로 <code>success(연관값)</code>과 <code>failure(연관값)</code>을 갖고 있어요.</p>\n<p>성공했을 때와 실패했을 때의 정보를 모두 담고 있는 것이죠.</p>\n<p>이 <code>Result</code> 타입을 사용하면 <code>do-catch</code>문을 활용한 에러 처리를 보다 편리하게 할 수 있습니다.</p>\n<h2 id=\"Result-타입을-활용한-에러의-처리\"><a href=\"#Result-타입을-활용한-에러의-처리\" class=\"headerlink\" title=\"Result 타입을 활용한 에러의 처리\"></a>Result 타입을 활용한 에러의 처리</h2><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func resultTypeCheckingHeight(hight: Int) -&gt; Result&lt;Bool, HeightError&gt; &#123;\n\tif height &gt; 190 &#123;\n\t\treturn Result.failure(HeightError.maxHeight)\n\t&#125; else if height &lt; 130 &#123;\n\t\treturn Result.failure(HeightError.minHeight)\n\t&#125; else &#123;\n\t\tif height &gt;&#x3D; 160 &#123;\n\t\t\treturn Result.success(true)\n\t\t&#125; else &#123;\n\t\t\treturn Result.success(false)\n\t\t&#125;\n\t&#125;\n&#125;\n\nlet result &#x3D; resultTypeCheckingHeight(height: 200)\n\nswitch result &#123;\ncase .success(let data):\n\tprint(&quot;결과값은 \\(data)입니다.&quot;)\ncase .failure(let error):\n\tprint(error)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Result</code> 타입을 사용하면 결과를 처리할 때 코드가 상당히 깔끔해지는 이점이 있습니다.</p>\n<p>연관값을 사용하여 바로 다른 작업을 수행할 수 있고, 에러를 하나의 <code>case</code>에서 통합하여 처리할 수 있게 됩니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">do &#123;\n\tlet data &#x3D; try result.get()\n\tprint(&quot;결과값은 \\(data)입니다.&quot;)\n&#125; catch &#123;\n\tprint(error)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위와 같이 <code>get()</code>을 사용하여 에러를 다시 한번 던져줄수도 있습니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>Result</code> 타입을 왜 사용할까?</p></blockquote>\n<p>성공과 실패의 경우를 명확하게 나누어 사용할 수 있습니다.</p>\n<p>에러 타입을 명시적으로 선언해서 타입캐스팅이 필요없다는 이점이 있어요.</p>\n<p>원래의 방식을 대체하려고 나온 것이 아니라 하나의 방법을 더 제안하는 방식으로 고안되었다고 합니다.</p>\n<h2 id=\"네트워킹-코드에서-Result-타입\"><a href=\"#네트워킹-코드에서-Result-타입\" class=\"headerlink\" title=\"네트워킹 코드에서 Result 타입\"></a>네트워킹 코드에서 <code>Result</code> 타입</h2><p>예외 처리인만큼 네트워킹을 할 때 가장 많이 사용이 되겠죠.</p>\n<p>네트워킹 예시를 비교해보고 마치도록 하겠습니다.</p>\n<h3 id=\"Result-타입-사용-전\"><a href=\"#Result-타입-사용-전\" class=\"headerlink\" title=\"Result 타입 사용 전\"></a>Result 타입 사용 전</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum NetworkError: Error &#123;\n\tcase someError\n&#125;\n\nfunc performRequest(with url: String, completion: @escaping (Data?, NetworkError?) -&gt; Void) &#123;\n\tguard let url &#x3D; URL(string: url) else &#123; return &#125;\n\tURLSession.shared.dataTask(with: url) &#123; data, response, error in\n\t\tif error !&#x3D; nil &#123;\n\t\t\tprint(error!)\n\t\t\tcompletion(nil, .someError)\n\t\t\treturn\n\t\t&#125;\n\t\tguard let safeData &#x3D; data else &#123;\n\t\t\tcompletion(nil, .someError)\n\t\t\treturn\n\t\t&#125;\n\t\tcompletion(safeData, nil)\n\t&#125;.resume()\n&#125;\n\nperformRequest(with: &quot;URL&quot;) &#123;  data, error in\n\tif error !&#x3D; nil &#123;\n\t\tprint(error!)\n\t&#125;\n\n\t&#x2F;&#x2F; 데이터 처리 관련 코드\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Result-타입-사용-후\"><a href=\"#Result-타입-사용-후\" class=\"headerlink\" title=\"Result 타입 사용 후\"></a>Result 타입 사용 후</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func performRequest(with urlString: String, completion: @escaping (Result&lt;Data, NetworkError&gt;) -&gt; Void) &#123;\n\tguard let url &#x3D; URL(string: urlString) else &#123; return &#125;\n\tURLSession.shared.dataTask(with: url) &#123; data, response, error in\n\t\tif error !&#x3D; nil &#123;\n\t\t\tprint(error!)\n\t\t\tcompletion(.failure(.someError))\n\t\t\treturn\n\t\t&#125;\n\t\tguard let safeData &#x3D; data else &#123;\n\t\t\tcompletion(.failure(.someError))\n\t\t\treturn\n\t\t&#125;\n\t\tcompletion(.success(safeData))\n\t&#125;\n&#125;\n\nperformRequest(with: &quot;URL&quot;) &#123; result in\n\tswitch result &#123;\n\tcase .success(let data):\n\t\tbreak\n\tcase .failure(let error):\n\t\tbreak\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) ResultResult 타입은 열거형입니다. 내부적으로 success(연관값)과 failure(연관값)을 갖고 있어요. 성공했을 때와 실패했을 때의 정보를 모두 담고 있는 것이죠...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Result\"><span class=\"toc-text\">Result</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Result-%ED%83%80%EC%9E%85%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%97%90%EB%9F%AC%EC%9D%98-%EC%B2%98%EB%A6%AC\"><span class=\"toc-text\">Result 타입을 활용한 에러의 처리</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-Result-%ED%83%80%EC%9E%85\"><span class=\"toc-text\">네트워킹 코드에서 Result 타입</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Result-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9-%EC%A0%84\"><span class=\"toc-text\">Result 타입 사용 전</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Result-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9-%ED%9B%84\"><span class=\"toc-text\">Result 타입 사용 후</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"45)🧰 Swift - Date","uid":"7d828fe1b889c290d917612e7e7aa09f","slug":"Allen/2022-12-06-Allen45","date":"2022-12-05T15:00:00.000Z","updated":"2023-03-31T10:35:42.504Z","comments":true,"path":"api/articles/Allen/2022-12-06-Allen45.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) DateUTC (Coordinated Universal Time)UTC는 국제적인 표준 시간(협전 세계시)입니다. 영국의 그리니치 천문대를 기준으로 하여 전세계적인 시간 기준을 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"43)🧰 Swift - 제네릭 (Generics)","uid":"c2e56e6a64d2c2ad251d398ab5d466c0","slug":"Allen/2022-12-05-Allen43","date":"2022-12-04T15:00:00.000Z","updated":"2023-03-31T10:35:34.166Z","comments":true,"path":"api/articles/Allen/2022-12-05-Allen43.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 제네릭 (Generics)제네릭이 왜 필요한가?var num1 &#x3D; 10 var num2 &#x3D; 20 func swapTwoInts(_ a: inout Int, _ ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}