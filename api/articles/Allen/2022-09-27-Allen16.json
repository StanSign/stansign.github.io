{"title":"16)🧰 Swift - Optional","uid":"678abc472084fa82fc126653c5a66c11","slug":"Allen/2022-09-27-Allen16","date":"2022-09-26T15:00:00.000Z","updated":"2023-03-31T10:32:50.129Z","comments":true,"path":"api/articles/Allen/2022-09-27-Allen16.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"옵셔널-Optional\"><a href=\"#옵셔널-Optional\" class=\"headerlink\" title=\"옵셔널 (Optional)\"></a>옵셔널 (Optional)</h1><p>우선 옵셔널 타입의 필요성을 느껴보기 위해 다음과 같은 상황을 살펴봅시다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var yourName: String\nprint(yourName)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>위의 코드를 실행하면 <code>print(yourName)</code> 부분은 변수 <code>yourName</code>에 값을 저장하지 않았기 때문에 에러가 발생합니다.<br>옵셔널 타입은 이런 상황에 대응하기 위해 소개되었습니다.</p>\n<h2 id=\"옵셔널-타입-Optional-Type\"><a href=\"#옵셔널-타입-Optional-Type\" class=\"headerlink\" title=\"옵셔널 타입 (Optional Type)\"></a>옵셔널 타입 (Optional Type)</h2><ul>\n<li>메모리에 공간을 할당하여 변수를 선언하였지만, 실제로 값은 부여하지 않았을 경우 발생하는 에러에 대응하기 위한 타입</li>\n<li>일반적으로 사용하는 타입 뒤에 <code>?</code>(물음표)를 붙이면 옵셔널 타입이 된다.<ul>\n<li>ex) <code>Int?</code>, <code>String?</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nil\"><a href=\"#nil\" class=\"headerlink\" title=\"nil\"></a><code>nil</code></h3><p>옵셔널을 이해하기 위해서는 <code>nil</code>에 대해서 먼저 알아야합니다.<br><code>nil</code>은 값이 비어있음을 나타내는 키워드입니다. 다른 언어에서는 <code>null</code>로도 표현되곤 합니다.</p>\n<h5 id=\"그런데-잠깐\"><a href=\"#그런데-잠깐\" class=\"headerlink\" title=\"그런데 잠깐!\"></a>그런데 잠깐!</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>편의상으로는 <code>nil</code>과 <code>null</code>을 동일하다고 생각해도 되지만, 사실 둘은 다른 개념입니다. <code>null</code>은 메모리에 해당 값이 <strong>“없음”</strong> 을 표현하는 키워드이지만, <code>nil</code>은 아닙니다! Swift에서 <code>nil</code>은 비어있지 않고, 임시 열거형 타입의 값을 <strong>실제로 가집니다.</strong> </p></blockquote>\n<p><code>nil</code> 값에 접근해야하는 위험이 있을 때, 직접적으로 메모리의 해당 공간에 접근하는 것이 아니라 <strong>임시적인 타입</strong>을 넣어두어 한 번 걸러주면 어떨까요?</p>\n<p>따라서 옵셔널 타입은 엄연히 새로운 타입입니다.<br><code>Int</code> 타입과 <code>Int?</code> 타입은 다른 타입인 것이죠.<br>옵셔널 타입은 원래의 타입 범위에 <code>nil</code> 값을 추가한 범위라고 정의할 수 있습니다.</p>\n<ul>\n<li><code>Int</code><ul>\n<li>…, -4, -3, -2, -1, 0, 1, 2, 3, 4, …</li>\n</ul>\n</li>\n<li><code>Int?</code><ul>\n<li>…, -4, -3, -2, -1, 0, 1, 2, 3, 4, … + <code>nil</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"옵셔널-타입-선언의-기본-규칙\"><a href=\"#옵셔널-타입-선언의-기본-규칙\" class=\"headerlink\" title=\"옵셔널 타입 선언의 기본 규칙\"></a>옵셔널 타입 선언의 기본 규칙</h3><ol>\n<li><code>nil</code>값을 대입할 수 있다.</li>\n<li>값을 넣어주지 않으면 자동으로 <code>nil</code>로 초기화된다.</li>\n</ol>\n<h3 id=\"정식-표기-문법\"><a href=\"#정식-표기-문법\" class=\"headerlink\" title=\"정식 표기 문법\"></a>정식 표기 문법</h3><ul>\n<li>위에서 <code>Int?</code>와 같이 사용한다고 했지만, 이는 편의를 위한 간편 표기법이다.</li>\n<li><code>Optional&lt;Int&gt;</code>가 정식 문법</li>\n</ul>\n<h3 id=\"사용해보기\"><a href=\"#사용해보기\" class=\"headerlink\" title=\"사용해보기\"></a>사용해보기</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var optionalNum: Int? &#x3D; nil\noptionalNum &#x3D; 10\n\nprint(optionalNum) &#x2F;&#x2F; Optional(10)\n&#x2F;&#x2F; Optional(10) !&#x3D; 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>Non-Optional</code> 타입의 값을 <code>Optional</code> 타입의 변수에 대입할 수는 있다.</li>\n<li>대신 타입은 <code>Non-Optional</code>로 변환되어 들어간다.</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var a: Int? &#x3D; 7\nvar c: Int &#x3D; 5\na &#x3D; c\nprint(a) &#x2F;&#x2F; Optional(5)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>옵셔널 타입의 연산은 어떨까요?</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var numA: Int? &#x3D; 3\nvar numB: Int? &#x3D; 4\nnumA + numB &#x2F;&#x2F; Error: Binary operator &#39;+&#39; cannot be applied to two &#39;Int?&#39; operands<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>불가능한 것을 알 수 있다.</li>\n</ul>\n<h3 id=\"옵셔널-타입에-대한-이해\"><a href=\"#옵셔널-타입에-대한-이해\" class=\"headerlink\" title=\"옵셔널 타입에 대한 이해\"></a>옵셔널 타입에 대한 이해</h3><p>옵셔널 타입은 크게 보면 <code>enum</code> 형태의 타입입니다.<br><code>Non-Optional</code> 타입과 <code>nil</code> 타입의 케이스로 나누어 처리하는 방식입니다.</p>\n<h2 id=\"옵셔널-타입의-연산\"><a href=\"#옵셔널-타입의-연산\" class=\"headerlink\" title=\"옵셔널 타입의 연산\"></a>옵셔널 타입의 연산</h2><p>위에서 우선 옵셔널 타입끼리의 연산은 불가능하다는 것을 확인하였습니다.<br>옵셔널 타입의 변수를 사용하기 위해서는 <code>nil</code> 값을 제외한 값을 추출하는 과정이 필요합니다.</p>\n<h3 id=\"옵셔널-값-추출-방법-4가지\"><a href=\"#옵셔널-값-추출-방법-4가지\" class=\"headerlink\" title=\"옵셔널 값 추출 방법 4가지\"></a>옵셔널 값 추출 방법 4가지</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var num: Int?\nvar str: String? &#x3D; &quot;Hello!&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"강제-추출-Forced-Unwrapping\"><a href=\"#강제-추출-Forced-Unwrapping\" class=\"headerlink\" title=\"강제 추출 (Forced Unwrapping)\"></a>강제 추출 (Forced Unwrapping)</h4><ul>\n<li>값이 있다는 것이 확실할 때 사용<ul>\n<li>강제 추출 연산자 <code>!</code> 사용</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">print(str!) &#x2F;&#x2F; &quot;Hello!&quot;\nprint(num!) &#x2F;&#x2F; Error<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"if문을-사용하여-nil-값이-아니라는-것을-확인-후-강제-추출\"><a href=\"#if문을-사용하여-nil-값이-아니라는-것을-확인-후-강제-추출\" class=\"headerlink\" title=\"if문을 사용하여 nil 값이 아니라는 것을 확인 후, 강제 추출\"></a><code>if</code>문을 사용하여 <code>nil</code> 값이 아니라는 것을 확인 후, 강제 추출</h4><ul>\n<li>값이 있는지 확실하지 않다면, 확인한 후 강제 추출을 하면 된다.</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">if str !&#x3D; nil &#123;\n\tprint(str!) &#x2F;&#x2F; &quot;Hello!&quot;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"옵셔널-바인딩-if-let\"><a href=\"#옵셔널-바인딩-if-let\" class=\"headerlink\" title=\"옵셔널 바인딩 (if let)\"></a>옵셔널 바인딩 (<code>if let</code>)</h4><ul>\n<li>바인딩이 된다면, 특정 작업을 수행한다.</li>\n<li>조건을 만족하면, 메모리 영역에서 새로운 공간의 새로운 상수를 만들어 값을 추출해 복사하고 해당 상수를 사용한다.</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">if let s &#x3D; str &#123; &#x2F;&#x2F; s라는 상수에 값이 담긴다면,\n\t&#x2F;&#x2F; 해당 스코프의 코드 실행\n\tprint(s) &#x2F;&#x2F; &quot;Hello!&quot;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>실전에서 굉장히 많이 사용</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func doSomething(name: String?) &#123;\n\tguard let n &#x3D; name else &#123; return &#125;\n\tprint(n)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"잠깐\"><a href=\"#잠깐\" class=\"headerlink\" title=\"잠깐!\"></a>잠깐!</h5><ul>\n<li><code>if let</code>은 알겠어요. 근데 <code>if var</code>는 안되나요?<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>아뇨 됩니다. 다만 보통의 경우 <code>Optional</code> 타입의 값을 추출한 뒤에 해당 값을 바로 사용하기 때문에 거의 사용되지 않는 방식입니다.</p></blockquote>\n</li>\n</ul>\n<h4 id=\"닐-코얼레싱-Nil-Coalescing-연산자-사용\"><a href=\"#닐-코얼레싱-Nil-Coalescing-연산자-사용\" class=\"headerlink\" title=\"닐 코얼레싱 (Nil-Coalescing) 연산자 사용\"></a>닐 코얼레싱 (Nil-Coalescing) 연산자 사용</h4><ul>\n<li>coalesce: 더 큰 덩어리로 합치다.</li>\n<li>옵셔널 타입에 대해 default 값을 제시할 수 있을 때 사용</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var serverName: String? &#x3D; &quot;Jake&quot;\nvar userName &#x3D; serverName ?? &quot;Auth Fail&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var str: String?\nprint(&quot;안녕하세요&quot; + (str ?? &quot;Hi&quot;)) &#x2F;&#x2F; &quot;안녕하세요 Hi&quot;\nstr &#x3D; &quot;Hello&quot;\nprint(&quot;안녕하세요&quot; + (str ?? &quot;Hi&quot;)) &#x2F;&#x2F; &quot;안녕하세요 Hello&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"옵셔널-체이닝-Optional-Chaining\"><a href=\"#옵셔널-체이닝-Optional-Chaining\" class=\"headerlink\" title=\"옵셔널 체이닝 (Optional Chaining)\"></a>옵셔널 체이닝 (Optional Chaining)</h3><ul>\n<li>옵셔널 타입에 접근연산자를 사용할 때 사용하는 문법</li>\n<li>접근연산자를 사용할 때 <code>?</code>를 붙여서 앞의 타입이 <code>nil</code> 값을 가질 수 있음을 표기</li>\n<li>메모리 관점에서 힙 영역을 통해 .</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Dog &#123;\n\tvar name: String?\n\tvar weight: Int\n\n\tfunc sit() &#123;\n\t\tprint(&quot;앉았습니다.&quot;)\n\t&#125;\n&#125;\n\nvar choco: Dog? &#x3D; Dog()\nchoco?.name &#x3D; &quot;Choco&quot;\nprint(choco?.name) &#x2F;&#x2F; Optional(&quot;Choco&quot;)\nchoco?.sit() &#x2F;&#x2F; &quot;앉았습니다.&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"옵셔널-체이닝의-특징\"><a href=\"#옵셔널-체이닝의-특징\" class=\"headerlink\" title=\"옵셔널 체이닝의 특징\"></a>옵셔널 체이닝의 특징</h4><ul>\n<li>옵셔널 체이닝의 결과는 항상 옵셔널 타입이다.</li>\n<li>옵셔널 체이닝의 값 중에서 하나라도 <code>nil</code>을 <code>return</code>한다면, 이어지는 표현식들은 평가하지 않고 무조건 <code>nil</code>을 <code>return</code>한다.</li>\n</ul>\n<h2 id=\"IUO-Implicitly-Unwrapped-Optionals-타입\"><a href=\"#IUO-Implicitly-Unwrapped-Optionals-타입\" class=\"headerlink\" title=\"IUO (Implicitly Unwrapped Optionals) 타입\"></a>IUO (Implicitly Unwrapped Optionals) 타입</h2><ul>\n<li>타입 선언시에 <code>!</code>가 붙어있는 타입<ul>\n<li><code>Optional</code>을 벗겨낼 준비가 되어있는 타입</li>\n<li><code>Non-Optional</code> 타입 변수에 담을 때, 자동으로 <code>Optional</code>을 벗겨내며 담김</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var number: Int! &#x3D; 7\nprint(number) &#x2F;&#x2F; Optional(7)\n&#x2F;&#x2F; 실제로 사용시에 벗겨지는 건 아니다...!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var number2: Int &#x3D; number &#x2F;&#x2F; 다른 변수에 담길 때 벗겨짐\nprint(number2) &#x2F;&#x2F; 7\n\nvar number3 &#x3D; number &#x2F;&#x2F; 형식 추론을 사용할 때는 자동으로 벗겨지지 않음\nprint(number3) &#x2F;&#x2F; Optional(7)\n\nvar number4 &#x3D; number! &#x2F;&#x2F; 강제로 벗기는 건 가능\nprint(number4) &#x2F;&#x2F; 7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var name: String! &#x3D; &quot;Jake&quot;\nname.count &#x2F;&#x2F; 값이 nil이 아닌 경우, 옵셔널 체이닝을 생략할 수 있지만, 값이 nil일 경우에는 Error가 발생한다.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"IUO…-왜-알아야할까\"><a href=\"#IUO…-왜-알아야할까\" class=\"headerlink\" title=\"IUO… 왜 알아야할까..?\"></a>IUO… 왜 알아야할까..?</h3><ul>\n<li><p>Storyboard에서 <code>IBOutlet</code>을 코드에 연결할 때, 다음과 같이 자동으로 선언된다.</p>\n<ul>\n<li><code>var label: UILabel!</code></li>\n</ul>\n</li>\n<li><p>API에서 IUO 타입으로 <code>return</code>이 이루어질 때가 있다.</p>\n</li>\n<li><p>어렵게 생각하지 말자!</p>\n<ul>\n<li>사용은 일반적인 옵셔널(<code>?</code>)과 동일하다!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"사용-예시\"><a href=\"#사용-예시\" class=\"headerlink\" title=\"사용 예시\"></a>사용 예시</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class MyViewController: UIViewController &#123;\n\t@IBOutlet weak var imageView: UIImageView!\n\t@IBOutlet weak var mainLabel: UILabel!\n\n\toverride func viewDidLoad() &#123;\n\t\tsuper.viewDidLoad()\n\t&#125;\n\n\timageView.image &#x3D; UIImage(systemName: &quot;pencil&quot;)\n\tmainLabel.font &#x3D; UIFont.boldSystemFont(ofSize: 18.0)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위의 예시에서 연결된 <code>IBOutlet</code>들은 IUO 타입이기 때문에 <code>imageView.image</code>와 같이 사용할 때 옵셔널 체이닝이 필요 없었습니다.<br>만약 IUO 타입이 아니라면 코드는 다음과 같이 작성되어야 합니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">imageView?.image &#x3D; UIImage(systemName: &quot;pencil&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 옵셔널 (Optional)우선 옵셔널 타입의 필요성을 느껴보기 위해 다음과 같은 상황을 살펴봅시다. var yourName: String print(yourName) 위의 코드를...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-Optional\"><span class=\"toc-text\">옵셔널 (Optional)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%83%80%EC%9E%85-Optional-Type\"><span class=\"toc-text\">옵셔널 타입 (Optional Type)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nil\"><span class=\"toc-text\">nil</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EA%B7%B8%EB%9F%B0%EB%8D%B0-%EC%9E%A0%EA%B9%90\"><span class=\"toc-text\">그런데 잠깐!</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99\"><span class=\"toc-text\">옵셔널 타입 선언의 기본 규칙</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A0%95%EC%8B%9D-%ED%91%9C%EA%B8%B0-%EB%AC%B8%EB%B2%95\"><span class=\"toc-text\">정식 표기 문법</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\"><span class=\"toc-text\">사용해보기</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%83%80%EC%9E%85%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4\"><span class=\"toc-text\">옵셔널 타입에 대한 이해</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%83%80%EC%9E%85%EC%9D%98-%EC%97%B0%EC%82%B0\"><span class=\"toc-text\">옵셔널 타입의 연산</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EA%B0%92-%EC%B6%94%EC%B6%9C-%EB%B0%A9%EB%B2%95-4%EA%B0%80%EC%A7%80\"><span class=\"toc-text\">옵셔널 값 추출 방법 4가지</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EA%B0%95%EC%A0%9C-%EC%B6%94%EC%B6%9C-Forced-Unwrapping\"><span class=\"toc-text\">강제 추출 (Forced Unwrapping)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if%EB%AC%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-nil-%EA%B0%92%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC%EB%8A%94-%EA%B2%83%EC%9D%84-%ED%99%95%EC%9D%B8-%ED%9B%84-%EA%B0%95%EC%A0%9C-%EC%B6%94%EC%B6%9C\"><span class=\"toc-text\">if문을 사용하여 nil 값이 아니라는 것을 확인 후, 강제 추출</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EB%B0%94%EC%9D%B8%EB%94%A9-if-let\"><span class=\"toc-text\">옵셔널 바인딩 (if let)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%9E%A0%EA%B9%90\"><span class=\"toc-text\">잠깐!</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EB%8B%90-%EC%BD%94%EC%96%BC%EB%A0%88%EC%8B%B1-Nil-Coalescing-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9\"><span class=\"toc-text\">닐 코얼레싱 (Nil-Coalescing) 연산자 사용</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D-Optional-Chaining\"><span class=\"toc-text\">옵셔널 체이닝 (Optional Chaining)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%98-%ED%8A%B9%EC%A7%95\"><span class=\"toc-text\">옵셔널 체이닝의 특징</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IUO-Implicitly-Unwrapped-Optionals-%ED%83%80%EC%9E%85\"><span class=\"toc-text\">IUO (Implicitly Unwrapped Optionals) 타입</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IUO%E2%80%A6-%EC%99%9C-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0%EA%B9%8C\"><span class=\"toc-text\">IUO… 왜 알아야할까..?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\"><span class=\"toc-text\">사용 예시</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"17)🧰 Swift - Collection","uid":"bc8ee1187329b643d5f24f6ff5a92ac2","slug":"Allen/2022-09-27-Allen17","date":"2022-09-26T15:00:00.000Z","updated":"2023-03-31T10:32:54.557Z","comments":true,"path":"api/articles/Allen/2022-09-27-Allen17.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 컬렉션 (Collection)스위프트의 컬렉션 컬렉션: 여러개의 데이터를 한꺼번에 다루는 바구니 타입 데이터를 효율적으로 관리하기 위한 자료형(타입)**** 배열(Array), ...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"8)🧰 Swift - 삼항연산자와 범위연산자","uid":"b526b3fe16c3f21f0c4b3f9796c6f8f3","slug":"Allen/2022-09-26-Allen08","date":"2022-09-25T15:00:00.000Z","updated":"2023-03-31T10:32:08.028Z","comments":true,"path":"api/articles/Allen/2022-09-26-Allen08.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 삼항연산자와 범위연산자삼항연산자 (Ternary Conditional Operator) if문보다 제한적인 조건문 하지만 용도는 확실! [조건] ? [참일때의 결과] : [거짓일...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}