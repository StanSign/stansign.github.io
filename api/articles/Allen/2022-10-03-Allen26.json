{"title":"26)🧰 Swift - 생성자(Init)","uid":"b634a4054ae5c0257e715086c4d854c8","slug":"Allen/2022-10-03-Allen26","date":"2022-10-02T15:00:00.000Z","updated":"2023-03-31T10:33:45.074Z","comments":true,"path":"api/articles/Allen/2022-10-03-Allen26.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"초기화와-생성자\"><a href=\"#초기화와-생성자\" class=\"headerlink\" title=\"초기화와 생성자\"></a>초기화와 생성자</h1><h2 id=\"초기화-Initialization\"><a href=\"#초기화-Initialization\" class=\"headerlink\" title=\"초기화 (Initialization)\"></a>초기화 (Initialization)</h2><ul>\n<li>클래스, 구조체, 열거형의 인스턴스를 생성하는 과정</li>\n<li>각 저장 속성에 대한 초기값 설정</li>\n<li>인스턴스를 사용 가능한 상태로 만드는 과정</li>\n</ul>\n<h2 id=\"생성자-Initializer\"><a href=\"#생성자-Initializer\" class=\"headerlink\" title=\"생성자 (Initializer)\"></a>생성자 (Initializer)</h2><ul>\n<li>인스턴스의 모든 저장 속성이 초기값을 갖도록 하는 메서드</li>\n<li>컴파일러는 기본 생성자(<code>init()</code>)을 자동으로 생성하지만, 개발자가 직접적으로 생성자를 구현하면 자동으로 생성되지 않는다.</li>\n<li>소멸자<ul>\n<li>인스턴스가 해제되게 전에 수행하는 작업들을 정의한 메서드</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Color &#123;\n\tlet red: Double\n\tlet green: Double\n\tlet blue: Double\n\n\tinit() &#123; &#x2F;&#x2F; 기본 생성자, 저장 속성의 기본값을 설정하면 자동 구현\n\t\tred &#x3D; 0.0\n\t\tgreen &#x3D; 0.0\n\t\tblue &#x3D; 0.0\n\t&#125;\n\t&#x2F;&#x2F; 저장 속성 기본값 예시) let red: Double &#x3D; 1.0\n\n\t&#x2F;&#x2F; 생성자 오버로딩 가능\n\tinit(white: Double) &#123;\n\t\tred &#x3D; white\n\t\tgreen &#x3D; white\n\t\tblue &#x3D; white\n\t&#125;\n\n\tinit(red: Double, green: Double, blue: Double) &#123;\n\t\tself.red &#x3D; red\n\t\tself.green &#x3D; green\n\t\tself.blue &#x3D; blue\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"초기화의-경우의-수\"><a href=\"#초기화의-경우의-수\" class=\"headerlink\" title=\"초기화의 경우의 수\"></a>초기화의 경우의 수</h2><ol>\n<li>저장 속성의 선언과 동시에 값을 저장하여 초기화</li>\n<li>저장 속성을 옵셔널로 선언하여 <code>nil</code>로 초기화</li>\n<li>생성자에서 값을 초기화</li>\n</ol>\n<h2 id=\"멤버와이즈-생성자-Memberwise-Initializer\"><a href=\"#멤버와이즈-생성자-Memberwise-Initializer\" class=\"headerlink\" title=\"멤버와이즈 생성자 (Memberwise Initializer)\"></a>멤버와이즈 생성자 (Memberwise Initializer)</h2><ul>\n<li>구조체의 특별한 생성자</li>\n<li>저장 속성들이 기본값을 갖고 있더라도 자동으로 제공</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Color &#123; &#x2F;&#x2F; No Error\n\tvar red: Double &#x3D; 1.0\n\tvar green: Double &#x3D; 1.0\n\tvar blue: Double\n&#125;\n\nvar b &#x3D; Color(blue: Double)\nvar c &#x3D; Color(red: Double, green: Double, blue: Double)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"구조체-x2F-클래스의-생성자\"><a href=\"#구조체-x2F-클래스의-생성자\" class=\"headerlink\" title=\"구조체&#x2F;클래스의 생성자\"></a>구조체&#x2F;클래스의 생성자</h2><h3 id=\"구조체-지정생성자\"><a href=\"#구조체-지정생성자\" class=\"headerlink\" title=\"구조체 지정생성자\"></a>구조체 지정생성자</h3><ul>\n<li>코드의 중복 없이 다른 생성자를 호출하여 초기화 가능</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Color &#123;\n\tlet red, green, blue: Double\n\n\tinit() &#123;\n\t\t&#x2F;&#x2F; 맨 아래의 init 호출\n\t\tself.init(red: 0.0, green: 0.0, blue: 0.0)\n\t&#125;\n\n\tinit(white: Double) &#123;\n\t\tself.init(red: white, green: white, blue: white)\n\t&#125;\n\n\tinit(red: Double, green: Double, blue: Double) &#123;\n\t\tself.red &#x3D; red\n\t\tself.green &#x3D; green\n\t\tself.blue &#x3D; blue\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"클래스-지정-x2F-편의-생성자\"><a href=\"#클래스-지정-x2F-편의-생성자\" class=\"headerlink\" title=\"클래스 지정&#x2F;편의 생성자\"></a>클래스 지정&#x2F;편의 생성자</h3><ul>\n<li><strong>지정생성자 (Designated Initializer)</strong><ul>\n<li>일반적인 생성자 (<code>init()</code>)</li>\n</ul>\n</li>\n<li><strong>편의생성자 (Convenience Initializer)</strong><ul>\n<li><strong>다른 지정&#x2F;편의생성자를 호출</strong>하는 생성자 (<code>convenience init()</code>)</li>\n<li><strong>클래스에만</strong> 있는 생성자 (상속과 관련됨)</li>\n<li>클래스는 <strong>상속</strong>을 지원하며 변수가 여러개인 경우가 많다.<ul>\n<li>여러 지정생성자의 사용은 개발자의 실수를 유발한다.</li>\n<li><strong>초기화 과정을 간편</strong>하게 하는 생성자</li>\n<li>상속 관계에서 개발자가 <strong>실수할 가능성을 배제</strong>하기 위한 생성자</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Color &#123;\n\tlet red, green, blue: Double\n\n\tconvenience init() &#123;\n\t\tself.init(red: 0.0, green: 0.0, blue: 0.0)\n\t&#125;\n\n\tconvenience init(white: Double) &#123;\n\t\tself.init(red: white, green: white, blue: white)\n\t&#125;\n\n\tinit(red: Double, green: Double, blue: Double) &#123;\n\t\tself.red &#x3D; red\n\t\tself.green &#x3D; green\n\t\tself.blue &#x3D; blue\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"생성자-위임-규칙\"><a href=\"#생성자-위임-규칙\" class=\"headerlink\" title=\"생성자 위임 규칙\"></a>생성자 위임 규칙</h4><ol>\n<li><strong>델리게이트 업 (Delegate Up)</strong><ul>\n<li>서브 클래스의 지정생성자는 <strong>슈퍼 클래스의 지정생성자를 반드시 호출</strong>해야 한다.</li>\n</ul>\n</li>\n<li><strong>델리게이트 어크로스 (Delegate Across)</strong><ul>\n<li>편의생성자는 동일한 클래스의 다른 <strong>편의생성자 또는 지정생성자를 호출</strong>해야하고, <strong>궁극적으로는 지정생성자를 호출</strong>해야 한다.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"상속-관계에서-생성자-호출과정의-메모리-구조\"><a href=\"#상속-관계에서-생성자-호출과정의-메모리-구조\" class=\"headerlink\" title=\"상속 관계에서 생성자 호출과정의 메모리 구조\"></a>상속 관계에서 생성자 호출과정의 메모리 구조</h4><ol>\n<li>객체의 초기화 단계에서 <code>convenience init()</code> 편의생성자가 호출된다.</li>\n<li><code>convenience init()</code> 편의생성자에서 동일한 클래스의 <code>init()</code> 지정생성자을 호출한다.</li>\n<li><code>init()</code> 지정생성자가 슈퍼 클래스의 <code>super.init()</code> 지정생성자를 호출한다.</li>\n<li>생성자의 호출 과정에서 속성 값들은 힙 영역에 빈 공간을 찾아 저장된다.<ul>\n<li>해당 과정에 의해 구조체보다 클래스의 초기화에 비교적 오랜 시간이 걸린다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"클래스-상속-예시\"><a href=\"#클래스-상속-예시\" class=\"headerlink\" title=\"클래스 상속 예시\"></a>클래스 상속 예시</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Aclass &#123;\n\tvar x: Int\n\tvar y: Int\n\n\tinit(x: Int, y: Int) &#123;\n\t\tself.x &#x3D; x\n\t\tself.y &#x3D; y\n\t&#125;\n\n\tconvenience init() &#123;\n\t\tself.init(x: 0, y: 0)\n\t&#125;\n&#125;\n\nclass Bclass: Aclass &#123;\n\tvar z: Int\n\n\t&#x2F;&#x2F; 상속 받을 때 있어야하는 지정생성자\n\tinit(x: Int, y: Int, z: Int) &#123;\n\t\tself.z &#x3D; z &#x2F;&#x2F; 새로운 저장 속성값 초기화\n\t\t&#x2F;&#x2F; self.y &#x3D; y &#x2F;&#x2F; Error (생성자 호출 전)\n\t\tsuper.init(x: x, y: y) &#x2F;&#x2F; 상위의 지정생성자 호출\n\t&#125;\n\n\tconvenience init(z: Int) &#123;\n\t\tself.init(x: 0, y: 0, z: z)\n\t&#125;\n\n\tconvenience init() &#123;\n\t\tself.init(z: 0)\n\t&#125;\n\n\tfunc doSomething() &#123;\n\t\tprint(&quot;Do Something&quot;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"상속과-재정의-규칙\"><a href=\"#상속과-재정의-규칙\" class=\"headerlink\" title=\"상속과 재정의 규칙\"></a>상속과 재정의 규칙</h2><h3 id=\"생성자\"><a href=\"#생성자\" class=\"headerlink\" title=\"생성자\"></a>생성자</h3><ul>\n<li>생성자는 기본적으로 상속되지 않고 재정의하는 것이 원칙<ul>\n<li><strong>재정의</strong>: 동일한 이름의 생성자를 구현하는 것</li>\n<li>하위클래스에 최적화가 되어있지 않기 때문</li>\n</ul>\n</li>\n<li>상위의 지정생성자와 현재 단계의 저장 속성을 고려해서 구현</li>\n</ul>\n<h4 id=\"상위-생성자에-대한-고려\"><a href=\"#상위-생성자에-대한-고려\" class=\"headerlink\" title=\"상위 생성자에 대한 고려\"></a>상위 생성자에 대한 고려</h4><ul>\n<li>상위에 어떤 생성자가 존재하는가?</li>\n<li>상위에 <strong>지정생성자</strong>가 있다면<ol>\n<li>하위 클래스에서 지정생성자로 구현 (재정의)</li>\n<li>하위 클래스에서 편의생성자로 구현 (재정의)</li>\n<li>구현하지 않아도 됨</li>\n</ol>\n</li>\n<li>상위에 <strong>편의생성자</strong>가 있다면<ol>\n<li>구현하지 않아도 됨 (호출 불가가 원칙)</li>\n<li>같은 이름의 생성자를 구현했다면 단순하게 새로 정의한 것</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"현재-단계의-생성자-구현\"><a href=\"#현재-단계의-생성자-구현\" class=\"headerlink\" title=\"현재 단계의 생성자 구현\"></a>현재 단계의 생성자 구현</h4><ul>\n<li>지정생성자 내에서<ol>\n<li>현재 단계의 모든 저장 속성을 초기화해야함</li>\n<li>슈퍼 클래스의 지정생성자를 호출해야함</li>\n</ol>\n</li>\n<li>편의생성자 내에서<ol>\n<li>현재 클래스의 지정생성자를 호출해야함 (편의생성자를 거치는 것은 상관X)</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"생성자-상속의-예외사항\"><a href=\"#생성자-상속의-예외사항\" class=\"headerlink\" title=\"생성자 상속의 예외사항\"></a>생성자 상속의 예외사항</h4><h5 id=\"지정생성자-자동상속\"><a href=\"#지정생성자-자동상속\" class=\"headerlink\" title=\"지정생성자 자동상속\"></a>지정생성자 자동상속</h5><ul>\n<li>새 저장 속성이 아예 없거나, 기본값이 설정되어 있다면 지정생성자의 자동 상속<ul>\n<li>초기화  과정에서 실패 가능성이 없기 때문</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"편의생성자-자동상속\"><a href=\"#편의생성자-자동상속\" class=\"headerlink\" title=\"편의생성자 자동상속\"></a>편의생성자 자동상속</h5><ul>\n<li>지정생성자를 자동상속하는 경우<ul>\n<li>바로 위의 경우 (지정생성자를 자동상속하는 경우, 편의생성자까지 함께 자동상속)</li>\n</ul>\n</li>\n<li>상위 지정생성자를 모두 재정의하여 구현<ul>\n<li>초기화 과정에서 실패 가능성이 없기 때문</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Food &#123;\n\tvar name: String\n\n\tinit(name: String) &#123; &#x2F;&#x2F; 지정생성자\n\t\tself.name &#x3D; name\n\t&#125;\n\n\tconvenience init() &#123; &#x2F;&#x2F; 편의생성자\n\t\tself.init(name: &quot;[Unnamed]&quot;)\n\t&#125;\n&#125;\n\nlet namedMeat &#x3D; Food(name: &quot;Bacon&quot;)\nlet mysteryMeat &#x3D; Food()\n\nclass RecipeIngredient: Food &#123;\n\tvar quantity: Int\n\n\tinit(name: String, quantity: Int) &#123;\n\t\tself.quantity &#x3D; quantity\n\t\tsuper.init(name: name)\n\t&#125;\n\n\t&#x2F;&#x2F; 상위 지정생성자를 편의생성자로 재정의\n\toverride convenience init(name: String) &#123;\n\t\tself.init(name: name, quantity: 1)\n\t&#125;\n\n\t&#x2F;&#x2F; convenience init() &#123; &#125; &#x2F;&#x2F; 자동 상속\n\n\t&#x2F;&#x2F; convenience init() -&gt; override convenience init(name: String) -&gt; init(name: String, quantity: Int)\n&#125;\n\nclass ShoppingListItem: RecipeIngredient &#123;\n\tvar purchased &#x3D; false &#x2F;&#x2F; 기본값\n\n\tvar subtitle: String &#123;\n\t\tvar output &#x3D; &quot;\\(quantity) x \\(name)&quot;\n\t\toutput +&#x3D; purchased ? &quot;✔&quot; : &quot;✖️&quot;\n\t\treturn output\n\t&#125;\n\n\t&#x2F;&#x2F; 지정생성자 모두 자동 상속\n\t&#x2F;&#x2F; init(name: String, quantity: Int) &#123; &#125;\n\n\t&#x2F;&#x2F; 편의생성자도 모두 자동 상속\n\t&#x2F;&#x2F; convenience init(name: String) &#123; &#125;\n\t&#x2F;&#x2F; convenience init() &#123; &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"예시1\"><a href=\"#예시1\" class=\"headerlink\" title=\"예시1\"></a>예시1</h5><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Aclass &#123;\n\tvar x &#x3D; 0\n&#125;\n\nclass Bclass: Aclass &#123;\n\tvar y: Int\n\n\t&#x2F;&#x2F; 지정생성자로 재정의\n\toverride init()\n\t\tself.y &#x3D; 0\n\t\tsuper.init() &#x2F;&#x2F; super.init\n\t&#125;\n\n\t&#x2F;&#x2F; 서브클래스에서 편의생성자로 구현\n\toverride convenience init() &#123;\n\t\tself.init(y: 0) &#x2F;&#x2F; self.init\n\t&#125;\n\n\t&#x2F;&#x2F; 재정의하지 않을 수 있음\n\n\t&#x2F;&#x2F; 현재 단계의 생성자 구현\n\tinit(y: Int) &#123;\n\t\tself.y &#x3D; y\n\t\tsuper.init()\n\t&#125;\n&#125;\n\nclass Cclass: Bclass &#123;\n\tvar z: Int\n\n\toverride init() &#123;\n\t\tself.z &#x3D; 0\n\t\tsuper.init()\n\t&#125;\n\n\toverride init(y: Int) &#123;\n\t\tself.z &#x3D; 0\n\t\tsuper.init(y: y)\n\t&#125;\n\n\tinit(z: Int) &#123;\n\t\tself.z &#x3D; z\n\t\tsuper.init()\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"예시2\"><a href=\"#예시2\" class=\"headerlink\" title=\"예시2\"></a>예시2</h5><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Vehicle &#123;\n\tvar numberOfWheels &#x3D; 0\n\n\tvar subtitle: String &#123;\n\t\treturn &quot;\\(numberOfWheels) wheel(s)&quot;\n\t&#125;\n\n\t&#x2F;&#x2F; init() &#123; &#125;\n&#125;\n\nclass Bicycle: Vehicle &#123;\n\toverride init() &#123;\n\t\tsuper.init()\n\t\tnumberOfWheels &#x3D; 2\n\t&#125;\n&#125;\n\nclass Hoverboard: Vehicle &#123;\n\tvar color: String\n\n\toverride var subtitle: String &#123;\n\t\treturn &quot;\\(super.subtitle) in a beautiful \\(color)&quot;\n\t&#125;\n\n\t&#x2F;&#x2F; 저장속성이 있기 때문에 지정생성자 필수\n\tinit(color: String) &#123;\n\t\tself.color &#x3D; color\n\t\tsuper.init()\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"필수생성자\"><a href=\"#필수생성자\" class=\"headerlink\" title=\"필수생성자\"></a>필수생성자</h2><ul>\n<li><code>required</code></li>\n<li>하위생성자는 반드시 필수생성자를 구현해야 한다.</li>\n<li>하위 클래스에서 필수생성자를 구현할 때는 <code>override</code> 키워드 대신 <code>required</code> 키워드로 대체</li>\n<li>필수생성자 자동 상속 조건<ul>\n<li>다른 지정생성자를 구현하지 않으면 자동 상속</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Aclass &#123;\n\tvar x: Int\n\n\trequired init(x: Int) &#123;\n\t\tself.x &#x3D; x\n\t&#125;\n&#125;\n\nclass Bclass: Aclass &#123;\n\t&#x2F;&#x2F; 자동 상속\n\t&#x2F;&#x2F; required init(x: Int) &#123;\n\t&#x2F;&#x2F; \tself.x &#x3D; x\n\t&#x2F;&#x2F; &#125;\n&#125;\n\nclass Cclass: Aclass &#123;\n\t&#x2F;&#x2F; 생성자를 구현하려면\n\tinit() &#123;\n\t\tsuper.init(x: 8)\n\t&#125;\n\n\t&#x2F;&#x2F; 필수생성자를 구현해야한다.\n\trequired init(x: Int) &#123;\n\t\tsuper.init(x: x)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"사용-예시\"><a href=\"#사용-예시\" class=\"headerlink\" title=\"사용 예시\"></a>사용 예시</h3><ul>\n<li>필수생성자는 보통 애플이 만들어놓은 프레임워크를 개발자가 사용할 때 이용된다.</li>\n</ul>\n<h4 id=\"UIView\"><a href=\"#UIView\" class=\"headerlink\" title=\"UIView\"></a>UIView</h4><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class AView: UIView &#123;\n\trequired init?(coder: NSCoder) &#123; &#x2F;&#x2F; 구현을 안해도 자동 상속\n\t\tfatalError(&quot;init(coder:) has not been implemented&quot;)\n\t&#125;\n&#125;\n\nclass BView: UIView &#123;\n\toverride init(frame: CGRect) &#123;\n\t\tsuper.init(frame: frame)\n\t&#125;\n\n\trequired init?(coder: NSCoder) &#123;\n\t\tfatalError(&quot;init(coder:) has not been implemented&quot;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"실패가능-생성자-Failable\"><a href=\"#실패가능-생성자-Failable\" class=\"headerlink\" title=\"실패가능 생성자 (Failable)\"></a>실패가능 생성자 (Failable)</h2><ul>\n<li>인스턴스 생성에 실패할 수도 있는 가능성을 가진 생성자<ul>\n<li>실패가 나서 앱이 먹통되는 것보단 예외처리를 하는 편이..</li>\n</ul>\n</li>\n<li>동일한 파라미터를 취급하는 생성자는 실패가능 생성자 단 하나여야 한다!</li>\n<li><code>init?()</code></li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Animal &#123;\n\tlet species: String\n\n\tinit?(species: String) &#123; &#x2F;&#x2F; &#x3D;&#x3D; -&gt; Animal?\n\t\tif species.isEmpty &#123; &#x2F;&#x2F; 문자열이 비어있는 경우 &#x3D;&#x3D; &quot;&quot;\n\t\t\treturn nil\n\t\t&#125;\n\t\tself.species &#x3D; species\n\t&#125;\n&#125;\n\nlet a &#x3D; Animal(species: &quot;Giraffe&quot;)\nlet b &#x3D; Animal(species: &quot;&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"열거형의-실패가능-생성자-활용\"><a href=\"#열거형의-실패가능-생성자-활용\" class=\"headerlink\" title=\"열거형의 실패가능 생성자 활용\"></a>열거형의 실패가능 생성자 활용</h3><ul>\n<li>원시값을 통해서 구현하는 것과 유사</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum TemperatureUnit &#123;\n\tcase kelvin\n\tcase celsius\n\tcase fahrenheit\n\n\tinit?(symbol: Character) &#123;\n\t\tswitch symbol &#123;\n\t\tcase &quot;K&quot;:\n\t\t\tself &#x3D; TemperatureUnit.kelvin\n\t\tcase &quot;C&quot;:\n\t\t\tself &#x3D; TemperatureUnit.celsius\n\t\tcase &quot;F&quot;:\n\t\t\tself &#x3D; TemperatureUnit.fahrenheit\n\t\tdefault:\n\t\t\treturn nil\n\t\t&#125;\n\t&#125;\n&#125;\n\nlet c: TemperatureUnit &#x3D; TemperatureUnit.celsius\nlet f: TemperatureUnit? &#x3D; TemperatureUnit(symbol: &quot;F&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"초기화-실패의-전달-호출관계\"><a href=\"#초기화-실패의-전달-호출관계\" class=\"headerlink\" title=\"초기화 실패의 전달 (호출관계)\"></a>초기화 실패의 전달 (호출관계)</h3><ul>\n<li>실패가능 생성자는 다른 실패가능 생성자를 호출할 수 없다.</li>\n</ul>\n<h4 id=\"동일단계-Delegate-Across\"><a href=\"#동일단계-Delegate-Across\" class=\"headerlink\" title=\"동일단계 (Delegate Across)\"></a>동일단계 (Delegate Across)</h4><ul>\n<li>실패가능 생성자는 실패불가능 생성자를 호출할 수 있다.</li>\n<li>반대로 실패불가능 생성자는 실패가능 생성자를 호출할 수 없다.</li>\n<li><strong>실패가능 생성자는</strong> <code>nil</code>을 포함하기 때문에 <strong>실패불가능 생성자보다 범위가 크기</strong> 때문!</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Item &#123;\n\tvar name &#x3D; &quot;&quot;\n\n\t&#x2F;&#x2F; 1. 실패가능 생성자가 실패불가능 생성자 호출\n\tinit() &#123;\n\t&#125;\n\n\tinit?(name: String) &#123;\n\t\tself.init()\n\t&#125;\n\n\t&#x2F;&#x2F; 2. 실패불가능 생성자가 실패가능 생성자 호출 \n\t&#x2F;&#x2F; Error: Non-failable initializer cannot delegate to failable initializer &#39;init(name:)&#39; written with &#39;init?&#39;\n\tinit() &#123;\n\t\tself.init(name: &quot;하이&quot;)\n\t&#125;\n\n\tinit?(name: String) &#123;\n\t\tself.name &#x3D; name\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Product &#123;\n\tlet name: String\n\tinit?(name: String) &#123;\n\t\tif name.isEmpty &#123; return nil &#125;\n\t\tself.name &#x3D; name\n\t&#125;\n&#125;\n\nclass CartItem: Product &#123;\n\tlet quantity: Int\n\tinit?(name: String, quantity: Int) &#123;\n\t\tif quantity &lt; 1 &#123; return nil &#125;\n\t\tself.quantity &#x3D; quantity\n\t\tsuper.init(name: name)\n\t&#125;\n&#125;\n\nif let twoSocks &#x3D; CartItem(name: &quot;sock&quot;, quantity: 2) &#123;\n\tprint(&quot;아이템: \\(twoSocks.name), 수량: \\(twoSocks.quantity)&quot;)\n&#125;\nif let zeroShirts &#x3D; CartItem(name: &quot;shirt&quot;, quantity: 0) &#123;\n\tprint(&quot;아이템: \\(zeroShirt.name), 수량: \\(zeroShirt.quantity)&quot;)\n&#125; else &#123;\n\tprint(&quot;zero shirts를 초기화 불가 (개수가 없음)&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"상속관계-Delegate-Up\"><a href=\"#상속관계-Delegate-Up\" class=\"headerlink\" title=\"상속관계 (Delegate Up)\"></a>상속관계 (Delegate Up)</h4><ul>\n<li>실패불가능 생성자에서 상위 클래스의 실패가능 생성자를 호출할 수 없다.</li>\n<li>실패가능 생성자에서 상위 클래스의 실패불가능 생성자를 호출하는 것은 가능하다.</li>\n</ul>\n<h3 id=\"상속관계에서-재정의하기\"><a href=\"#상속관계에서-재정의하기\" class=\"headerlink\" title=\"상속관계에서 재정의하기\"></a>상속관계에서 재정의하기</h3><ul>\n<li>상위에서 실패가능 생성자를 하위에서 실패불가능 생성자로 재정의하는 것은 가능하다.<ul>\n<li>강제 언래핑 또한 사용 가능하다.</li>\n</ul>\n</li>\n<li>상위에서 실패불가능 생성자를 하위에서 실패가능 생성자로 재정의하는 것은 불가능하다.</li>\n<li>마찬가지로 <strong>실패가능 생성자가 실패불가능 생성자보다 넓은 범위</strong>이기 때문!</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Document &#123;\n\tvar name: String?\n\n\tinit() &#123; &#125;\n\n\tinit?(name: String) &#123;\n\t\tif name.isEmpty &#123; return nil &#125;\n\t\tself.name &#x3D; name\n\t&#125;\n&#125;\n\nclass AutomaticallyNamedDocument: Document &#123;\n\toverride init() &#123;\n\t\tsuper.init()\n\t\tself.name &#x3D; &quot;[Untitled]&quot;\n\t&#125;\n\n\t&#x2F;&#x2F; 실패가능 -&gt; 실패불가능 재정의\n\toverride init(name: String) &#123;\n\t\tsuper.init() &#x2F;&#x2F; init?(name:)이 아닌 init()을 호출\n\t\tif name.isEmpty &#123;\n\t\t\tself.name &#x3D; &quot;[Untitled]&quot;\n\t\t&#125; else &#123;\n\t\t\tself.name &#x3D; name\n\t\t&#125;\n\t&#125;\n&#125;\n\nclass UntitledDocument: Document &#123;\n\toverride init() &#123; &#x2F;&#x2F; 구조적으로 실패 가능하지 않으므로!\n\t\tsuper.init(name: &quot;[Untitled]&quot;)! &#x2F;&#x2F; 강제 언래핑 (!)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 초기화와 생성자초기화 (Initialization) 클래스, 구조체, 열거형의 인스턴스를 생성하는 과정 각 저장 속성에 대한 초기값 설정 인스턴스를 사용 가능한 상태로 만드는 과...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%EC%B4%88%EA%B8%B0%ED%99%94%EC%99%80-%EC%83%9D%EC%84%B1%EC%9E%90\"><span class=\"toc-text\">초기화와 생성자</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%B4%88%EA%B8%B0%ED%99%94-Initialization\"><span class=\"toc-text\">초기화 (Initialization)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-Initializer\"><span class=\"toc-text\">생성자 (Initializer)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%B4%88%EA%B8%B0%ED%99%94%EC%9D%98-%EA%B2%BD%EC%9A%B0%EC%9D%98-%EC%88%98\"><span class=\"toc-text\">초기화의 경우의 수</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EB%A9%A4%EB%B2%84%EC%99%80%EC%9D%B4%EC%A6%88-%EC%83%9D%EC%84%B1%EC%9E%90-Memberwise-Initializer\"><span class=\"toc-text\">멤버와이즈 생성자 (Memberwise Initializer)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4-x2F-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1%EC%9E%90\"><span class=\"toc-text\">구조체&#x2F;클래스의 생성자</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EC%A7%80%EC%A0%95%EC%83%9D%EC%84%B1%EC%9E%90\"><span class=\"toc-text\">구조체 지정생성자</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A7%80%EC%A0%95-x2F-%ED%8E%B8%EC%9D%98-%EC%83%9D%EC%84%B1%EC%9E%90\"><span class=\"toc-text\">클래스 지정&#x2F;편의 생성자</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%EC%9C%84%EC%9E%84-%EA%B7%9C%EC%B9%99\"><span class=\"toc-text\">생성자 위임 규칙</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D-%EA%B4%80%EA%B3%84%EC%97%90%EC%84%9C-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%98%B8%EC%B6%9C%EA%B3%BC%EC%A0%95%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\"><span class=\"toc-text\">상속 관계에서 생성자 호출과정의 메모리 구조</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%81%EC%86%8D-%EC%98%88%EC%8B%9C\"><span class=\"toc-text\">클래스 상속 예시</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D%EA%B3%BC-%EC%9E%AC%EC%A0%95%EC%9D%98-%EA%B7%9C%EC%B9%99\"><span class=\"toc-text\">상속과 재정의 규칙</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%83%9D%EC%84%B1%EC%9E%90\"><span class=\"toc-text\">생성자</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%9C%84-%EC%83%9D%EC%84%B1%EC%9E%90%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B3%A0%EB%A0%A4\"><span class=\"toc-text\">상위 생성자에 대한 고려</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%ED%98%84%EC%9E%AC-%EB%8B%A8%EA%B3%84%EC%9D%98-%EC%83%9D%EC%84%B1%EC%9E%90-%EA%B5%AC%ED%98%84\"><span class=\"toc-text\">현재 단계의 생성자 구현</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%EC%83%81%EC%86%8D%EC%9D%98-%EC%98%88%EC%99%B8%EC%82%AC%ED%95%AD\"><span class=\"toc-text\">생성자 상속의 예외사항</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%A7%80%EC%A0%95%EC%83%9D%EC%84%B1%EC%9E%90-%EC%9E%90%EB%8F%99%EC%83%81%EC%86%8D\"><span class=\"toc-text\">지정생성자 자동상속</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%ED%8E%B8%EC%9D%98%EC%83%9D%EC%84%B1%EC%9E%90-%EC%9E%90%EB%8F%99%EC%83%81%EC%86%8D\"><span class=\"toc-text\">편의생성자 자동상속</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%98%88%EC%8B%9C1\"><span class=\"toc-text\">예시1</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%98%88%EC%8B%9C2\"><span class=\"toc-text\">예시2</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%95%84%EC%88%98%EC%83%9D%EC%84%B1%EC%9E%90\"><span class=\"toc-text\">필수생성자</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\"><span class=\"toc-text\">사용 예시</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#UIView\"><span class=\"toc-text\">UIView</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%8B%A4%ED%8C%A8%EA%B0%80%EB%8A%A5-%EC%83%9D%EC%84%B1%EC%9E%90-Failable\"><span class=\"toc-text\">실패가능 생성자 (Failable)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%98-%EC%8B%A4%ED%8C%A8%EA%B0%80%EB%8A%A5-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%99%9C%EC%9A%A9\"><span class=\"toc-text\">열거형의 실패가능 생성자 활용</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%B4%88%EA%B8%B0%ED%99%94-%EC%8B%A4%ED%8C%A8%EC%9D%98-%EC%A0%84%EB%8B%AC-%ED%98%B8%EC%B6%9C%EA%B4%80%EA%B3%84\"><span class=\"toc-text\">초기화 실패의 전달 (호출관계)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EB%8F%99%EC%9D%BC%EB%8B%A8%EA%B3%84-Delegate-Across\"><span class=\"toc-text\">동일단계 (Delegate Across)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D%EA%B4%80%EA%B3%84-Delegate-Up\"><span class=\"toc-text\">상속관계 (Delegate Up)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D%EA%B4%80%EA%B3%84%EC%97%90%EC%84%9C-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">상속관계에서 재정의하기</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"27)🧰 Swift - 소멸자(deinit)","uid":"22daca62ba0b2c7a54e541387d33eedd","slug":"Allen/2022-10-03-Allen27","date":"2022-10-02T15:00:00.000Z","updated":"2023-03-31T10:33:49.756Z","comments":true,"path":"api/articles/Allen/2022-10-03-Allen27.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 소멸자 인스턴스가 메모리에서 해제되기 직전 처리되는 내용을 구현하는 메서드 클래스에는 최대 1개의 소멸자만 정의 가능 파라미터 사용하지 않음 소멸자는 모든 속성에 접근할 수 있다...","link":"","photos":[],"count_time":{"symbolsCount":495,"symbolsTime":"1 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"25)🧰 Swift - 클래스(Class)의 상속","uid":"ed9964861ab21bcd20187bc915c28720","slug":"Allen/2022-10-01-Allen25","date":"2022-09-30T15:00:00.000Z","updated":"2023-03-31T10:33:38.122Z","comments":true,"path":"api/articles/Allen/2022-10-01-Allen25.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 클래스의 상속과 재정의클래스의 상속 (Inheritance)상속의 기본 개념 성격이 비슷한 타입을 새로 만들어 데이터(저장속성)를 추가하거나 기능(메서드)을 변형시켜 사용하는 것...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://www.instagram.com/nomatter_jun/"}}}}}}