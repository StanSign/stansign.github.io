{"title":"28)🧰 Swift - 타입 캐스팅 (Type Casting)","uid":"f95356eadf2eace8ae678d705c540cf0","slug":"Allen/2022-10-05-Allen28","date":"2022-10-04T15:00:00.000Z","updated":"2023-03-31T10:33:54.064Z","comments":true,"path":"api/articles/Allen/2022-10-05-Allen28.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"타입-캐스팅-Type-Casting\"><a href=\"#타입-캐스팅-Type-Casting\" class=\"headerlink\" title=\"타입 캐스팅 (Type Casting)\"></a>타입 캐스팅 (Type Casting)</h1><h2 id=\"is-연산자-Type-Check-Operator\"><a href=\"#is-연산자-Type-Check-Operator\" class=\"headerlink\" title=\"is 연산자 (Type Check Operator)\"></a>is 연산자 (Type Check Operator)</h2><ul>\n<li>타입에 대한 검사를 수행하는 연산자</li>\n<li><code>[instance] is [type]</code><ul>\n<li>참: <code>true</code></li>\n<li>거짓: <code>false</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Person &#123;\n\tvar id &#x3D; 0\n\tvar name &#x3D; &quot;이름&quot;\n\tvar email &#x3D; &quot;abc@gmail.com&quot;\n&#125;\n\nclass Student: Person &#123;\n\tvar grade &#x3D; 1\n&#125;\n\nclass Undergraduate: Student &#123;\n\tvar major &#x3D; &quot;Alchemy&quot;\n&#125;\n\nlet person &#x3D; Person()\nprint(person is Person) &#x2F;&#x2F; true\nprint(person is Student) &#x2F;&#x2F; false\n\nlet student &#x3D; Student()\nprint(student is Person) &#x2F;&#x2F; true\nprint(student is Student) &#x2F;&#x2F; true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>상위 타입의 인스턴스들이 하위 타입의 인스턴스에 포함되는 것을 알 수 있습니다. 상속을 받았기 때문에 당연한 이야기이죠..!</p>\n<h2 id=\"as-연산자-Type-Cast-Operator\"><a href=\"#as-연산자-Type-Cast-Operator\" class=\"headerlink\" title=\"as 연산자 (Type Cast Operator)\"></a>as 연산자 (Type Cast Operator)</h2><ul>\n<li>인스턴스 타입의 메모리 구조에 대한 힌트 정보를 변경하는 연산자</li>\n<li><code>as</code>, <code>as?</code>, <code>as!</code><ul>\n<li><code>as</code>: 업캐스팅(Upcasting)<ul>\n<li>항상 성공</li>\n<li>상위 클래스의 메모리 구조로 인식</li>\n</ul>\n</li>\n<li><code>as?</code>, <code>as!</code>: 다운캐스팅(Downcasting)<ul>\n<li><code>as?</code><ul>\n<li>성공: Optional 타입으로 리턴</li>\n<li>실패: <code>nil</code> 리턴</li>\n</ul>\n</li>\n<li><code>as!</code><ul>\n<li>성공: Optional 타입을 강제 언래핑하여 리턴</li>\n<li>실패: 런타임 에러</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let person: Person &#x3D; Undergraduate()\nprint(person.id)\nprint(person.name)\nprint(person.email)\nprint(person.grade) &#x2F;&#x2F; Error: Value of &#39;Person&#39; has no member &#39;grade&#39;\nprint(person.major) &#x2F;&#x2F; Error: Value of &#39;Person&#39; has no member &#39;major&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위 예시에서 <code>person</code> 상수는 사실은 5개의 모든 저장속성을 갖고 있습니다. 다만 이 경우에는 <code>Person</code>으로 캐스팅 했기 떄문에 <code>grade</code>와 <code>major</code> 저장속성을 숨겨서 <code>Person</code>의 세 개의 저장속성에만 접근할 수 있습니다.</p>\n<p>그런데 메모리 관점에서 어떻게 저장속성을 숨기느냐..?<br>변수는 스택 영역에 있습니다. 인스턴스는 힙 영역에 있죠. 어떻게 캐스팅을 하던 인스턴스는 처음에 <strong>초기화한 형태 그대로 힙 영역</strong>에 있습니다.<br>그런데 업캐스팅한 변수를 선언하면, 그 변수는 힙 영역의 캐스팅 하기 전의 <strong>온전한 형태를 갖고 있는 인스턴스의 주소</strong>를 가리킵니다. 대신 <strong>범위를 제한</strong>하여 특정 저장속성들을 숨길 수 있는 것입니다.<br>따라서 업캐스팅을 하던 다운캐스팅을 하던 힙 영역의 인스턴스는 <strong>동일한 데이터 영역의 클래스 주소</strong>를 가리키고 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">if let jake &#x3D; person as? Undergraduate &#123; &#x2F;&#x2F; Unbind Optional\n\tjake.name &#x3D; &quot;Jake&quot;\n\tjake.major &#x3D; &quot;Architecture&quot;\n&#125;\n\nlet jane &#x3D; person as! Undergraduate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위 예시의 경우에는 <code>person</code> 상수를 처음에 <code>Undergraduate()</code>로 가장 하위 클래스로 업캐스팅 했기 때문에 반대로 다운캐스팅할 때 에러가 발생하지 않습니다.<br>그런데 <code>let jake = Person()</code>처럼 상위 클래스로 초기화하고 <code>as?</code>나 <code>as!</code>를 사용해서 다운캐스팅을 하면 <code>Student</code>와 <code>Undergraduate</code> 클래스의 저장속성은 지니지 않기 때문에 실패합니다.</p>\n<h5 id=\"as-연산자의-활용\"><a href=\"#as-연산자의-활용\" class=\"headerlink\" title=\"as 연산자의 활용\"></a>as 연산자의 활용</h5><p><code>String</code> &lt;-<code>as</code>-&gt; <code>NSString</code></p>\n<ul>\n<li>Swift 언어는 내부적으로는 여전히 Obj-C 기반의 프레임워크를 사용하기 때문에 두 타입은 상호 호환될 수 있도록 설계되어 있다.</li>\n<li>브릿징(Bridging)</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let str: String &#x3D; &quot;Hello&quot;\nlet anotherStr &#x3D; str as NSString<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 타입 캐스팅 (Type Casting)is 연산자 (Type Check Operator) 타입에 대한 검사를 수행하는 연산자 [instance] is [type] 참: true ...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":75,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":75,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%ED%83%80%EC%9E%85-%EC%BA%90%EC%8A%A4%ED%8C%85-Type-Casting\"><span class=\"toc-text\">타입 캐스팅 (Type Casting)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#is-%EC%97%B0%EC%82%B0%EC%9E%90-Type-Check-Operator\"><span class=\"toc-text\">is 연산자 (Type Check Operator)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#as-%EC%97%B0%EC%82%B0%EC%9E%90-Type-Cast-Operator\"><span class=\"toc-text\">as 연산자 (Type Cast Operator)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#as-%EC%97%B0%EC%82%B0%EC%9E%90%EC%9D%98-%ED%99%9C%EC%9A%A9\"><span class=\"toc-text\">as 연산자의 활용</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"30)🧰 Swift - Any","uid":"ef533afe96035326c780dd33d82b0d35","slug":"Allen/2022-10-10-Allen30","date":"2022-10-09T15:00:00.000Z","updated":"2023-03-31T10:34:04.842Z","comments":true,"path":"api/articles/Allen/2022-10-10-Allen30.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) Any와 AnyObject를 위한 타입 캐스팅Any 타입 기본 타입들을 포함하여 커스텀 클래스, 옵셔널, 구조체, 열거형, 함수 타입 등 모든 타입을 포함하여 어떤 타입도 표현할...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":75,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":75,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"26)🧰 Swift - 생성자(Init)","uid":"b634a4054ae5c0257e715086c4d854c8","slug":"Allen/2022-10-03-Allen26","date":"2022-10-02T15:00:00.000Z","updated":"2023-03-31T10:33:45.074Z","comments":true,"path":"api/articles/Allen/2022-10-03-Allen26.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 초기화와 생성자초기화 (Initialization) 클래스, 구조체, 열거형의 인스턴스를 생성하는 과정 각 저장 속성에 대한 초기값 설정 인스턴스를 사용 가능한 상태로 만드는 과...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":75,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":75,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}