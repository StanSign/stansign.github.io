{"title":"38)🧰 Swift - 에러 처리","uid":"ce2e6e038e6cdd39ed0992f2d4217d3d","slug":"Allen/2022-12-02-Allen38","date":"2022-12-01T15:00:00.000Z","updated":"2023-03-31T10:35:08.322Z","comments":true,"path":"api/articles/Allen/2022-12-02-Allen38.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"에러\"><a href=\"#에러\" class=\"headerlink\" title=\"에러\"></a>에러</h1><h2 id=\"에러의-종류\"><a href=\"#에러의-종류\" class=\"headerlink\" title=\"에러의 종류\"></a>에러의 종류</h2><ol>\n<li>컴파일 에러<ul>\n<li>코드가 잘못되었음을 알려주는 문법적 오류</li>\n</ul>\n</li>\n<li>런타임 에러<ul>\n<li>여러가지 이유로 앱이 실행되는 동안 발생하는 오류</li>\n<li>미리 발생 가능한 에러에 대응할 필요가 있다</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"에러-처리의-3단계\"><a href=\"#에러-처리의-3단계\" class=\"headerlink\" title=\"에러 처리의 3단계\"></a>에러 처리의 3단계</h2><ul>\n<li><code>throws</code>와 <code>throw</code>를 사용</li>\n<li><code>enum</code> 타입에 <code>Error</code> 프로토콜을 채택하여 커스텀 에러 사용</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum SomeError: Error &#123;\n\tcase aError, bError, cError\n&#125;\n\nfunc doSomething(num: Int) throws -&gt; Bool &#123;\n\tif num &gt;&#x3D; 7 &#123;\n\t\treturn true\n\t&#125; else &#123;\n\t\tif num &lt; 0 &#123;\n\t\t\tthrow SomeError.aError\n\t\t&#125;\n\t\treturn false\n\t&#125;\n&#125;\n\ndoSomething(num: 7) &#x2F;&#x2F; true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-에러-정의\"><a href=\"#1-에러-정의\" class=\"headerlink\" title=\"1) 에러 정의\"></a>1) 에러 정의</h3><p><code>enum</code> 타입으로 사용할 에러를 정의해야 합니다. </p>\n<p>이 때 <code>Error</code> 프로토콜을 채용해야 Swift에서 이 열거형 타입이 에러인지를 알 수 있기 때문에 꼭 채택해야 합니다!</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum HeightError: Error &#123;\n\tcase maxHeight\n\tcase minHeight\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-에러가-발생할-수-있는-함수에-대한-정의\"><a href=\"#2-에러가-발생할-수-있는-함수에-대한-정의\" class=\"headerlink\" title=\"2) 에러가 발생할 수 있는 함수에 대한 정의\"></a>2) 에러가 발생할 수 있는 함수에 대한 정의</h3><p><code>throws</code> 키워드를 파라미터와 반환 타입 중간에 넣어주어 에러가 발생할 수 있는 함수라는 것을 명시해주어야 합니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func checkingHeight(height: Int) throws -&gt; Bool &#123;\n\tif height &gt; 190 &#123;\n\t\tthrow HeightError.maxHeight\n\t&#125; else if height &lt; 130 &#123;\n\t\tthrow HeightError.minHeight\n\t&#125; else &#123;\n\t\tif height &gt;&#x3D; 160 &#123;\n\t\t\treturn true\n\t\t&#125; else &#123;\n\t\t\treturn false\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-에러가-발생할-수-있는-함수의-처리-실행\"><a href=\"#3-에러가-발생할-수-있는-함수의-처리-실행\" class=\"headerlink\" title=\"3) 에러가 발생할 수 있는 함수의 처리(실행)\"></a>3) 에러가 발생할 수 있는 함수의 처리(실행)</h3><p><code>try</code>, <code>do-catch</code>문을 사용하여 일반적인 함수와는 조금 다르게 실행해야 합니다.</p>\n<p>에러가 발생할 수 있다고 <code>throws</code> 키워드를 명시해둔 함수는 실행할 때 <code>try</code> 키워드를 붙여주어야 합니다.</p>\n<p>또한 이 <code>try</code>로 실행되는 함수들은 <code>do-catch</code>문 안에서만 쓰일 수 있습니다.</p>\n<p><code>do</code> 블럭 안에는 <code>try</code> 함수가 정상적으로 실행됐을 경우에 실행되는 함수들이 들어있습니다.</p>\n<p>반대로 <code>catch</code> 블럭 안에는 <code>try</code>로 실행된 함수에서 에러가 발생했을 때 실행되는 함수들이 들어있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">do &#123; &#x2F;&#x2F; 정상 처리\n\tlet result &#x3D; try checkingHeight(height: 160)\n\tswitch result &#123;\n\tcase true:\n\t\tprint(&quot;참&quot;)\n\tcase false:\n\t\tprint(&quot;거짓&quot;)\n\t&#125;\n&#125; catch &#123; &#x2F;&#x2F; 에러 처리\n\tprint(&quot;올바르지 않은 몸무게&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"에러-발생-가능한-함수의-형태\"><a href=\"#에러-발생-가능한-함수의-형태\" class=\"headerlink\" title=\"에러 발생 가능한 함수의 형태\"></a>에러 발생 가능한 함수의 형태</h2><p>일반적인 형태의 함수는 <code>() -&gt; ()</code>의 형태였습니다.</p>\n<p><code>throws</code>는 이 사이에 간단하게 쇽 넣어주는 것으로 사용할 수 있습니다.</p>\n<p><code>() throws -&gt; ()</code> ⬅️ 이렇게요!</p>\n<h2 id=\"에러-처리-방법\"><a href=\"#에러-처리-방법\" class=\"headerlink\" title=\"에러 처리 방법\"></a>에러 처리 방법</h2><p>에러를 발생시키는 방법을 알아보았습니다.</p>\n<p>그러면 이 에러가 발생 됐을 때 처리할 수 있는 방법들을 알아볼까요?</p>\n<h3 id=\"1-정식-처리-방법\"><a href=\"#1-정식-처리-방법\" class=\"headerlink\" title=\"1) 정식 처리 방법\"></a>1) 정식 처리 방법</h3><p>위에서 사용했던 예시와 동일합니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">do &#123;\n\tlet result &#x3D; try checkingHeight(height: 160)\n&#125; catch &#123;\n\tprint(&quot;Error!&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-Optional-try-방법\"><a href=\"#2-Optional-try-방법\" class=\"headerlink\" title=\"2) Optional try 방법\"></a>2) Optional try 방법</h3><p>에러 처리의 경우에도 <code>Optional</code>을 사용하면 아주 간단하게 처리할 수 있습니다.</p>\n<p><code>try</code> 뒤에 <code>?</code>를 붙여서 <code>try?</code> 처럼 사용하면 <code>Optional try</code>가 됩니다.</p>\n<p>이 <code>Optional try</code>는 정상적인 경우에는 정상 타입으로 반환하지만, 에러가 발생하면 <code>nil</code> 값을 반환해줍니다.</p>\n<p>나오는 값은 당연히 <code>Optional</code>이기 때문에 Optional Binding을 해주고 사용할 수 있습니다!</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let isChecked &#x3D; try? checkingHeight(height: 200)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-Forced-try-방법\"><a href=\"#3-Forced-try-방법\" class=\"headerlink\" title=\"3) Forced try 방법\"></a>3) Forced try 방법</h3><p><code>Optional</code> 방법이 있었으니 <code>Forced</code> 방법도 있겠죠?</p>\n<p><code>Optional</code>하지 않은 타입으로 반환되지만, 에러가 발생할 경우 앱이 강제로 꺼질 수 있다는 위험이 있습니다!</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let isChecked2 &#x3D; try! checkingHeight(height: 120)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"catch-블럭-처리법\"><a href=\"#catch-블럭-처리법\" class=\"headerlink\" title=\"catch 블럭 처리법\"></a>catch 블럭 처리법</h2><p>그런데 <code>enum</code> 타입으로 에러들을 정의할 때 한가지 에러만 만들었던 것이 아니였죠?</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum SomeError: Error &#123;\n\tcase aError, bError, cError\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 여러가지 에러 타입이 있는데, 이 많은 종류의 에러들을 <code>catch</code> 블럭 하나에서 처리하려면 어떻게 해야할까요?</p>\n<p><code>switch</code>문이나 <code>if-else</code> 문을 사용해서 분기 처리를 할 수도 있지만, 단순히 <code>catch</code>를 여러 가지로 붙여 쓰는 것으로 다양한 에러에 각각 처리문을 넣어줄 수 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">do &#123;\n\tlet isChecked &#x3D; try checkingHeight(height: 100)\n&#125; catch &#123;\n\tif let error &#x3D; error as? HeightError &#123;\n\t\tswitch error &#123;\n\t\tcase .maxHeight:\n\t\t\tprint(&quot;키가 커서 놀이기구를 탈 수 없어요.&quot;)\n\t\tcase .minHeight:\n\t\t\tprint(&quot;키가 작아서 놀이기구를 탈 수 없어요.&quot;)\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">do &#123;\n\tlet isChecked &#x3D; try checkingHeight(height: 100)\n&#125; catch HeightError.maxHeight &#123;\n\tprint(&quot;키가 커서 놀이기구를 탈 수 없어요.&quot;)\n&#125; catch HeightError.minHeight &#123;\n\tprint(&quot;키가 작아서 놀이기구를 탈 수 없어요.&quot;)\n&#125; catch &#123; &#x2F;&#x2F; default\n\tprint(&quot;알 수 없는 에러&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"에러를-던지는-함수를-처리하는-함수\"><a href=\"#에러를-던지는-함수를-처리하는-함수\" class=\"headerlink\" title=\"에러를 던지는 함수를 처리하는 함수\"></a>에러를 던지는 함수를 처리하는 함수</h2><p>에러를 발생시키는 함수와 처리하는 함수를 꼭 같은 곳에서 정의해줘야 한다면, 앱이 커질수록 불편함이 늘어날 수 있습니다.</p>\n<p>그래서 Swift는 에러를 처리하는 함수를 정의하는 여러가지 방법들을 만들어두었습니다.</p>\n<h3 id=\"throwing-함수로-에러-다시-던지기\"><a href=\"#throwing-함수로-에러-다시-던지기\" class=\"headerlink\" title=\"throwing 함수로 에러 다시 던지기\"></a>throwing 함수로 에러 다시 던지기</h3><p>함수 내에서 에러를 직접 처리하기 곤란한 경우, 해당 에러를 다른 함수로 던지고 그 다른 함수가 다시 에러를 던지도록 할 수 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func handleError() throws &#123;\n\tdo &#123; &#x2F;&#x2F; do문까지 생략 가능\n\t\ttry throwingFunc()\n\t&#125;\n&#125; &#x2F;&#x2F; no catch\n\ndo &#123;\n\ttry handleError()\n&#125; catch &#123;\n\tprint(error)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"rethrowing-함수로-에러-다시-던지기-rethrow\"><a href=\"#rethrowing-함수로-에러-다시-던지기-rethrow\" class=\"headerlink\" title=\"rethrowing 함수로 에러 다시 던지기 (rethrow)\"></a>rethrowing 함수로 에러 다시 던지기 (<code>rethrow</code>)</h3><p>에러를 던지는 throwing 함수를 파라미터로 받는 경우, 해당 함수의 에러를 다시 던지는 것 또한 가능합니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func someFunction(callback: () throws -&gt; Void) rethrows &#123;\n\t&#x2F;&#x2F; do문 생략\n\ttry callback()\n&#125;\n\nfunc someFunction2(callback: () throws -&gt; Void) rethrows &#123;\n\tenum ChangedError: Error &#123;\n\t\tcase cError\n\t&#125;\n\n\tdo &#123;\n\t\ttry callback()\n\t&#125; catch &#123;\n\t\tthrow ChangedError.cError\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 에러에러의 종류 컴파일 에러 코드가 잘못되었음을 알려주는 문법적 오류 런타임 에러 여러가지 이유로 앱이 실행되는 동안 발생하는 오류 미리 발생 가능한 에러에 대응할 필요가 있다 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%EC%97%90%EB%9F%AC\"><span class=\"toc-text\">에러</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%97%90%EB%9F%AC%EC%9D%98-%EC%A2%85%EB%A5%98\"><span class=\"toc-text\">에러의 종류</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC%EC%9D%98-3%EB%8B%A8%EA%B3%84\"><span class=\"toc-text\">에러 처리의 3단계</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%EC%97%90%EB%9F%AC-%EC%A0%95%EC%9D%98\"><span class=\"toc-text\">1) 에러 정의</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%EC%97%90%EB%9F%AC%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%95%A8%EC%88%98%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EC%9D%98\"><span class=\"toc-text\">2) 에러가 발생할 수 있는 함수에 대한 정의</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%EC%97%90%EB%9F%AC%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%95%A8%EC%88%98%EC%9D%98-%EC%B2%98%EB%A6%AC-%EC%8B%A4%ED%96%89\"><span class=\"toc-text\">3) 에러가 발생할 수 있는 함수의 처리(실행)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%95%A8%EC%88%98%EC%9D%98-%ED%98%95%ED%83%9C\"><span class=\"toc-text\">에러 발생 가능한 함수의 형태</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95\"><span class=\"toc-text\">에러 처리 방법</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%EC%A0%95%EC%8B%9D-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95\"><span class=\"toc-text\">1) 정식 처리 방법</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Optional-try-%EB%B0%A9%EB%B2%95\"><span class=\"toc-text\">2) Optional try 방법</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Forced-try-%EB%B0%A9%EB%B2%95\"><span class=\"toc-text\">3) Forced try 방법</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#catch-%EB%B8%94%EB%9F%AD-%EC%B2%98%EB%A6%AC%EB%B2%95\"><span class=\"toc-text\">catch 블럭 처리법</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%97%90%EB%9F%AC%EB%A5%BC-%EB%8D%98%EC%A7%80%EB%8A%94-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98\"><span class=\"toc-text\">에러를 던지는 함수를 처리하는 함수</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#throwing-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%97%90%EB%9F%AC-%EB%8B%A4%EC%8B%9C-%EB%8D%98%EC%A7%80%EA%B8%B0\"><span class=\"toc-text\">throwing 함수로 에러 다시 던지기</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#rethrowing-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%97%90%EB%9F%AC-%EB%8B%A4%EC%8B%9C-%EB%8D%98%EC%A7%80%EA%B8%B0-rethrow\"><span class=\"toc-text\">rethrowing 함수로 에러 다시 던지기 (rethrow)</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"39)🧰 Swift - Defer","uid":"32fd8798e5c3d3654084b9ba0acefdda","slug":"Allen/2022-12-02-Allen39","date":"2022-12-01T15:00:00.000Z","updated":"2023-03-31T10:35:18.090Z","comments":true,"path":"api/articles/Allen/2022-12-02-Allen39.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) Defer우리가 할 일을 미루는 것처럼 코드 실행도 미룰 수 있다면 어떨까요? Swift는 defer 키워드를 제공해서 블럭 안에 있는 구문들을 해당 스코프의 마지막까지 미뤄줄 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"14)🍎 Swift - Rx 없이 Reactive Binding 해보기","uid":"01b2dffc69fa4db38318456db0dbef20","slug":"Swift/2022-11-20-Swift14","date":"2022-11-19T15:00:00.000Z","updated":"2023-03-31T10:42:38.383Z","comments":true,"path":"api/articles/Swift/2022-11-20-Swift14.json","keywords":null,"cover":null,"text":"Rx 없이 View ➡️ ViewModel Binding하기Rx라는 놈 공부할 땐 어려웠는데..한 번 써보니까 없이 기능 구현을 할 때 갈증이 계속해서 일어나는 현상을 겪고 있습니다. 하지만 라이브러리에 의존하는 것은 좋지 않으니까 Rx 없이 데이터 바...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":26,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}