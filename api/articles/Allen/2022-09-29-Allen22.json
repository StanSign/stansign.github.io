{"title":"22)🧰 Swift - 속성(Property)","uid":"5947096696ce0c574876d193148e2ccd","slug":"Allen/2022-09-29-Allen22","date":"2022-09-28T15:00:00.000Z","updated":"2023-03-31T10:33:20.694Z","comments":true,"path":"api/articles/Allen/2022-09-29-Allen22.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"구조체와-클래스의-속성\"><a href=\"#구조체와-클래스의-속성\" class=\"headerlink\" title=\"구조체와 클래스의 속성\"></a>구조체와 클래스의 속성</h1><h2 id=\"저장-속성-Stored-Properties\"><a href=\"#저장-속성-Stored-Properties\" class=\"headerlink\" title=\"저장 속성 (Stored Properties)\"></a>저장 속성 (Stored Properties)</h2><h3 id=\"저장-속성-Stored-Properties-1\"><a href=\"#저장-속성-Stored-Properties-1\" class=\"headerlink\" title=\"저장 속성 (Stored Properties)\"></a>저장 속성 (Stored Properties)</h3><ul>\n<li>값이 저장되는 일반적인 속성(변수)</li>\n<li>특정한 메모리 공간을 가지고 그 안에 값을 저장할 수 있는 속성</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Bird &#123;\n\t&#x2F;&#x2F; 저장 속성\n\tvar name: String\n\tvar weight: Double\n\n\tfunc fly() &#123;\n\t\tprint(&quot;날아갑니다.&quot;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"주의점\"><a href=\"#주의점\" class=\"headerlink\" title=\"주의점\"></a>주의점</h4><ul>\n<li><code>let</code>과 <code>var</code>로 선언 가능</li>\n<li>각 속성 자체가 <strong>고유의 메모리 공간</strong>을 가짐</li>\n<li>초기화 이전에 값을 가지고 있거나 생성자를 통해 <strong>값을 초기화</strong>해주어야 한다.</li>\n</ul>\n<h3 id=\"지연-저장-속성-Lazy-Stored-Properties\"><a href=\"#지연-저장-속성-Lazy-Stored-Properties\" class=\"headerlink\" title=\"지연 저장 속성 (Lazy Stored Properties)\"></a>지연 저장 속성 (Lazy Stored Properties)</h3><ul>\n<li>해당 속성의 초기화를 지연시킨다.<ul>\n<li>인스턴스가 초기화되는 시점에 해당 속성을 초기화하지 않고, 해당 속성에 접근할 때 개별적으로 초기화된다.</li>\n</ul>\n</li>\n<li>상수(<code>let</code>)으로의 선언이 불가능 (<code>lazy var</code>로만 가능)</li>\n<li>초기화 시점을 늦췄기 때문에 <code>init</code>에서 초기화하면 제 기능을 못한다.<ul>\n<li>접근될 때 초기화되더라도 그 시점에 초기값은 필요하기에 기본값이 설정되어야 한다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Bird &#123;\n\tvar name: String\n\tlazy var weight: Double &#x3D; 0.2 &#x2F;&#x2F; 지연 저장 속성\n\n\tinit(name: String) &#123;\n\t\tself.name &#x3D; name\n\t&#125;\n\n\tfunc fly() &#123;\n\t\tprint(&quot;날아갑니다.&quot;)\n\t&#125;\n&#125;\n\nvar aBird &#x3D; Bird(name: &quot;새&quot;)\naBird.weight &#x2F;&#x2F; 해당 시점에 weight 속성 초기화<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"주의점-1\"><a href=\"#주의점-1\" class=\"headerlink\" title=\"주의점\"></a>주의점</h4><ul>\n<li>기본값으로는 값을 넣거나 표현식을 넣을 수 있다.<ul>\n<li>함수 호출 코드, 계산 코드, 클로저 코드</li>\n<li><code>return</code> 타입만 일치한다면!</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"지연-저장-속성을-사용하는-이유\"><a href=\"#지연-저장-속성을-사용하는-이유\" class=\"headerlink\" title=\"지연 저장 속성을 사용하는 이유?\"></a>지연 저장 속성을 사용하는 이유?</h4><ol>\n<li>메모리를 많이 사용할 때</li>\n<li>다른 속성을 이용해야 할 때<ul>\n<li>모든 속성들은 동시에 초기화된다.</li>\n<li>따라서 다른 속성에 의존하는 속성일 경우, 초기화가 제대로 되지 않을 가능성이 있다.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class AView &#123;\n\tvar a: Int\n\n\tlazy var view &#x3D; UIImageView()\n\n\tlazy var b: Int &#x3D; &#123;\n\t\treturn a * 10 &#x2F;&#x2F; 속성 a가 필요\n\t&#125;()\n\n\tinit(num: Int) &#123;\n\t\tself.a &#x3D; num\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"계산-속성-Computed-Properties\"><a href=\"#계산-속성-Computed-Properties\" class=\"headerlink\" title=\"계산 속성 (Computed Properties)\"></a>계산 속성 (Computed Properties)</h2><ul>\n<li>속성의 형태를 가진 실질적 메서드<ul>\n<li>인스턴스에 메모리 공간이 할당되어 있지 않음 (메서드이기 때문)</li>\n</ul>\n</li>\n<li><code>get</code>, <code>set</code><ul>\n<li><code>get</code>만 선언할 경우 읽기전용(read-only) 계산 속성</li>\n<li><code>set</code>은 선택적으로 구현<ul>\n<li><code>newValue</code> 사용 시 유용</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"예시1\"><a href=\"#예시1\" class=\"headerlink\" title=\"예시1\"></a>예시1</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Person &#123;\n\tvar birth: Int &#x3D; 0\n\n\tvar age: Int &#123; &#x2F;&#x2F; 계산 속성\n\t\tget &#123; &#x2F;&#x2F; get-block (getter)\n\t\t\treturn 2021 - birth\n\t\t&#125;\n\t\t&#x2F;&#x2F; 1. set default\n\t\tset(age) &#123; &#x2F;&#x2F; set-block (setter)\n\t\t\tself.birth &#x3D; 2021 - age\n\t\t&#125;\n\t\t&#x2F;&#x2F; 2. set using newValue\n\t\tset &#123;\n\t\t\tself.birth &#x3D; 2021 - newValue\n\t\t&#125;\n\t&#125;\n&#125;\n\nvar p1 &#x3D; Person()\np1.birth &#x3D; 2000\nprint(p1.age) &#x2F;&#x2F; 21 (get)\np1.age &#x3D; 20 &#x2F;&#x2F; (set)\nprint(p1.birth) &#x2F;&#x2F; 2001<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"예시2\"><a href=\"#예시2\" class=\"headerlink\" title=\"예시2\"></a>예시2</h3><ul>\n<li>계산 속성이 아닌 방식으로 구현</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Person &#123;\n\tvar name: String &#x3D; &quot;사람&quot;\n\tvar height: Double &#x3D; 160.0\n\tvar weight: Double &#x3D; 60.0\n\n\tfunc calculateBMI() -&gt; Double &#123;\n\t\tlet bmi &#x3D; weight &#x2F; (height * height) * 10000\n\t\treturn bmi\n\t&#125;\n&#125;\n\nlet p &#x3D; Person()\np.height &#x3D; 165\np.weight &#x3D; 65\n\np.calculateBMI()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>계산 속성으로 구현</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Person &#123;\n\tvar name: String &#x3D; &quot;사람&quot;\n\tvar height: Double &#x3D; 160.0\n\tvar weight: Double &#x3D; 60.0\n\n\tvar bmi: Double &#123;\n\t\tget &#123;\n\t\t\tlet result &#x3D; weight &#x2F; (height * height) * 10000\n\t\t\treturn result\n\t\t&#125;\n\t\tset &#123; &#x2F;&#x2F; 키는 변하지 않는다는 가정 하에\n\t\t\tweight &#x3D; newValue * height * height &#x2F; 10000\n\t\t&#125;\n\t&#125;\n&#125;\n\nlet p &#x3D; Person()\np.height &#x3D; 165\np.weight &#x3D; 65\nprint(p.bmi) &#x2F;&#x2F; 23.875...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"장점\"><a href=\"#장점\" class=\"headerlink\" title=\"장점\"></a>장점</h3><ul>\n<li>관련이 있는 두 가지 메서드를 한 번에 구현</li>\n<li>외부에서 보기에 속성 이름으로 설정</li>\n</ul>\n<h3 id=\"주의점-2\"><a href=\"#주의점-2\" class=\"headerlink\" title=\"주의점\"></a>주의점</h3><ul>\n<li>항상 변하는 값이므로 <code>var</code>로 선언</li>\n<li>자료형을 반드시 선언 (형식 추론 불가)</li>\n<li><code>get</code>은 필수, <code>set</code>은 선택</li>\n</ul>\n<h2 id=\"타입-속성-Type-Properties\"><a href=\"#타입-속성-Type-Properties\" class=\"headerlink\" title=\"타입 속성 (Type Properties)\"></a>타입 속성 (Type Properties)</h2><ul>\n<li>인스턴스에 속한 속성이 아닌 타입 자체에 속한 속성</li>\n<li>데이터 공간에 <strong>고정</strong>된 모든 인스턴스들이 <strong>공유</strong>하는 속성</li>\n</ul>\n<h3 id=\"저장-타입-속성\"><a href=\"#저장-타입-속성\" class=\"headerlink\" title=\"저장 타입 속성\"></a>저장 타입 속성</h3><ul>\n<li>생성자(<code>init</code>)가 없다. 타입 자체에 속한 속성<ul>\n<li>기본값 필요</li>\n</ul>\n</li>\n<li>지연 속성의 성격을 갖는다.<ul>\n<li>참고: 여러 스레드에서 동시에 접근해도 한 번만 초기화 (Thread-Safe)</li>\n</ul>\n</li>\n<li><code>static</code></li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Dog &#123;\n\tstatic let species: String &#x3D; &quot;Dog&quot; &#x2F;&#x2F; 저장 타입 속성\n\n\tvar name: String\n\tvar weight: Double\n\n\tinit(name: String, weight: Double) &#123;\n\t\tself.name &#x3D; name\n\t\tself.weight &#x3D; weight\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 타입 자체에 접근해야한다.\nprint(Dog.species) &#x2F;&#x2F; &quot;Dog&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Circle &#123;\n\tstatic let pi: Double &#x3D; 3.14\n\tstatic var count: Int &#x3D; 0\n\n\tvar radius: Double\n\n\tvar diameter: Double &#123;\n\t\tget &#123;\n\t\t\treturn radius * 2\n\t\t&#125;\n\t\tset &#123;\n\t\t\tradius &#x3D; newValue &#x2F; 2\n\t\t&#125;\n\t&#125;\n\n\tinit(radius: Double) &#123;\n\t\tself.radius &#x3D; radius\n\t\tCircle.count +&#x3D; 1\n\t&#125;\n&#125;\n\nvar circle &#x3D; Circle(radius: 2)\nprint(Circle.count) &#x2F;&#x2F; 1\nvar circle2 &#x3D; circle(radius: 3)\nprint(Circle.count) &#x2F;&#x2F; 2\n\nprint(Circle.pi) &#x2F;&#x2F; 3.14<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"주의점-3\"><a href=\"#주의점-3\" class=\"headerlink\" title=\"주의점\"></a>주의점</h4><ul>\n<li><code>let</code>과 <code>var</code> 둘 다 가능</li>\n<li>인스턴스에 속한 속성이 아니기 때문에 인스턴스를 통해서는 접근 불가</li>\n</ul>\n<h3 id=\"계산-타입-속성\"><a href=\"#계산-타입-속성\" class=\"headerlink\" title=\"계산 타입 속성\"></a>계산 타입 속성</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Circle &#123;\n\tstatic let pi: Double &#x3D; 3.14\n\tstatic var count: Int &#x3D; 0\n\n\tstatic var multiPi: Double &#123; &#x2F;&#x2F; 계산 타입 속성\n\t\treturn pi * 2 &#x2F;&#x2F; Circle.pi\n\t&#125;\n\n\tvar radius: Double\n\n\tinit(radius: Double) &#123;\n\t\tself.radius &#x3D; radius\n\t&#125;\n&#125;\n\nlet b &#x3D; Circle.multiPi\nprint(b) &#x2F;&#x2F; 6.28<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"어떤-경우에-타입-속성을-사용할까\"><a href=\"#어떤-경우에-타입-속성을-사용할까\" class=\"headerlink\" title=\"어떤 경우에 타입 속성을 사용할까?\"></a>어떤 경우에 타입 속성을 사용할까?</h3><ul>\n<li>모든 인스턴스가 동일하게 가져야 하는 속성</li>\n<li>모든 인스턴스가 공유해야하는 성격에 가까운 값</li>\n<li>상속에서 재정의<ul>\n<li>저장 타입 속성: 하위 클래스에서 재정의 불가능 (<code>class</code> 키워드 불가)</li>\n<li>계산 타입 속성: 상위 클래스에서 <code>class</code> 키워드를 붙인 경우 재정의 가능</li>\n</ul>\n</li>\n<li><code>class</code> 키워드<ul>\n<li>상속이 있는 경우, 계산 타입 속성에서는 <code>static</code> 대신  <code>class</code> 사용</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"속성-감시자-Property-Observer\"><a href=\"#속성-감시자-Property-Observer\" class=\"headerlink\" title=\"속성 감시자 (Property Observer)\"></a>속성 감시자 (Property Observer)</h2><ul>\n<li>(저장) 속성 감시자</li>\n<li>메서드의 형태로서 저장 속성을 감시한다.</li>\n<li>저장 속성의 값이 바뀔 때 실행되는 메서드</li>\n<li><code>willSet</code>, <code>didSet</code><ul>\n<li><code>willSet</code>: 바뀌기 전에 실행</li>\n<li><code>didSet</code>: 바뀐 후에 실행</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Profile &#123;\n\tvar name: String &#x3D; &quot;이름&quot;\n\n\tvar statusMessage: String &#x3D; &quot;기본 상태 메시지&quot; &#123;\n\t\twillSet(message) &#123;\n\t\t\tprint(&quot;메시지가 \\(statusMessage)에서 \\(message)로 변경될 예정입니다.&quot;)\n\t\t\tprint(&quot;상태 메시지 업데이트 준비&quot;)\n\t\t&#125;\n\t\tdidSet(message) &#123;\n\t\t\tprint(&quot;메시지가 \\(message)에서 \\(statusMessage)로 이미 변경되었습니다.&quot;)\n\t\t&#125;\n\t&#125;\n&#125;\n\nlet p &#x3D; Profile()\n\nprint(p.statusMessage) &#x2F;&#x2F; &quot;기본 상태 메시지&quot;\np.statusMessage &#x3D; &quot;행복해&quot;\n&#x2F;&#x2F; &quot;메시지가 기본 상태 메시지에서 행복해로 변경될 예정입니다.&quot;\n&#x2F;&#x2F; &quot;상태 메시지 업데이트 준비&quot;\n&#x2F;&#x2F; willSet 구문 실행<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>oldValue</code>, <code>newValue</code></li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Profile &#123;\n\tvar name: String &#x3D; &quot;이름&quot;\n\n\tvar statusMessage &#x3D; &quot;기본 상태 메시지&quot; &#123;\n\t\twillSet &#123;\n\t\t\tprint(&quot;메시지가 \\(statusMessage)에서 \\(newValue)로 변경될 예정입니다.&quot;)\n\t\t&#125;\n\t\tdidSet &#123;\n\t\t\tprint(&quot;메시지가 \\(oldValue)에서 \\(statusMessage)로 변경되었습니다.&quot;)\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"주의점-4\"><a href=\"#주의점-4\" class=\"headerlink\" title=\"주의점\"></a>주의점</h3><ul>\n<li>저장 속성<ul>\n<li><strong>저장 속성</strong>에만 가능하다고 생각하는게 편하다!</li>\n</ul>\n</li>\n<li>계산 속성 (상속해서 재정의하는 경우에만 가능)<ul>\n<li>억지로 쓴다고 봐야…</li>\n<li><code>setter</code>에서 처리하는 것이 훠얼씬 편리하다.</li>\n</ul>\n</li>\n<li>실제로 수치적인 값이 변경되는 것이 아니라도, 값을 <code>set</code>하는 과정이 있다면 호출된다.</li>\n</ul>\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 구조체와 클래스의 속성저장 속성 (Stored Properties)저장 속성 (Stored Properties) 값이 저장되는 일반적인 속성(변수) 특정한 메모리 공간을 가지고 ...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%86%8D%EC%84%B1\"><span class=\"toc-text\">구조체와 클래스의 속성</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%A0%80%EC%9E%A5-%EC%86%8D%EC%84%B1-Stored-Properties\"><span class=\"toc-text\">저장 속성 (Stored Properties)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A0%80%EC%9E%A5-%EC%86%8D%EC%84%B1-Stored-Properties-1\"><span class=\"toc-text\">저장 속성 (Stored Properties)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%A3%BC%EC%9D%98%EC%A0%90\"><span class=\"toc-text\">주의점</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A7%80%EC%97%B0-%EC%A0%80%EC%9E%A5-%EC%86%8D%EC%84%B1-Lazy-Stored-Properties\"><span class=\"toc-text\">지연 저장 속성 (Lazy Stored Properties)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%A3%BC%EC%9D%98%EC%A0%90-1\"><span class=\"toc-text\">주의점</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%A7%80%EC%97%B0-%EC%A0%80%EC%9E%A5-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\"><span class=\"toc-text\">지연 저장 속성을 사용하는 이유?</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EA%B3%84%EC%82%B0-%EC%86%8D%EC%84%B1-Computed-Properties\"><span class=\"toc-text\">계산 속성 (Computed Properties)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%98%88%EC%8B%9C1\"><span class=\"toc-text\">예시1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%98%88%EC%8B%9C2\"><span class=\"toc-text\">예시2</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%9E%A5%EC%A0%90\"><span class=\"toc-text\">장점</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A3%BC%EC%9D%98%EC%A0%90-2\"><span class=\"toc-text\">주의점</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%83%80%EC%9E%85-%EC%86%8D%EC%84%B1-Type-Properties\"><span class=\"toc-text\">타입 속성 (Type Properties)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A0%80%EC%9E%A5-%ED%83%80%EC%9E%85-%EC%86%8D%EC%84%B1\"><span class=\"toc-text\">저장 타입 속성</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%A3%BC%EC%9D%98%EC%A0%90-3\"><span class=\"toc-text\">주의점</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B3%84%EC%82%B0-%ED%83%80%EC%9E%85-%EC%86%8D%EC%84%B1\"><span class=\"toc-text\">계산 타입 속성</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%96%B4%EB%96%A4-%EA%B2%BD%EC%9A%B0%EC%97%90-%ED%83%80%EC%9E%85-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\"><span class=\"toc-text\">어떤 경우에 타입 속성을 사용할까?</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%86%8D%EC%84%B1-%EA%B0%90%EC%8B%9C%EC%9E%90-Property-Observer\"><span class=\"toc-text\">속성 감시자 (Property Observer)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A3%BC%EC%9D%98%EC%A0%90-4\"><span class=\"toc-text\">주의점</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"20)🧰 Swift - Class & Struct","uid":"5debd5cacf7147ae1106516b70388c0b","slug":"Allen/2022-09-29-Allen20","date":"2022-09-28T15:00:00.000Z","updated":"2023-03-31T10:33:09.601Z","comments":true,"path":"api/articles/Allen/2022-09-29-Allen20.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 클래스와 구조체클래스와 구조체를 알아보기 전에!객체 지향 프로그래밍클래스(틀) ➡️ 객체(실제 데이터)ex) 강아지 ➡️ 보리, 초코 클래스와 구조체class Dog &#123; &...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"21)🧰 Swift - 클래스와 구조체 사용 이유","uid":"5c94070a5d9f5427f6f278ddea8ab0ba","slug":"Allen/2022-09-29-Allen21","date":"2022-09-28T15:00:00.000Z","updated":"2023-03-31T10:33:14.607Z","comments":true,"path":"api/articles/Allen/2022-09-29-Allen21.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 클래스&#x2F;구조체를 사용하는 이유 사용하려는 모델의 설계 Data Transfer Object (DTO): 관련 데이터를 한 곳에 담는 역할 의미 있는 데이터의 묶음 Dat...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}