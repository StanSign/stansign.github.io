{"title":"20)🧰 Swift - Class & Struct","uid":"5debd5cacf7147ae1106516b70388c0b","slug":"Allen/2022-09-29-Allen20","date":"2022-09-28T15:00:00.000Z","updated":"2023-03-31T10:33:09.601Z","comments":true,"path":"api/articles/Allen/2022-09-29-Allen20.json","keywords":null,"cover":null,"content":"<p><a href=\"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8\">앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정)</a></p>\n<h1 id=\"클래스와-구조체\"><a href=\"#클래스와-구조체\" class=\"headerlink\" title=\"클래스와 구조체\"></a>클래스와 구조체</h1><h2 id=\"클래스와-구조체를-알아보기-전에\"><a href=\"#클래스와-구조체를-알아보기-전에\" class=\"headerlink\" title=\"클래스와 구조체를 알아보기 전에!\"></a>클래스와 구조체를 알아보기 전에!</h2><h3 id=\"객체-지향-프로그래밍\"><a href=\"#객체-지향-프로그래밍\" class=\"headerlink\" title=\"객체 지향 프로그래밍\"></a>객체 지향 프로그래밍</h3><p><strong>클래스(틀)</strong> ➡️  <strong>객체(실제 데이터)</strong><br>ex) 강아지 ➡️  보리, 초코</p>\n<h2 id=\"클래스와-구조체-1\"><a href=\"#클래스와-구조체-1\" class=\"headerlink\" title=\"클래스와 구조체\"></a>클래스와 구조체</h2><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Dog &#123;\n\t&#x2F;&#x2F; 속성 (property)\n\tvar name &#x3D; &quot;강아지&quot;\n\tvar weight &#x3D; 0.0\n\n\t&#x2F;&#x2F; 메서드 (method)\n\tfunc sit() &#123;\n\t\tprint(&quot;앉았습니다.&quot;)\n\t&#125;\n\n\tfunc layDown() &#123;\n\t\tprint(&quot;누웠습니다.&quot;)\n\t&#125;\n&#125;\n\nvar bori &#x3D; Dog()\nprint(bori.name) &#x2F;&#x2F; &quot;강아지&quot;\nbori.name &#x3D; &quot;보리&quot;\nprint(bori.name) &#x2F;&#x2F; &quot;보리&quot;\nvar choco &#x3D; Dog()\nprint(bori.name) &#x2F;&#x2F; &quot;강아지&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Bird &#123;\n\tvar name &#x3D; &quot;새&quot;\n\tvar weight &#x3D; 0.0\n\n\tfunc fly() &#123;\n\t\tprint(&quot;날아갑니다.&quot;)\n\t&#125;\n&#125;\n\nvar aBird &#x3D; Bird()\nprint(aBird.name) &#x2F;&#x2F; &quot;새&quot;\naBird.name &#x3D; &quot;참새&quot;\nprint(aBird.name) &#x2F;&#x2F; &quot;참새&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>인스턴스</strong>: 실제로 메모리에 할당되어 구체적 실체를 갖춘 것<ul>\n<li>Swift에서 클래스의 인스턴스를 <strong>객채(object)</strong> 라고 부름</li>\n<li>클래스의 인스턴스 &#x3D; 객체</li>\n<li>구조체의 인스턴스</li>\n<li>열거형의 인스턴스</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"클래스와-구조체의-차이는\"><a href=\"#클래스와-구조체의-차이는\" class=\"headerlink\" title=\"클래스와 구조체의 차이는?\"></a>클래스와 구조체의 차이는?</h3><ul>\n<li>메모리 저장 방식의 차이!</li>\n</ul>\n<h4 id=\"구조체\"><a href=\"#구조체\" class=\"headerlink\" title=\"구조체\"></a>구조체</h4><ul>\n<li><strong>값 형식</strong> (Value Type)</li>\n<li>인스턴스 데이터를 모두 <strong>스택</strong>에 저장</li>\n<li>값을 전달할 때마다 <strong>복사본을 생성</strong> (다른 메모리 공간 생성)</li>\n<li>스택의 공간에 저장, 스택 프레임 종료 시 메모리에서 자동 제거</li>\n<li>멤버와이즈 생성자 제공</li>\n<li>메서드 내에서 속성 변경 원칙적으로 불가능<ul>\n<li><code>mutating</code> 키워드를 사용하여 가능</li>\n</ul>\n</li>\n<li>소멸자 없음</li>\n<li><strong>상속 불가능</strong></li>\n</ul>\n<h4 id=\"클래스\"><a href=\"#클래스\" class=\"headerlink\" title=\"클래스\"></a>클래스</h4><ul>\n<li><strong>참조 형식</strong> (Reference Type)</li>\n<li>인스턴스 데이터를 <strong>힙</strong>에 저장, 해당 힙을 가리키는 변수는 스택에 저장<ul>\n<li>스택에 메모리 주소값 저장</li>\n</ul>\n</li>\n<li>값을 전달할 때 값 자체가 아니라 <strong>저장된 주소를 전달</strong></li>\n<li>힙의 공간에 전달, <strong>ARC</strong> 시스템을 통해 메모리 관리</li>\n<li>편의 생성자 존재</li>\n<li>메서드 내에서 속성 변경 가능</li>\n<li>소멸자 있음</li>\n<li><strong>상속 가능</strong>: 클래스의 유일한 특성</li>\n</ul>\n<h3 id=\"클래스와-구조체의-메모리\"><a href=\"#클래스와-구조체의-메모리\" class=\"headerlink\" title=\"클래스와 구조체의 메모리\"></a>클래스와 구조체의 메모리</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Person &#123;\n\tvar name &#x3D; &quot;사람&quot;\n&#125;\n\nstruct Animal &#123;\n\tvar name &#x3D; &quot;동물&quot;\n&#125;\n\nvar p &#x3D; Person()\nvar a &#x3D; Animal()\n\nprint(p.name) &#x2F;&#x2F; &quot;사람&quot;\nprint(a.name) &#x2F;&#x2F; &quot;동물&quot;\n\nvar p2 &#x3D; p\np.name &#x3D; &quot;혜리&quot;\nprint(p.name) &#x2F;&#x2F; &quot;혜리&quot;\nprint(p2.name) &#x2F;&#x2F; &quot;혜리&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"클래스와-구조체의-let과-var\"><a href=\"#클래스와-구조체의-let과-var\" class=\"headerlink\" title=\"클래스와 구조체의 let과 var\"></a>클래스와 구조체의 <code>let</code>과 <code>var</code></h3><ul>\n<li>구조체의 경우 <code>let</code>으로 선언하면, 스택 영역에 저장되어 있기 때문에 프로퍼티가 모두 <code>let</code>으로 선언된다.</li>\n<li>클래스의 경우 스택에는 메모리 주소만 담겨있기 때문에, 다른 클래스를 가리킬 수 없게 될 뿐, 프로퍼티 값들은 힙 영역에 있기 때문에 변경 가능하다.</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class PersonClass &#123;\n\tvar name &#x3D; &quot;사람&quot;\n\tvar age &#x3D; 0\n&#125;\n\nstruct AnimalStruct &#123;\n\tvar name &#x3D; &quot;동물&quot;\n\tvar age &#x3D; 0\n&#125;\n\nlet pclass &#x3D; PersonClass()\nlet astruct &#x3D; AnimalStruct()\n\npclass.name &#x3D; &quot;사람1&quot; &#x2F;&#x2F; Error 발생 X, 값이 변함!\nastruct.name &#x3D; &quot;동물1&quot; &#x2F;&#x2F; Error: Cannot assign to property<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"접문법-x2F-명시적-멤버-표현식-Explicit-Member-Expression-의-정확한-의미\"><a href=\"#접문법-x2F-명시적-멤버-표현식-Explicit-Member-Expression-의-정확한-의미\" class=\"headerlink\" title=\"접문법 &#x2F; 명시적 멤버 표현식 (Explicit Member Expression)의 정확한 의미\"></a>접문법 &#x2F; 명시적 멤버 표현식 (Explicit Member Expression)의 정확한 의미</h3><ul>\n<li>내부의 요소(클래스&#x2F;구조체의 인스턴스 멤버)에 접근한다.</li>\n<li>멤버는 속성 혹은 메서드</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">aBird.name\naBird.fly()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"주의\"><a href=\"#주의\" class=\"headerlink\" title=\"주의!\"></a>주의!</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>클래스의 내부에는 직접 메서드 실행문이 올 수 없다.</p></blockquote>\n<ul>\n<li>메서드 실행문은 메서드 정의 내부에서만 가능하다!</li>\n</ul>\n<h2 id=\"초기화의-의미\"><a href=\"#초기화의-의미\" class=\"headerlink\" title=\"초기화의 의미\"></a>초기화의 의미</h2><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var bori &#x3D; Dog()\nbori.name &#x3D; &quot;보리&quot;\nbori.weight &#x3D; 15.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>매번 위처럼 값을 넣어주기란 정말 귀찮을 수 있습니다. 프로퍼티가 많을수록 더욱 힘들어집니다.<br>선언할 때 값을 동시에 넣어줄 수는 없을까요?<br>당연히 됩니다! <strong>생성자(<code>init</code>)</strong> 을 사용한다면요.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Dog &#123;\n\tvar name: String\n\tvar weight: Double\n\n\tinit(name: String, weight: Double) &#123; &#x2F;&#x2F; Initializer\n\t\tself.name &#x3D; name\n\t\tself.weight &#x3D; weight\n\t&#125; &#x2F;&#x2F; self: 실제 인스턴스의 값\n\n\tfunc sit() &#123;\n\t\tprint(&quot;앉았습니다.&quot;)\n\t&#125;\n&#125;\n\nvar bori &#x3D; Dog(n: &quot;보리&quot;, w: 15.0)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"self\"><a href=\"#self\" class=\"headerlink\" title=\"self\"></a><code>self</code></h3><ul>\n<li>클래스&#x2F;구조체 내부에서 해당 인스턴스를 가리킴</li>\n<li>인스턴스 내에서 동일한 변수명, 상수명을 사용할 때 사용<ul>\n<li>가리키는 것을 명확하게 하기 위해</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"생성자의-특징\"><a href=\"#생성자의-특징\" class=\"headerlink\" title=\"생성자의 특징\"></a>생성자의 특징</h3><ul>\n<li>모든 속성(변수)를 초기화 해야한다.<ul>\n<li>생성자 실행 종료 시점에는 모든 속성의 초기값이 저장되어 있어야 한다.</li>\n</ul>\n</li>\n<li>클래스, 구조체, 열거형은 모두 설계도일 뿐이다.<ul>\n<li>실제 속성과 메서드를 사용하기 위해서는 초기화가 반드시 필요하다.</li>\n</ul>\n</li>\n<li>오버로딩을 지원한다.<ul>\n<li>다양한 파라미터의 조합으로 생성자를 여러개 구현할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"속성이-옵셔널-타입일-경우\"><a href=\"#속성이-옵셔널-타입일-경우\" class=\"headerlink\" title=\"속성이 옵셔널 타입일 경우\"></a>속성이 옵셔널 타입일 경우</h3><ul>\n<li>속성을 <code>nil</code>로 초기화할 수 있다.</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Dog() &#123;\n\tvar name: String?\n\tvar weight: Int\n\n\tinit(weight: Int) &#123;\n\t\tself.name &#x3D; &quot;강아지&quot;\n\t\tself.weight &#x3D; weight\n\t&#125;\n&#125;\n\nvar dog &#x3D; Dog(weight: 10)\n\nif let name &#x3D; dog.name &#123;\n\tprint(name)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"기본값-default-부여-가능\"><a href=\"#기본값-default-부여-가능\" class=\"headerlink\" title=\"기본값(default) 부여 가능\"></a>기본값(default) 부여 가능</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Dog() &#123;\n\tvar name: String\n\tvar weight: Int\n\n\tinit(name: String &#x3D; &quot;보리&quot;, weight: Int) &#123;\n\t\tself.name &#x3D; name\n\t\tself.weight &#x3D; weight\n\t&#125;\n&#125;\n\nvar dog1 &#x3D; Dog(name: &quot;아리&quot;, weight: 15)\nvar dog2 &#x3D; Dog(weight: 16)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"식별연산자-Identity-Operator\"><a href=\"#식별연산자-Identity-Operator\" class=\"headerlink\" title=\"식별연산자 (Identity Operator)\"></a>식별연산자 (Identity Operator)</h2><ul>\n<li>두 개의 참조가 같은 인스턴스를 가리키고 있는지를 비교하는 연산자</li>\n<li><code>===</code>, <code>!==</code></li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">print(dog1 &#x3D;&#x3D;&#x3D; dog2)\nprint(dog1 !&#x3D;&#x3D; dog2)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n","text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 클래스와 구조체클래스와 구조체를 알아보기 전에!객체 지향 프로그래밍클래스(틀) ➡️ 객체(실제 데이터)ex) 강아지 ➡️ 보리, 초코 클래스와 구조체class Dog &#123; &...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4\"><span class=\"toc-text\">클래스와 구조체</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-%EC%A0%84%EC%97%90\"><span class=\"toc-text\">클래스와 구조체를 알아보기 전에!</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\"><span class=\"toc-text\">객체 지향 프로그래밍</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4-1\"><span class=\"toc-text\">클래스와 구조체</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94\"><span class=\"toc-text\">클래스와 구조체의 차이는?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4\"><span class=\"toc-text\">구조체</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\"><span class=\"toc-text\">클래스</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC\"><span class=\"toc-text\">클래스와 구조체의 메모리</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%9D%98-let%EA%B3%BC-var\"><span class=\"toc-text\">클래스와 구조체의 let과 var</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A0%91%EB%AC%B8%EB%B2%95-x2F-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%A9%A4%EB%B2%84-%ED%91%9C%ED%98%84%EC%8B%9D-Explicit-Member-Expression-%EC%9D%98-%EC%A0%95%ED%99%95%ED%95%9C-%EC%9D%98%EB%AF%B8\"><span class=\"toc-text\">접문법 &#x2F; 명시적 멤버 표현식 (Explicit Member Expression)의 정확한 의미</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%A3%BC%EC%9D%98\"><span class=\"toc-text\">주의!</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%B4%88%EA%B8%B0%ED%99%94%EC%9D%98-%EC%9D%98%EB%AF%B8\"><span class=\"toc-text\">초기화의 의미</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#self\"><span class=\"toc-text\">self</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%9D%98-%ED%8A%B9%EC%A7%95\"><span class=\"toc-text\">생성자의 특징</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%86%8D%EC%84%B1%EC%9D%B4-%EC%98%B5%EC%85%94%EB%84%90-%ED%83%80%EC%9E%85%EC%9D%BC-%EA%B2%BD%EC%9A%B0\"><span class=\"toc-text\">속성이 옵셔널 타입일 경우</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92-default-%EB%B6%80%EC%97%AC-%EA%B0%80%EB%8A%A5\"><span class=\"toc-text\">기본값(default) 부여 가능</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%8B%9D%EB%B3%84%EC%97%B0%EC%82%B0%EC%9E%90-Identity-Operator\"><span class=\"toc-text\">식별연산자 (Identity Operator)</span></a></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"21)🧰 Swift - 클래스와 구조체 사용 이유","uid":"5c94070a5d9f5427f6f278ddea8ab0ba","slug":"Allen/2022-09-29-Allen21","date":"2022-09-28T15:00:00.000Z","updated":"2023-03-31T10:33:14.607Z","comments":true,"path":"api/articles/Allen/2022-09-29-Allen21.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 클래스&#x2F;구조체를 사용하는 이유 사용하려는 모델의 설계 Data Transfer Object (DTO): 관련 데이터를 한 곳에 담는 역할 의미 있는 데이터의 묶음 Dat...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"22)🧰 Swift - 속성(Property)","uid":"5947096696ce0c574876d193148e2ccd","slug":"Allen/2022-09-29-Allen22","date":"2022-09-28T15:00:00.000Z","updated":"2023-03-31T10:33:20.694Z","comments":true,"path":"api/articles/Allen/2022-09-29-Allen22.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 구조체와 클래스의 속성저장 속성 (Stored Properties)저장 속성 (Stored Properties) 값이 저장되는 일반적인 속성(변수) 특정한 메모리 공간을 가지고 ...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}