{"title":"11)🍎 Swift - View Controller의 Life Cycle","uid":"35531fd2e0969aee64527c9e13566622","slug":"Swift/2022-09-22-Swift11","date":"2022-09-21T15:00:00.000Z","updated":"2023-03-31T10:42:15.818Z","comments":true,"path":"api/articles/Swift/2022-09-22-Swift11.json","keywords":null,"cover":[],"content":"<p>오늘은 면접을 볼 일이 하나 있었는데요.. 대답을 제대로 못해서 끝나자마자 황급하게 공부하려고 작성해둔 목록들을 열어보았습니다. 전부 다 있더라고요.. ㅎㅎ;;<br>공부를 좀 더 열심히 했으면 답 할 수 있었을텐데 아쉽네요..</p>\n<p>그래서 오늘은 그 중에 하나였던 <strong>View Controller의 Life Cycle</strong>에 대해서 알아보려고 합니다.</p>\n<h1 id=\"View-Controller의-Life-Cycle\"><a href=\"#View-Controller의-Life-Cycle\" class=\"headerlink\" title=\"View Controller의 Life Cycle\"></a>View Controller의 Life Cycle</h1><p>View Controller도 다른 모든 객체들처럼 <code>init</code>과 <code>deinit</code> 과정을 거쳐야합니다. 그리고 Life Cycle에 해당되는 내용 중 어떤 것은 저희에게 아주아주 익숙한 모습이죠.<br>View Controller 파일을 처음 만들면 보통 아래와 같이 코드가 자동으로 입력되어 있습니다. 너무 익숙한 친구죠?</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">import UIKit\n\nclass HomeViewController: UIViewController &#123;\n\toverride func viewDidLoad() &#123;\n\t\tsuper.viewDidLoad()\n\t\t&#x2F;&#x2F; Do any additional setup after loading the view, typically from a nib.\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>말 그대로 View가 Load 될 때 실행되는 코드인데요, View Controller의 Life Cycle에는 이 <code>viewDidLoad</code>외에도 많은 함수들이 있습니다.</p>\n<p><img src=\"https://i.imgur.com/W10j0YX.jpg\"></p>\n<p>이해하기 쉽게 메소드들의 이름들이 직관적으로 명명되어 있는 걸 볼 수 있네요. 그럼 하나하나 살펴봅시다. 별 거 없답니다!</p>\n<h2 id=\"viewDidLoad\"><a href=\"#viewDidLoad\" class=\"headerlink\" title=\"viewDidLoad\"></a>viewDidLoad</h2><p>가장 익숙한 친구부터 알아봅시다. 애플의 설명에 따르면 <code>viewDidLoad</code>는</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Controller의 View가 메모리에 로드된 후에 호출됩니다.</p></blockquote>\n<p>라고 합니다. View를 표현하려면 우선 로드해야하고, 메모리에 리소스를 올려주어야 하겠죠. 해당 과정이 모두 끝난 후에 자동으로 호출되는 메소드가 바로 <code>viewDidLoad</code>인 것입니다.<br>그래서 보통 <code>viewDidLoad</code>에서는 화면에 필요한 데이터들을 로드하거나 View가 로드된 후 딱 한 번만 실행해야 하는 코드가 있을 경우 이 곳에서 호출하면 됩니다.</p>\n<h2 id=\"viewWillAppear\"><a href=\"#viewWillAppear\" class=\"headerlink\" title=\"viewWillAppear\"></a>viewWillAppear</h2><p>View가 로드된 후에는 어떤 일이 일어날까요?<br>바로 <code>viewWillAppear</code>가 호출됩니다. View가 화면에 띄워지기 직전에 호출되는 메소드인데요, <code>viewDidLoad</code>와 호출 시점이 굉장히 유사해보입니다.</p>\n<p>하지만 Appear와 Load라는 명확하게 다른 시점을 갖고 있는 만큼 아주 큰 차이가 있습니다. <code>viewDidLoad</code>는 View가 로드된 후 딱 한 번만 호출되기 때문에, 여러 View를 로드하고 서로를 오갈때는 호출되지 않습니다.<br>반면 <code>viewWillAppear</code>는 여러 View를 오갈 때도 어쨋던 화면에 띄워지는 것이기 때문에 호출됩니다.</p>\n<p>따라서 View가 화면에 뜰 때마다 수행되어야 하는 기능이 있다면 <code>viewWillAppear</code>에 구현해주면 됩니다!</p>\n<h2 id=\"viewDidAppear\"><a href=\"#viewDidAppear\" class=\"headerlink\" title=\"viewDidAppear\"></a>viewDidAppear</h2><p><code>viewDidAppear</code>는 말 그대로 View가 화면에 띄워진 직후에 호출됩니다. View가 화면에 띄워질 때마다 수행되어야 할 후처리 기능이 있다면 바로 여기에 구현해주면 됩니다.</p>\n<h2 id=\"viewWillDisappear-x2F-viewDidDisappear\"><a href=\"#viewWillDisappear-x2F-viewDidDisappear\" class=\"headerlink\" title=\"viewWillDisappear &#x2F; viewDidDisappear\"></a>viewWillDisappear &#x2F; viewDidDisappear</h2><p>사실 위의 <code>viewWillAppear</code>와 <code>viewDidAppear</code> 메소드를 이해하셨다면, 이 두 메소드는 뽀너스입니다. View가 사라질 때마다 동일한 방식으로 호출되는 메소드이기 때문이죠.</p>\n<h5 id=\"참고\"><a href=\"#참고\" class=\"headerlink\" title=\"참고\"></a>참고</h5><p><img src=\"https://zeddios.tistory.com/43\" alt=\"iOS ) View Controller의 생명주기(Life-Cycle)\"><br><img src=\"https://developer.apple.com/documentation/uikit/uiviewcontroller/1621495-viewdidload/\" alt=\"Apple Developer Documentation\"></p>\n","text":"오늘은 면접을 볼 일이 하나 있었는데요.. 대답을 제대로 못해서 끝나자마자 황급하게 공부하려고 작성해둔 목록들을 열어보았습니다. 전부 다 있더라고요.. ㅎㅎ;;공부를 좀 더 열심히 했으면 답 할 수 있었을텐데 아쉽네요.. 그래서 오늘은 그 중에 하나였...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":79,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":79,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#View-Controller%EC%9D%98-Life-Cycle\"><span class=\"toc-text\">View Controller의 Life Cycle</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#viewDidLoad\"><span class=\"toc-text\">viewDidLoad</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#viewWillAppear\"><span class=\"toc-text\">viewWillAppear</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#viewDidAppear\"><span class=\"toc-text\">viewDidAppear</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#viewWillDisappear-x2F-viewDidDisappear\"><span class=\"toc-text\">viewWillDisappear &#x2F; viewDidDisappear</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%B0%B8%EA%B3%A0\"><span class=\"toc-text\">참고</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"5)🧰 Swift - 기본연산자","uid":"7027a84620c87c923c1bc04e73937f59","slug":"Allen/2022-09-23-Allen05","date":"2022-09-22T15:00:00.000Z","updated":"2023-03-31T10:31:26.393Z","comments":true,"path":"api/articles/Allen/2022-09-23-Allen05.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 기본연산자연산자연산자(Operator) 기초 a + b a, b: 피연산자(operand) +: 연산자(operator) 단항연산자: 단일 대상의 바로 앞&#x2F;뒤에 위치 +...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":79,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":79,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"3)🧰 Swift - 데이터 타입","uid":"a04236f3e453274a957b21632bdbd41b","slug":"Allen/2022-09-21-Allen03","date":"2022-09-20T15:00:00.000Z","updated":"2023-03-31T10:31:05.436Z","comments":true,"path":"api/articles/Allen/2022-09-21-Allen03.json","keywords":null,"cover":[],"text":" 변수와 상수변수 (Variables)변수의 의미 변수: 데이터를 담을 수 있는 공간 프로그램 동작의 첫 번째 단계는 메모리에 값(데이터)를 저장하는 것 var a &#x3D; 3 &#x2F;&#x2F; a에 3을 저장 var b &#x3D; 7 &#...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":79,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":79,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}