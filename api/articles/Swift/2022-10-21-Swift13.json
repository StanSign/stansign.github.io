{"title":"13)🍎 Swift - ScrollView 오토 레이아웃으로 구현하기","uid":"28d16104e44090134cb96751618130c4","slug":"Swift/2022-10-21-Swift13","date":"2022-10-20T15:00:00.000Z","updated":"2023-03-31T10:42:31.441Z","comments":true,"path":"api/articles/Swift/2022-10-21-Swift13.json","keywords":null,"cover":[],"content":"<p><code>UIScrollView</code>는 스토리보드에서 사용할 때마다 에러를 내는 UI 컴포넌트 중 대표적인 친구입니다.<br>하지만 언제나처럼 컴퓨터는 잘못이 없죠.<br>제대로 알고 사용하지 못해서 일어나는 장애물이라고 생각하고 머리를 정리할 겸 단계별로 알아보겠습니다.</p>\n<h1 id=\"UIScrollView\"><a href=\"#UIScrollView\" class=\"headerlink\" title=\"UIScrollView\"></a>UIScrollView</h1><p><code>UIScrollView</code>가 뭔지부터 알아보겠습니다.<br><code>UIScrollView</code>는 화면의 크기를 벗어나는 콘텐츠를 표현할 때 <strong>스크롤</strong>을 통해서 더 많은 정보를 탐색할 수 있도록 해주는 컴포넌트입니다.</p>\n<p>이 <code>UIScrollView</code>는 굉장히 중요한 녀석입니다.<br>저희가 매일같이 사용하는 <code>UITableView</code>, <code>UICollectcionView</code>와 같은 스크롤이 가능한 컴포넌트들의 Super Class이기 때문이죠.<br>그래서 이런 테이블뷰와 컬렉션뷰에서 스크롤뷰의 메서드와 속성들에 접근할 수 있습니다.</p>\n<p>스크롤뷰는 두 가지 레이아웃으로 나뉘어져 있습니다.<br><code>Content Layout</code>은 스크롤되며 화면에 표현될 컨텐츠들의 레이아웃을 결정하는 레이아웃입니다.<br><code>Frame Layout</code>은 화면 안에서 실제로 표현되는 스크롤뷰의 크기와 위치를 결정하는 레이아웃입니다.</p>\n<h2 id=\"ScrollView-오토-레이아웃-잡아주기\"><a href=\"#ScrollView-오토-레이아웃-잡아주기\" class=\"headerlink\" title=\"ScrollView 오토 레이아웃 잡아주기\"></a>ScrollView 오토 레이아웃 잡아주기</h2><img src=\"https://i.imgur.com/yfFoTpi.png\" width=\"550\">\n\n<p>위 사진처럼 <code>UIScrollView</code>를 하나 넣어주고 다른 <code>View</code>들과 마찬가지로 오토레이아웃을 잡아줍니다.<br>그런데 다른 <code>View</code>들과는 다르게 바로 적용이 안되는 것처럼 보입니다?<br>실질적인 Contents가 정의되어 있지 않아서 그런 것이라고 추정하고 있지만 정확한 이유는 잘 모르겠습니다.<br>알게 되면 추가 내용으로 적어두겠습니다..!<br>아무튼  Constraints를 보면 잘 적용되어 있는 것을 확인할 수 있습니다.</p>\n<img src=\"https://i.imgur.com/DJeenEA.png\" width=\"350\">\n\n<h2 id=\"View-추가하고-Layout-Guide-설정하기\"><a href=\"#View-추가하고-Layout-Guide-설정하기\" class=\"headerlink\" title=\"View 추가하고 Layout Guide 설정하기\"></a>View 추가하고 Layout Guide 설정하기</h2><p>스크롤뷰만 있으면 아무 쓸모가 없겠죠?<br>실제로 스크롤 될 <code>View</code>를 넣어봅시다.<br><img src=\"https://i.imgur.com/LpePYMu.png\" width=\"550\"></p>\n<p>저는 보기 편하게 스크롤뷰와 겹치게 위치를 잡아주고 이름도 Content View라고 바꿔주었습니다.<br>필수 과정은 아닙니다!</p>\n<p>스크롤 될 실제 컨텐츠를 담을 <code>View</code>이기 때문에 Content Layout Guide를 이 <code>View</code>의 Layout과 맞춰줄 겁니다.<br>일종의 배경이자 도화지 역할을 하는 Content View의 크기를 컴파일러에게 알려주는 과정인거에요!</p>\n<img src=\"https://i.imgur.com/wOsENlQ.png\" width=\"350\">\n\n<p>Content View를 <strong>Ctrl키</strong>를 누른 상태로 <strong>Content Layout Guide</strong>까지 끌어당기면 두 요소간의 레이아웃을 설정해줄 수 있습니다.</p>\n<img src=\"https://i.imgur.com/nKGGk8U.png\" width=\"400\">\n\n<p>Content View의 크기가 곧 스크롤뷰에 들어갈 컨텐츠의 크기이기 때문에 <strong>Leading, Top, Trailing, Bottom</strong>의 Spacing을 모두 <strong>0</strong>으로 설정해줍시다.</p>\n<img src=\"https://i.imgur.com/35ivGBf.png\" width=\"350\">\n\n<p>현재 스토리보드에 놓여진 값 그대로 Constant 값이 들어가기 때문에 모두 0이 맞는지 확인해보는 작업이 필요합니다!</p>\n<h2 id=\"Scroll-View의-방향-정해주기\"><a href=\"#Scroll-View의-방향-정해주기\" class=\"headerlink\" title=\"Scroll View의 방향 정해주기\"></a>Scroll View의 방향 정해주기</h2><p>저는 세로로 스크롤되는 화면을 만들고 싶습니다.<br>화면이 세로로 스크롤될 때 넓이와 높이 중에 고정되어 있는 값은 넓이죠?</p>\n<p>스크롤뷰의 <strong>Frame Layout Guide</strong>는 <strong>넓이가 고정</strong>되어 있다면 <strong>세로로 스크롤</strong>되게 작동합니다.<br>반대로 <strong>높이가 고정</strong>되어 있다면 <strong>가로로 스크롤</strong>할 수 있습니다.</p>\n<p>왜 Frame Layout Guide를 설정해줘야 하는지 헷갈릴 수 있는데요, <strong>Frame Layout</strong>은 실제 스크롤뷰가 표현될 Layout이라고 했었습니다.</p>\n<p><strong>Frame Layout의 넓이</strong>를 <strong>컨텐츠의 넓이</strong>와 같게 설정하면 컴파일러 Frame 밖에 가로 형태로 표현할 컨텐츠가 더 이상 없다는 걸 알 수 있겠죠?<br>그래서 가로는 고정되고 세로로만 스크롤되게 됩니다.</p>\n<img src=\"https://i.imgur.com/4X4dnja.png\" width=\"350\">\n\n<p>위에서 Content Layout을 잡아줬을 때처럼 Content View를 <strong>Ctrl키</strong>를 누른채로 <strong>Frame Layout Guide</strong>에 끌어놔줍니다.</p>\n<img src=\"https://i.imgur.com/izdGsY0.png\" width=\"350\">\n\n<p>그러면 나오는 Constraint 설정 창에서 <strong>Equal Width</strong>를 선택해서 가로를 갖게 만들어줍니다.</p>\n<img src=\"https://i.imgur.com/AxjacW3.png\" width=\"350\">\n\n<p>물론 위에서처럼 수치가 현재 스토리보드에 맞게 들어가기 때문에 한 번 확인해주어야 합니다.<br>이번에는 비율로서 다뤄지는 값이기 때문에 Multiplier가 1인지 확인해줍니다!</p>\n<h2 id=\"높이-정해주기\"><a href=\"#높이-정해주기\" class=\"headerlink\" title=\"높이 정해주기\"></a>높이 정해주기</h2><p>여기까지가 스크롤뷰를 스토리보드에서 설정해주는 방법입니다.<br>그런데 아직 빨간 에러가 사라지지 않았죠?<br>컨텐츠의 <strong>넓이</strong>는 스크롤뷰의 <strong>Frame Layout</strong>과 같게 만들어주었기 때문에 정해졌지만, <strong>높이</strong>는 아직 정해주지 않았기 때문입니다.</p>\n<p>따라서 Content View의 높이를 고정 값으로 정해주거나, 실제로 내부에 컴포넌트들을 집어넣어주면 해당 에러는 사라집니다.</p>\n<p>추천하는 방법으로는 <strong>Content View</strong>에 <strong>높이</strong> 값을 주되, <strong>Priority</strong>를 내려주어서 정해진 높이 이상이 필요하면 동적으로 늘어나게 하는 것이 좋습니다.</p>\n<p><img src=\"https://i.imgur.com/ZJHbFt1.png\"></p>\n<p>Content View를 <strong>Ctrl키</strong>를 누른채로 끌었다가 Content View 본인에게 놔줍니다.<br>그 상태에서 <strong>Height</strong>를 설정해주면, 현재 스토리보드에 설정된 높이가 Constraint에 추가됩니다.</p>\n<img src=\"https://i.imgur.com/y7gCOHE.png\" width=\"350\">\n\n<p><strong>Priority</strong>도 마찬가지로 Constraint에서 수정해줄 수 있습니다. 기본값인 1000에서 <strong>낮은 값</strong>으로 설정해줍시다!<br>이 값은 내부에 들어올 컴포넌트들의 높이 Priority보다 낮으면 됩니다.<br>저는 넉넉하게 250으로 설정해주었습니다.</p>\n<p><img src=\"https://i.imgur.com/H6L2VbB.png\"></p>\n<p>이렇게 에러가 없는 깔끔한 스토리보드가 되었네요.</p>\n<p><code>UIScrollView</code>는 다루기 굉장히 까다로운 녀석이지만, 개념 자체는 쉬운 것 같아요.<br>개념을 이해하고 다룬다면 익숙해지는데 많은 시간이 걸리지 않을 것이라고 생각합니다!</p>\n","text":"UIScrollView는 스토리보드에서 사용할 때마다 에러를 내는 UI 컴포넌트 중 대표적인 친구입니다.하지만 언제나처럼 컴퓨터는 잘못이 없죠.제대로 알고 사용하지 못해서 일어나는 장애물이라고 생각하고 머리를 정리할 겸 단계별로 알아보겠습니다. UIS...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":77,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":77,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UIScrollView\"><span class=\"toc-text\">UIScrollView</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ScrollView-%EC%98%A4%ED%86%A0-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%9E%A1%EC%95%84%EC%A3%BC%EA%B8%B0\"><span class=\"toc-text\">ScrollView 오토 레이아웃 잡아주기</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#View-%EC%B6%94%EA%B0%80%ED%95%98%EA%B3%A0-Layout-Guide-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">View 추가하고 Layout Guide 설정하기</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Scroll-View%EC%9D%98-%EB%B0%A9%ED%96%A5-%EC%A0%95%ED%95%B4%EC%A3%BC%EA%B8%B0\"><span class=\"toc-text\">Scroll View의 방향 정해주기</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EB%86%92%EC%9D%B4-%EC%A0%95%ED%95%B4%EC%A3%BC%EA%B8%B0\"><span class=\"toc-text\">높이 정해주기</span></a></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"35)🧰 Swift - 클로저 (Closure)","uid":"05c7a8ad61ab635112e2267f3af9157c","slug":"Allen/2022-11-01-Allen35","date":"2022-10-31T15:00:00.000Z","updated":"2023-03-31T10:34:46.389Z","comments":true,"path":"api/articles/Allen/2022-11-01-Allen35.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 클로저 (Closure)클로저의 개념 및 1급 객체 취급클로저를 보기 전에기존의 함수의 타입 표기와 사용법은 다음과 같습니다. () -&gt; (), () -&gt; Void (...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":77,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":77,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"34)🧰 Swift - 중첩 타입 (Nested Types)","uid":"1ed6334be43ee572a89c87ad1476b5f3","slug":"Allen/2022-10-15-Allen34","date":"2022-10-14T15:00:00.000Z","updated":"2023-03-31T10:34:24.190Z","comments":true,"path":"api/articles/Allen/2022-10-15-Allen34.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 중첩 타입 (Nested Types)왜 사용할까? 특정 타입 안에서만 사용하기 위해 내부의 타입은 외부의 타입과 관계가 있고, 외부의 타입 없이는 의미가 없을 수 있다. 타입 간...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":77,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":77,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}