{"title":"17)🍎 Swift - Property Wrapper","uid":"d307c77550c3e506aba3109e585568f0","slug":"Swift/2022-12-26-Swift17","date":"2022-12-25T15:00:00.000Z","updated":"2023-03-31T10:43:12.067Z","comments":true,"path":"api/articles/Swift/2022-12-26-Swift17.json","keywords":null,"cover":null,"content":"<h1 id=\"Property-Wrapper\"><a href=\"#Property-Wrapper\" class=\"headerlink\" title=\"Property Wrapper\"></a>Property Wrapper</h1><p>오늘은 UserDefaults를 어떻게 하면 조금이라도 더 편하게 사용할 수 있을까 고민하다가 아주 좋은 친구를 발견했습니다.</p>\n<p>바로 Property Wrapper라는 친구인데요.</p>\n<p>이 친구는 SwiftUI와 Combine의 기능을 UIKit에서도 적용할 수 있도록 Swift 5.1버전에 등장했습니다.</p>\n<p>많은 게시물에서 SwiftUI의 <code>@State</code>를 예시로 들며 설명하고 있는데, 저는 경험이 없어서.. 넘어가구요…</p>\n<p>이름을 보면 프로퍼티를 감싸서 뭔가를 하는 친구인 것 같죠?</p>\n<p>바로 알아보도록 하겠습니다.</p>\n<h2 id=\"용도\"><a href=\"#용도\" class=\"headerlink\" title=\"용도\"></a>용도</h2><p>일단 어떤 개념으로 사용되는 건지부터 알아봅시다.</p>\n<p>Swift에는 <code>lazy</code>프로퍼티 라는 것이 있습니다.</p>\n<p>해당 프로퍼티가 사용될 때 로드를 시작하도록 해주는 키워드이죠.</p>\n<p>이 <code>lazy</code> 키워드는 모든 키워드들에 붙일 수 있고 동일한 동작을 합니다.</p>\n<p>만약 이 키워드가 없다면 해당 기능을 구현하기 위해서 어떤 과정을 밟게 될까요?</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func getMyClass() -&gt; MyClass &#123;\n\tif self.myVar &#x3D;&#x3D; nil &#123;\n\t\tself.myVar &#x3D; MyClass()\n\t&#125;\n\treturn self.myVar\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위와 같이 해당 프로퍼티가 초기화가 됐는지 확인을 한 후에 값을 불러오는 함수를 만들어 모든 프로퍼티에 직접 구현하며 적용시켜주어야 할 거에요.</p>\n<p>다행히도 위 동작을 우리는</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">lazy var myClass &#x3D; MyClass()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>이렇게 간편하게 구현할 수 있습니다.</p>\n<p>Property Wrapper는 <code>lazy</code>와 같이 동일한 동작을 하는 프로퍼티들에 대해서 공통적으로 미리 구현된 동작들을 부여할 수 있는 기능입니다.</p>\n<h2 id=\"정의\"><a href=\"#정의\" class=\"headerlink\" title=\"정의\"></a>정의</h2><p>프로퍼티를 감싸는 기능이기 때문에 우선 프로퍼티를 가질 수 있는 class, struct, enum 앞에 <code>@propertyWrapper</code>를 붙여 정의합니다.</p>\n<p>예시로 UserDefaults로 자동으로 동기화 작업을 하는 프로퍼티를 만들어보겠습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">@propertyWrapper\nstruct UserDeafult&lt;T&gt; &#123;\n\tvar key: String\n\tvar defaultValue: T\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>그런데 이렇게까지만 하면 해당 프로퍼티에 변경이 있을 때마다 어떤 작업이 실행되는지에 대한 명시가 없죠.</p>\n<p>그래서 에러가 발생하고, 그 에러를 살펴보면 <code>wrappedValue</code>가 정의되지 않았다는 것을 알 수 있습니다.</p>\n<p><code>wrappedValue</code>를 정의해주고,  <code>get-set</code>을 사용하여 해당 프로퍼티가 변경될 때마다 발생하는 로직을 넣어줍니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var wrappedValue: T &#123;\n\tget &#123;\n\t\tUserDefaults.standard.object(forKey: key) as? T ?? defaultValue\n\t&#125;\n\tset &#123;\n\t\tUserDefaults.standard.set(newValue, forKey: key)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이제 합쳐볼까요?</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">@propertyWrapper\nstruct UserDefault&lt;T&gt; &#123;\n\tvar key: String\n\tvar defaultValue: T\n\n\tvar wrappedValue: T &#123;\n\t\tget &#123;\n\t\t\tUserDefaults.standard.object(forKey: key) as? T ?? defaultValue\n\t\t&#125;\n\t\tset &#123;\n\t\t\tUserDefaults.standard.get(newValue, forKey: key)\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"사용\"><a href=\"#사용\" class=\"headerlink\" title=\"사용\"></a>사용</h2><p>자 그럼 적용은 어떻게 할까요?</p>\n<p><code>lazy</code>와 마찬가지로 앞에 명시해주면 됩니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct AppData &#123;\n\t@UserDefault(key: &quot;isLoggedIn&quot;, defaultValue: false)\n\tstatic var isLoggedIn: Bool\n\n\t@UserDefault(key: &quot;username&quot;, defaultValue: &quot;&quot;)\n\tstatic var username: String\n&#125;\n\nAppData.isLoggedIn &#x3D; true\nprint(AppData.isLoggedIn) &#x2F;&#x2F; true\n\nprint(AppData.username) &#x2F;&#x2F; &quot;&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>조금 더 나아가서 커스텀 타입에도 적용될 수 있도록 바꿔봅시다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">@propertyWrapper\nstruct UserDefault&lt;T: Codable&gt; &#123;\n\t&#x2F;&#x2F; key와 default 값은 바뀔 일이 없으니 let으로 변경\n\tprivate let key: String\n\tprivate let defaultValue: T\n\n\tinit(key: String, defaultValue: T) &#123;\n\t\tself.key &#x3D; key\n\t\tself.defaultValue &#x3D; defaultValue\n\t&#125;\n\n\tvar wrappedValue: T &#123;\n\t\tget &#123;\n\t\t\tguard let data &#x3D; Userdefaults.standard.object(forKey: key) as? Data else &#123;\n\t\t\t\treturn defaultValue\n\t\t\t&#125;\n\t\t\tlet value &#x3D; try? JSONDecoder().decode(T.self, from: data)\n\t\t\treturn value ?? defaultValue\n\t\t&#125;\n\t\tset &#123;\n\t\t\tlet data &#x3D; try? JSONEncoder().encode(newValue)\n\t\t\tUserDefaults.standard.set(data, forKey: key)\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 자동으로 UserDefaults로 값을 동기화시켜주는 Property Wrapper를 만들고 적용해보았습니다.</p>\n<h3 id=\"참고-게시물\"><a href=\"#참고-게시물\" class=\"headerlink\" title=\"참고 게시물\"></a>참고 게시물</h3><p><a href=\"https://medium.com/better-programming/create-the-perfect-userdefaults-wrapper-using-property-wrapper-42ca76005ac8\"># Create the Perfect UserDefaults Wrapper Using Property Wrapper</a></p>\n","text":"Property Wrapper오늘은 UserDefaults를 어떻게 하면 조금이라도 더 편하게 사용할 수 있을까 고민하다가 아주 좋은 친구를 발견했습니다. 바로 Property Wrapper라는 친구인데요. 이 친구는 SwiftUI와 Combine의 ...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Property-Wrapper\"><span class=\"toc-text\">Property Wrapper</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%9A%A9%EB%8F%84\"><span class=\"toc-text\">용도</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%A0%95%EC%9D%98\"><span class=\"toc-text\">정의</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%82%AC%EC%9A%A9\"><span class=\"toc-text\">사용</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%B0%B8%EA%B3%A0-%EA%B2%8C%EC%8B%9C%EB%AC%BC\"><span class=\"toc-text\">참고 게시물</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"18)🍎 Swift - 다운샘플링","uid":"dd29b53b3fa8ec1be54827ce6b92cee8","slug":"Swift/2022-12-27-Swift18","date":"2022-12-26T15:00:00.000Z","updated":"2023-03-31T10:46:00.205Z","comments":true,"path":"api/articles/Swift/2022-12-27-Swift18.json","keywords":null,"cover":[],"text":"다운샘플링으로 메모리 효율적인 이미지 처리하기이전 게시물에서 알아보았던 PHPicker를 사용해서 이미지를 처리하던 중 아래와 같은 에러를 마주쳤습니다. Swift가 허용한 4,194,304 바이트보다 큰 데이터를 UserDefaults에 저장할 수 ...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"16)🍎 Swift - PHPicker","uid":"79bbbda6f45f64c92a28adda5128658d","slug":"Swift/2022-12-22-Swift16","date":"2022-12-21T15:00:00.000Z","updated":"2023-03-31T10:43:04.419Z","comments":true,"path":"api/articles/Swift/2022-12-22-Swift16.json","keywords":null,"cover":[],"text":"PHPicker토이 프로젝트를 진행하던 중에 이미지를 선택해서 업로드하는 동작이 필요했습니다. 당연히 처음에는 자료가 많은 UIImagePickerController를 사용하고자 했습니다. 이 때는 PHPicker라는 모듈이 있는지도 몰랐었죠. 기능이...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}