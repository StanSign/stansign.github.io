{"title":"12)🍎 Swift - Bounds vs Frame","uid":"00b2e378bc58cce5d9b436f772921098","slug":"Swift/2022-10-11-Swift12","date":"2022-10-10T15:00:00.000Z","updated":"2023-03-31T10:42:24.785Z","comments":true,"path":"api/articles/Swift/2022-10-11-Swift12.json","keywords":null,"cover":[],"content":"<p>오늘은 <code>frame</code>과 <code>bounds</code>의 실체와 차이점에 대해 공부해볼거에요.<br>두 친구 모두 코드 상에서 <code>UIView</code>에 변경을 가할 때 자주 보게 되는 용어들이죠.<br>근데 지금까지는 그냥 둘 다 써보고 제가 원하던 프로퍼티가 있으면 사용하곤 했습니다.<br><code>view.bounds.width = 32.0</code>와 같은 작업들이요.</p>\n<p>그래서 두 가지를 공식 문서에서 찾아보았습니다.</p>\n<p><img src=\"https://i.imgur.com/PKxVM3U.png\"></p>\n<p><img src=\"https://i.imgur.com/rCHISlC.png\"></p>\n<p>우선 눈에 띄는 점은 두 가지 모두 <code>CGRect</code>라는 타입으로 정의되어 있다는 점입니다.<br><code>CGRect</code> 이 친구도 뭔가 아무 생각없이 사용했었는데 제대로 알아본 적은 없네요.<br>그래서 먼저 <code>CGRect</code>에 대해서 알아보겠습니다.</p>\n<h1 id=\"CGRect\"><a href=\"#CGRect\" class=\"headerlink\" title=\"CGRect\"></a>CGRect</h1><p>일단 반복된 사용으로 인해서 이 아이가 대충 <code>View</code>의 영역을 표현한다는 점은 알고 있습니다. 제공되는 생성자들을 보면</p>\n<ul>\n<li><code>init(origin: CGPoint, size: CGSize)</code></li>\n<li><code>init(x: Double, y: Double, width: Double, height: Double)</code></li>\n<li><code>init(x: Int, y: Int, Width: Int, height: Int)</code></li>\n<li><code>init(x: CGFloat, y: CGFloat, width: CGFloat, height: CGFloat)</code><br>이런 식으로 좌표값과 넓이, 높이를 받고 있거든요.</li>\n</ul>\n<p>그리고 이제 애플의 설명을 봅시다.</p>\n<p><img src=\"https://i.imgur.com/jYjkyvc.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A structure that contains the location and dimensions of a rectangle.</p></blockquote>\n<p>우선 <code>CGRect</code>는 다른 기본 타입들과 마찬가지로 구조체인 것을 확인할 수 있습니다. 그리고 <strong>사각형의 위치와 크기</strong> 정보를 지니는 구조체라고 하네요!</p>\n<p>어느정도 감으로 알던 거의 그대로네요. 그리고 Rect는 사각형을 표현하는 작명이였습니다.</p>\n<p>그러면 이제 다 알아냈어요. <code>CGRect</code>는 어떤 한 <strong>기준점(origin)</strong> 과 <strong>크기(size)</strong> 를 갖고 사각형을 표현하는 구조체인 것이죠.</p>\n<p>가장 첫 번째 생성자를 보면 <code>CGPoint</code> 타입의 기준점과 <code>CGSize</code> 타입의 크기를 지정해주는 것을 볼 수 있습니다. </p>\n<p>이 두가지에 대해서도 간략하게 살펴보면,</p>\n<ul>\n<li><code>CGPoint</code>: <strong>좌표</strong>를 나타내는 타입<ul>\n<li>ex: (1, 2)</li>\n</ul>\n</li>\n<li><code>CGSize</code>: <strong>크기</strong>를 나타내는 타입<ul>\n<li>ex: 15(width) * 4(height)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/o8l8cZ1.png\"></p>\n<p>사각형은 도형이기 때문에 그림으로 볼 때 가장 이해가 빠르겠죠?<br>위 사진과 같이 기준점(origin)과 그 기준점을 기준으로 사각형을 그릴 크기(size) 값을 갖는 것이 바로 <code>CGRect</code>인 것입니다.<br>쉽게 말하면 <code>CGRect</code>는 “어디에 어떤 크기로 UI 요소를 그리겠다.”를 사각형 영역으로 지정해 줄 때 사용하는 구조체입니다.</p>\n<p>한 가지만 유의하면 될 것 같습니다.<br><code>width</code>는 기준점을 기준으로 오른쪽이 positive, <code>height</code>는 기준점을 기준으로 아래쪽이 positive입니다.</p>\n<h1 id=\"frame-bounds\"><a href=\"#frame-bounds\" class=\"headerlink\" title=\"frame, bounds\"></a><code>frame</code>, <code>bounds</code></h1><p>이제 다시 돌아가서 <code>frame</code>과 <code>bounds</code>에 대해서 알아보겠습니다.<br>각각의 설명을 한 번 볼까요?</p>\n<h3 id=\"frame\"><a href=\"#frame\" class=\"headerlink\" title=\"frame\"></a>frame</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The frame rectangle, which describes the view’s location and size in its superview’s coordinate system.</p></blockquote>\n<p><code>frame</code>은 <code>superview</code>(상위 view)의 좌표 안에서 <code>view</code>의 위치와 크기를 정의합니다.</p>\n<h3 id=\"bounds\"><a href=\"#bounds\" class=\"headerlink\" title=\"bounds\"></a>bounds</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The bounds rectangle, which describes the view’s location and size in its own coordinate system.</p></blockquote>\n<p><code>bounds</code>는 본인의 고유한 좌표 안에서 위치와 크기를 정의합니다.</p>\n<p>아직 뜻은 정확하게 모르겠지만 가장 중요한 차이점이 보입니다.<br><code>frame</code>은 <strong>상위 view의 좌표</strong> 안에서 <code>CGRect</code>가 정의된다는 것이고, <code>bounds</code>는 <strong>고유한 좌표</strong> 안에서 <code>CGRect</code>가 정의된다는 것이죠.</p>\n<p>그래도 감이 조금은 오는 <code>frame</code>부터 확인해보겠습니다. </p>\n<img src=\"https://i.imgur.com/Yti7Cd9.png\" width=\"500\">\n\n<h1 id=\"Frame\"><a href=\"#Frame\" class=\"headerlink\" title=\"Frame\"></a>Frame</h1><p>이렇게 생긴 화면 구성이 있다고 가정해봅시다.</p>\n<p><img src=\"https://i.imgur.com/u2ZB1My.png\"><br>“ SuperView ➡️ ParentView ➡ ChildView “의 계층 구조를 갖고 있습니다. 각각의 하위 view는 상위 view에 nested되어 있습니다.</p>\n<p>지금 이 상태에서 ParentView와 ChildView의 <code>frame</code>을 출력하면 어떤 값이 나오는지 한 번 볼게요.</p>\n<p><img src=\"https://i.imgur.com/BVvqJyo.png\"></p>\n<p><code>frame</code>은 상위 View 안에서의 <code>CGRect</code>라고 했습니다. 위 출력은 순서대로 x좌표, y좌표, 너비, 높이였죠?</p>\n<img src=\"https://i.imgur.com/WyQYXmm.png\"  width=\"500\">\n\n<p>ParentView의 <code>CGPoint</code>와 <code>CGSize</code>에 수치를 메겨보았습니다. <code>frame</code>은 어느정도 느낌이 오죠?</p>\n<p>ParentView의 기준점(origin)이 상위 뷰인 SuperView의 기준점(origin)에서 (24, 186)만큼 떨어져있고, 크기(size)는 (342, 472)라는 것이죠!</p>\n<p><code>frame</code>의 설명 그대로 해당 View의 <strong>상위 View에 대한 좌표값</strong>이라는 것을 알 수 있습니다.</p>\n<p>제대로 이해한 것인지 확인하기 위해서 ParentView의 기준점(origin)을 한번 (0, 0)으로 바꿔보았습니다.<br>동시에 크기(size)도 (320, 380)으로 줄여봅시다.</p>\n<p><img src=\"https://i.imgur.com/nIYdPiX.jpg\"></p>\n<p>왼쪽이 변경 전, 오른쪽이 변경 후입니다. 잘 보면, Child View는 변한 게 없습니다.<br>절대적인 위치는 Parent View의 위치가 바뀌었기 때문에 같이 바뀐 것이고, 기준점(origin)이나 크기(size)는 그대로 유지되었습니다.<br>ParentView의 <code>CGRect</code>는 당연하게 변경되었습니다. 기준점(origin)의 좌표가 (0, 0)이 되었고, 크기도 (320, 380)으로 줄어들었습니다.</p>\n<p>이제 확실하게 알 것 같습니다! <code>frame</code>은 상위 View에 대한 좌표값이기 때문에 <strong>상위 View의 기준점(origin)이 이동하면 함께 이동</strong>하는 것이죠.</p>\n<h1 id=\"Bounds\"><a href=\"#Bounds\" class=\"headerlink\" title=\"Bounds\"></a>Bounds</h1><p>이번엔 설명이 조금 모호한 <code>bounds</code>를 알아보겠습니다. 우선 아까 예시를 그대로 가져와서 <code>bounds</code> 값을 찍어보았습니다.</p>\n<p><img src=\"https://i.imgur.com/Pex6uMi.png\"></p>\n<p>두 View 모두 기준점(origin) 이 (0, 0)이 나오네요..?? 🤔</p>\n<p>네 그렇습니다.. <code>frame</code>과 다르게 <code>bounds</code>는 “본인의 고유한 좌표”라는 말에서 알 수 있듯이 <strong>상위 View와는 아무런 관련 없이 갖는 값</strong>입니다.</p>\n<p>자 여기까진 알겠고, 그럼 <code>bounds</code>값에 변형을 줘볼까요?<br><code>self.parentView.bounds.origin = CGPoint(x: 50, y: 100)</code><br>이렇게 한 번 Parent View의 <code>bounds</code>를 (50, 100)만큼 이동시켜볼게요.</p>\n<img src=\"https://i.imgur.com/FrRBr1V.png\" width=\"500\">\n\n<p>음.. ParentView는 가만히 있고, ChildView가 왼쪽 위로 이동했습니다. 🤔🤔🤔</p>\n<p>전혀 모르겠네요. 왜죠..?</p>\n<p><code>bounds</code>를 이해하기 위해서는 저 화면을 조금 더 넓게 볼 필요가 있습니다.<br><code>frame</code>이야 저 사각형의 View 자체를 이동시킨 것이 맞습니다.<br>하지만 <code>bounds</code>의 경우에는 View를 움직이는게 아니라 <strong>해당 View 안에서 보이는 공간의 좌표를 바꿔준다</strong>는 의미입니다.</p>\n<p>네 어렵죠..? (아닌가요? 저만 어렵나요?)</p>\n<p>그러니까 우리가 사진을 확대해서 볼 때 한 점을 찍고 드래그를 하죠?</p>\n<img src=\"https://i.imgur.com/Yn0T8Fj.png\" width=\"100\">\n요 포인터 있잖아요?\n\n<p>이 포인터로 딱 찍은 그 점이 바로 기준점(origin)이라고 생각하고, 그 점을 누르고 오른쪽 아래(50, 100)로 내린겁니다!</p>\n<p><img src=\"https://i.imgur.com/jxmmS0i.png\"></p>\n<p>그러면 사진은 어떻게 되나요?<br>왼쪽 위로 올라갑니다.</p>\n<p>ParentView는 안에 있는 다른 View들을 담고 있는 하나의 또 다른 화면이라고 생각하면 됩니다. 그 화면에서 드래그를 해서 보고 있는 화면을 옮기는 것이죠.</p>\n<h5 id=\"근데-저게-화면이면-밖으로-튀어나오면-안되는-거-아닌가요\"><a href=\"#근데-저게-화면이면-밖으로-튀어나오면-안되는-거-아닌가요\" class=\"headerlink\" title=\"근데 저게 화면이면, 밖으로 튀어나오면 안되는 거 아닌가요?\"></a>근데 저게 화면이면, 밖으로 튀어나오면 안되는 거 아닌가요?</h5><p>맞아요. 그래서 튀어나오지 않도록 해줄 수도 있습니다.<br><code>clipsToBounds</code>라는 어트리뷰트를 <code>true</code>로 해주면</p>\n<img src=\"https://i.imgur.com/6ResdTW.png\" width=\"500\">\n\n<p>이렇게 화면에서 벗어난 View를 잘라서 표현할 수 있습니다.</p>\n<p>자 그런데 위에서 이해를 돕기 위해서 이미지를 확대해서 드래그하는 상황을 예시로 들었었죠?<br>사실 정확히 이 상황을 사용하는 UI 컴포넌트가 하나 있습니다.<br>바로 <strong>ScrollView</strong>에요.<br>ScrollView에서 드래그를 할 때 사실은 내부적으로 해당 View의 <code>bounds</code>를 계속해서 바꿔주고 있는 겁니다.<br>이런 사실은 ScrollView의 <code>contentOffset</code>을 출력해보면 확인해볼 수 있습니다.</p>\n<h5 id=\"그런데-혹시-size는-frame과-bounds에서-별-차이가-없어서-언급이-없는건가요\"><a href=\"#그런데-혹시-size는-frame과-bounds에서-별-차이가-없어서-언급이-없는건가요\" class=\"headerlink\" title=\"그런데 혹시 size는 frame과 bounds에서 별 차이가 없어서 언급이 없는건가요?\"></a>그런데 혹시 <code>size</code>는 <code>frame</code>과 <code>bounds</code>에서 별 차이가 없어서 언급이 없는건가요?</h5><p>아닙니다. 상당히 큰 차이가 있어요.<br>지금까지 우리는 <strong>기준점(origin)</strong> 에 초점을 맞춰서 공부했죠?<br>그도 그럴게 두 예시 모두 크기는 동일하게 나왔거든요.<br>그래서 크기는 <code>frame</code>과 <code>bounds</code>가 동일하냐?하면, 그건 또 아닙니다.</p>\n<p>이 차이는 View를 회전시킬 때 확인할 수 있습니다.</p>\n<img src=\"https://i.imgur.com/6krZKvJ.png\" width=\"500\">\n\n<p>위와 같이 View 하나를 45도 돌려보았습니다. 이 때의 <code>frame.size</code>와 <code>bounds.size</code>를 출력해보면,</p>\n<p><img src=\"https://i.imgur.com/fKzsYYh.png\"></p>\n<p>분명 하나의 View의 <code>size</code>인데 두 값이 다르게 나옵니다.</p>\n<p><code>frame</code>의 경우 <strong>View를 감싸고 있는 사각형의 좌표와 크기</strong>를 값으로 갖습니다.<br>왜냐면 상위 View에 대한 상대적 좌표이기 때문에 정확히 사각형의 형태이기 때문이죠.<br>반면 <code>bounds</code>는 회전이 됐다면 된 상태 그 <strong>모습 그대로의 좌표와 크기</strong>를 값으로 갖습니다.<br>본인만의 고유한 좌표계에 대한 값이기 떄문입니다.</p>\n<p><img src=\"https://i.imgur.com/RBiE6M6.png\"><br>출처: <a href=\"https://stackoverflow.com/questions/1210047/cocoa-whats-the-difference-between-the-frame-and-the-bounds\">https://stackoverflow.com/questions/1210047/cocoa-whats-the-difference-between-the-frame-and-the-bounds</a></p>\n<p>사진으로 보면 이해가 매우 빠를 것 같아서 StackOverflow에서 이미지를 하나 가져왔습니다.</p>\n","text":"오늘은 frame과 bounds의 실체와 차이점에 대해 공부해볼거에요.두 친구 모두 코드 상에서 UIView에 변경을 가할 때 자주 보게 되는 용어들이죠.근데 지금까지는 그냥 둘 다 써보고 제가 원하던 프로퍼티가 있으면 사용하곤 했습니다.view.bo...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CGRect\"><span class=\"toc-text\">CGRect</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#frame-bounds\"><span class=\"toc-text\">frame, bounds</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#frame\"><span class=\"toc-text\">frame</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bounds\"><span class=\"toc-text\">bounds</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Frame\"><span class=\"toc-text\">Frame</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Bounds\"><span class=\"toc-text\">Bounds</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EA%B7%BC%EB%8D%B0-%EC%A0%80%EA%B2%8C-%ED%99%94%EB%A9%B4%EC%9D%B4%EB%A9%B4-%EB%B0%96%EC%9C%BC%EB%A1%9C-%ED%8A%80%EC%96%B4%EB%82%98%EC%98%A4%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94-%EA%B1%B0-%EC%95%84%EB%8B%8C%EA%B0%80%EC%9A%94\"><span class=\"toc-text\">근데 저게 화면이면, 밖으로 튀어나오면 안되는 거 아닌가요?</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EA%B7%B8%EB%9F%B0%EB%8D%B0-%ED%98%B9%EC%8B%9C-size%EB%8A%94-frame%EA%B3%BC-bounds%EC%97%90%EC%84%9C-%EB%B3%84-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%97%86%EC%96%B4%EC%84%9C-%EC%96%B8%EA%B8%89%EC%9D%B4-%EC%97%86%EB%8A%94%EA%B1%B4%EA%B0%80%EC%9A%94\"><span class=\"toc-text\">그런데 혹시 size는 frame과 bounds에서 별 차이가 없어서 언급이 없는건가요?</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"33)🧰 Swift - 메서드 디스패치 (Method Dispatch)","uid":"69f8880ec5c4a5498a069d7bb5807eb6","slug":"Allen/2022-10-14-Allen33","date":"2022-10-13T15:00:00.000Z","updated":"2023-03-31T10:34:18.824Z","comments":true,"path":"api/articles/Allen/2022-10-14-Allen33.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) Method Dispatch코드 영역에 저장된 함수&#x2F;메서드를 실행시키려면 그 주소를 알아야합니다.이 메서드를 실행시키는 방법에는 크게 3가지 방법이 있습니다. Swift...","link":"","photos":[],"count_time":{"symbolsCount":679,"symbolsTime":"1 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"32)🧰 Swift - 프로토콜 (Protocol)","uid":"5b935310e5ab86264b239e5fd2bbef6c","slug":"Allen/2022-10-11-Allen32","date":"2022-10-10T15:00:00.000Z","updated":"2023-03-31T10:34:14.305Z","comments":true,"path":"api/articles/Allen/2022-10-11-Allen32.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 프로토콜 (protocol)프로토콜의 개념프로토콜의 필요성 클래스 상속의 단점 하나의 클래스만 상속 가능 (다중 상속 불가) 상위 클래스의 메모리 구조를 따라감 (필요하지 않은 ...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}