{"title":"21)🍎 Swift - Compositional Layout.01","uid":"8bbfe0d3b3501508bfc41548ddec18f1","slug":"Swift/2023-01-29-Swift21","date":"2023-01-28T15:00:00.000Z","updated":"2023-03-31T14:20:29.397Z","comments":true,"path":"api/articles/Swift/2023-01-29-Swift21.json","keywords":null,"cover":"https://i.imgur.com/sTVYBGH.png","content":"<h1 id=\"Compositional-Layout\"><a href=\"#Compositional-Layout\" class=\"headerlink\" title=\"Compositional Layout\"></a>Compositional Layout</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>높은 반응성을 갖고 유연한 UI 조정이 가능한 item들을 조합하여 사용하는 레이아웃입니다.</p></blockquote>\n<p>애플이 Compositional Layout을 소개하면서 대표적으로 예시를 든 앱이 App Store와 사진 앱입니다.</p>\n<img src=\"https://i.imgur.com/HVZBa7K.gif\">\n\n<p>여러가지 형태의 레이아웃들이 줄지어 있지만, 이 화면은 단 하나의 <code>CollectionView</code>로 이루어져있다고 합니다.</p>\n<p>기존의 <code>FlowLayout</code>을 사용했다면 각기 다른 레이아웃에 따라 여러개의 <code>CollectionView</code>를 사용했어야 했지만 <code>CompositionalLayout</code>을 사용하면 하나의 <code>CollectionView</code>로 처리할 수 있다는 것이죠.</p>\n<p>그러면서도 이전보다 쉬운 API로 구현이 가능하고, 빠르고 메모리 최적화에 더 우수하다고 합니다.</p>\n<h2 id=\"기본-개념\"><a href=\"#기본-개념\" class=\"headerlink\" title=\"기본 개념\"></a>기본 개념</h2><p><code>CompositionalLayout</code>은 세 가지의 핵심 요소에 집중하면 됩니다. </p>\n<p>가장 작은 단위인 <strong><code>Item</code>이 모여서 <code>Group</code></strong> 이 되고, 하나의 줄(row)를 형성합니다. </p>\n<p>이 <strong><code>Group</code>들은 다시 한번 모여서 <code>Section</code></strong> 을 이룹니다. 이렇게 만들어진 모든 <code>Section</code>을 <code>Layout</code>이 담고 있는 것이죠.</p>\n<img src=\"https://i.imgur.com/pBUzta2.png\" width=\"550\">\n\n<h3 id=\"Size\"><a href=\"#Size\" class=\"headerlink\" title=\"Size\"></a>Size</h3><p><code>CompositionalLayout</code>이 갖고 있는 이 모든 요소들은 각각의 <code>size</code>를 갖고 있습니다.</p>\n<p>그리고 <code>size</code>는 모두가 알고있듯이 <code>width</code>와 <code>height</code>, 두 가지 속성으로 이루어져 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class NSCollectionLayoutSize &#123;\n\tinit(\n\t\twidthDimension: NSCollectionLayoutDimension,\n\t\theightDimension: NSCollectionLayoutDimension\n\t)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>하지만 주의할 점은 이 <code>width</code>와 <code>height</code>는 스칼라 값이 아닙니다. </p>\n<p>그래서 <code>Float</code>와 같은 타입이 아니라 <code>NSCollectionLayoutDimension</code> 타입의 값을 파라미터로 취합니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class NSCollectionLayoutDimension &#123;\n\tclass func fractionalWidth(_ fractionalWidth: CGFloat) -&gt; Self\n\tclass func fractionalHeight(_ fractionalHeight: CGFloat) -&gt; Self\n\tclass func absolute(_ absoluteDimension: CGFloat) -&gt; Self\n\tclass func estimated(_ estimatedDimension: CGFloat) -&gt; Self\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>총 네 가지 타입으로 구분할 수 있고, 각각을 쉽게 설명하면 다음과 같습니다.</p>\n<ul>\n<li><p><code>fractional</code>: 상위 컴포넌트(컨테이너)의 크기에 비례하여 크기를 가질 때 사용됩니다.</p>\n<ul>\n<li><code>.fractionalWidth(0.5)</code>, <code>.fractionalHeight(0.3)</code></li>\n</ul>\n</li>\n<li><p><code>absolute</code>: 고정된 값의 크기를 가질 때 사용됩니다.</p>\n<ul>\n<li><code>.absolute(200)</code></li>\n</ul>\n</li>\n<li><p><code>estimated</code>: 고정된 값으로 시작되지만 크기가 변동될 때 사용됩니다.</p>\n<ul>\n<li>.estimated(200)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Item\"><a href=\"#Item\" class=\"headerlink\" title=\"Item\"></a>Item</h3><p><code>Item</code>은 화면에 렌더링되는 요소입니다. </p>\n<p><code>cell</code>이나 <code>supplementary</code>가 여기에 해당됩니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class NSCollectionLayoutItem &#123;\n\tconvenience init(layoutSize: NSCollectionLayoutSize)\n\tvar contentInsets: NSDirectionalEdgeInsets\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>초기화할 때 <code>size</code>를 정해줘야하고, <code>contentInsets</code>를 통해 inset도 정해줄 수가 있네요.</p>\n<h3 id=\"Group\"><a href=\"#Group\" class=\"headerlink\" title=\"Group\"></a>Group</h3><p><code>Group</code>은 레이아웃으로서의 가장 기본적인 단위가 되는 요소입니다.</p>\n<p><code>Group</code>은 <code>.horizontal</code>, <code>.vertical</code>, <code>.custom</code>의 세가지 형태로 정의해줄 수 있습니다.</p>\n<p><code>Group</code>을 하나의 작은 <code>FlowLayout</code>이라고 생각해보면 이해가 쉽습니다.</p>\n<p>가로 혹은 세로 한쪽 방향으로 쭉 이어지는 레이아웃이니까요.</p>\n<p>한 쪽 방향으로만 진행되는 <code>Group</code>이 싫다면 <code>.custom</code>을 사용해 직접 구현해줄 수도 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class NSCollectionLayoutGroup: NSCollectionLayoutItem &#123;\n\tclass func horizontal(\n\t\tlayoutSize: NSCollectionLayoutSize,\n\t\tsubitems: [NSCollectionLayoutItem]) -&gt; Self\n\tclass func vertical(\n\t\tlayoutSize: NSCollectionLayoutSize,\n\t\tsubitems: [NSCollectionLayoutItem]) -&gt; Self\n\tclass func custom(\n\t\tlayoutSize: NSCollectionLayoutSize,\n\t\titemProvider: NSCollectionLayoutGroupCustomItemProvider) -&gt; Self\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Section\"><a href=\"#Section\" class=\"headerlink\" title=\"Section\"></a>Section</h3><p><code>Section</code>은 말 그대로 <code>Section</code>을 기준으로 나열되는 <code>CollectionView</code>의 <code>Section</code>입니다.</p>\n<p>기존에 사용하던 Layout들의 <code>Section</code>과 동일한 개념입니다.</p>\n<p><code>dataSource</code>로부터 <code>Item</code>의 개수를 받아와 <code>Section</code>을 구성합니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class NSCollectionLayoutSection &#123;\n\tconvenience init(layoutGroup: NSCollectionLayoutGroup)\n\tvar contentInsets: NSDirectionalEdgeInsets\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Layout\"><a href=\"#Layout\" class=\"headerlink\" title=\"Layout\"></a>Layout</h3><p>그렇다면 레이아웃을 초기화해줄때는 어떻게 하면 될까요?</p>\n<p>애플은 두 가지 방법을 제공하고 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class UICollectionViewCompositionalLayout: UICollectionViewLayout &#123;\n\tinit(section: NSCollectionLayoutSection)\n\tinit(sectionProvider: @escaping SectionProvider)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"init-section-NSCollectionLayoutSection\"><a href=\"#init-section-NSCollectionLayoutSection\" class=\"headerlink\" title=\"init(section: NSCollectionLayoutSection)\"></a><code>init(section: NSCollectionLayoutSection)</code></h4><p>레이아웃의 섹션을 직접 지정해주는 방식입니다. </p>\n<p>쉽고 간단하지만 현재 사용되는 레이아웃 방식과 차별성이 거의 없습니다.</p>\n<h4 id=\"init-sectionProvider-escaping-SectionProvider\"><a href=\"#init-sectionProvider-escaping-SectionProvider\" class=\"headerlink\" title=\"init(sectionProvider: @escaping SectionProvider)\"></a><code>init(sectionProvider: @escaping SectionProvider)</code></h4><p><code>Compositional</code>하게 <code>Section</code>들을 구성해주려면 이 방식을 사용해야 합니다.</p>\n<p><code>@escaping</code> 클로저가 보이시죠?</p>\n<p>이 클로저 안에서 각 <code>Section</code>마다의 독립적인 설정을 해줄 수 있습니다.</p>\n<p>정확히 해당 과정이 어떻게 이루어지는가는 활용 예시에서 다시 한번 보도록 하겠습니다.</p>\n<h2 id=\"활용-예시\"><a href=\"#활용-예시\" class=\"headerlink\" title=\"활용 예시\"></a>활용 예시</h2><h3 id=\"간단한-테이블-리스트\"><a href=\"#간단한-테이블-리스트\" class=\"headerlink\" title=\"간단한 테이블 리스트\"></a>간단한 테이블 리스트</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">private func configureLayout() -&gt; UICollectionViewLayout &#123;\n\tlet itemSize &#x3D; NSCollectionLayoutSize(\n\t\twidthDimension: .fractionalWidth(1.0),\n\t\theightDimension: .fractionalHeight(1.0)\n\t)\n\tlet item &#x3D; NSCollectionLayoutItem(layoutSize: itemSize)\n\n\tlet groupSize &#x3D; NSCollectionLayoutSize(\n\t\twidthDimension: .fractionalWidth(1.0),\n\t\theightDimension: .absolute(44)\n\t)\n\tlet group &#x3D; NSCollectionLayoutGroup.horizontal(\n\t\tlayoutSize: groupSize,\n\t\tsubItems: [item]\n\t)\n\n\tlet section &#x3D; NSCollectionLayoutSection(group: group)\n\n\tlet layout &#x3D; UICollectionViewCompositionalLayout(section: section)\n\treturn layout\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://i.imgur.com/bJqs3XR.png\" width=\"300\">\n\n<p>가장 간단한 형태의 Layout이라고 볼 수 있습니다.</p>\n<p>한가지 주목할 점은 이 경우에 각 cell의 <code>size</code>를 <code>Item</code>이 아니라 <strong><code>Group</code>을 활용</strong>해서 정해주었다는 점입니다.</p>\n<p><code>.horizontal</code> 방향의 <code>Group</code>에는 각각 하나의 <code>Item</code>만을 갖고 있는 형태이기 때문에 활용할 수 있는 방법입니다.</p>\n<p>그래서 <code>itemSize</code>의 크기는 <code>width</code>, <code>height</code> 모두 <code>.fractional(1.0)</code>으로 그룹을 꽉 채워주었죠.</p>\n<p>대신 <code>groupSize</code>의 크기를 <code>width</code>는 <code>.fractional(1.0)</code>, <code>height</code>를 <code>.absolute(44)</code>로 지정해주어 가로를 꽉 채우지만 높이는 44로 고정시켜주었습니다.</p>\n<h3 id=\"한-줄의-개수가-5개로-고정된-그리드\"><a href=\"#한-줄의-개수가-5개로-고정된-그리드\" class=\"headerlink\" title=\"한 줄의 개수가 5개로 고정된 그리드\"></a>한 줄의 개수가 5개로 고정된 그리드</h3><img src=\"https://i.imgur.com/id866Ai.png\" width=\"300\">\n\n<img src=\"https://i.imgur.com/AuPyn68.png\" width=\"500\">\n\n<p>이번에는 무조건 한 줄에 무조건 5개의 cell이 들어가고, 정사각형의 형태를 가져야 하는 그리드 형식의 컬렉션뷰입니다.</p>\n<p>이 경우는 위에서 사용했던 코드에서 <code>size</code> 값만 변경해주는 것 만으로도 쉽게 구현할 수 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">private func configureLayout() -&gt; UICollectionViewLayout &#123;\n\tlet itemSize &#x3D; NSCollectionLayoutSize(\n\t\twidthDimension: .fractionalWidth(0.2),\n\t\theightDimension: .fractionalHeight(1.0)\n\t)\n\tlet item &#x3D; NSCollectionLayoutItem(layoutSize: itemSize)\n\n\tlet groupSize &#x3D; NSCollectionLayoutSize(\n\t\twidthDimension: .fractionalWidth(1.0),\n\t\theightDimension: .fractionalWidth(0.2)\n\t)\n\tlet group &#x3D; NSCollectionLayoutGroup.horizontal(\n\t\tlayoutSize: groupSize,\n\t\tsubItems: [item]\n\t)\n\n\tlet section &#x3D; NSCollectionLayoutSection(group: group)\n\n\tlet layout &#x3D; UICollectionViewCompositionalLayout(section: section)\n\treturn layout\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>각 아이템들의 <strong><code>width</code>는 그룹 넓이의 20%</strong>(<code>.fractionalWidth(0.2)</code>)로, 각 그룹들의 <strong><code>height</code>는 섹션 넓이의 20%</strong>(<code>.fractionalWidth(0.2)</code>)로 지정해주어 정사각형의 형태를 만들어주었습니다.</p>\n<img src=\"https://i.imgur.com/OkozR85.png\" width=\"300\">\n\n<p>그러면 위와 같이 <code>inset</code>을 주고 싶을땐 어떻게 줄 수 있을까요?</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">private func configureLayout() -&gt; UICollectionViewLayout &#123;\n\tlet itemSize &#x3D; NSCollectionLayoutSize(\n\t\twidthDimension: .fractionalWidth(0.2),\n\t\theightDimension: .fractionalHeight(1.0)\n\t)\n\tlet item &#x3D; NSCollectionLayoutItem(layoutSize: itemSize)\n\titem.contentInsets &#x3D; NSDirectionalEdgeInsets(top: 5, leading: 5, bottom: 5, trailing: 5)\n\n\tlet groupSize &#x3D; NSCollectionLayoutSize(\n\t\twidthDimension: .fractionalWidth(1.0),\n\t\theightDimension: .fractionalWidth(0.2)\n\t)\n\tlet group &#x3D; NSCollectionLayoutGroup.horizontal(\n\t\tlayoutSize: groupSize,\n\t\tsubItems: [item]\n\t)\n\n\tlet section &#x3D; NSCollectionLayoutSection(group: group)\n\n\tlet layout &#x3D; UICollectionViewCompositionalLayout(section: section)\n\treturn layout\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>item.contentInsets = NSDirectionalEdgeInsets(top: 5, leading: 5, bottom: 5, trailing: 5)</code> 이 부분만 추가해주면 됩니다!</p>\n<p><code>inset</code>의 장점은 Layout의 변화 없이도 실제로 보여지는 각 cell의 크기를 변경해줄 수 있다는 점입니다.</p>\n<img src=\"https://i.imgur.com/FRRUZMe.png\" width=\"300\">\n\n<p>이번에는 비슷하지만 그리드 형태지만 다른 방식으로 구현해봅시다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">private func configureLayout() -&gt; UICollectionViewLayout &#123;\n\tlet itemSize &#x3D; NSCollectionLayoutSize(\n\t\twidthDimension: .fractionalWidth(1.0),\n\t\theightDimension: .fractionalHeight(1.0)\n\t)\n\tlet item &#x3D; NSCollectionLayoutItem(layoutSize: itemSize)\n\n\tlet groupSize &#x3D; NSCollectionLayoutSize(\n\t\twidthDimension: .fractionalWidth(1.0),\n\t\theightDimension: .absolute(44)\n\t)\n\tlet group &#x3D; NSCollectionLayoutGroup.horizontal(\n\t\tlayoutSize: groupSize,\n\t\trepeatingSubItem: item,\n\t\tcount: 2\n\t)\n\tlet spacing: CGFloat &#x3D; 10.0\n\tgroup.interItemSpacing &#x3D; .fixed(spacing)\n\n\tlet section &#x3D; NSCollectionLayoutSection(group: group)\n\tsection.interGroupSpacing &#x3D; spacing\n\tsection.contentInsets &#x3D; NSDirectionalEdgeInsets(top: 0, leading: 10, bottom: 0, trailing: 10)\n\n\tlet layout &#x3D; UICollectionViewCompositionalLayout(section: section)\n\treturn layout\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이 경우에 <code>itemSize</code>의 <code>width</code>와 <code>height</code>를 모두 <code>.fractional(1.0)</code>으로 주었지만, 이 값은 아래의 <code>Group</code> 설정에서 override됩니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let group &#x3D; NSCollectionLayoutGroup.horizontal(\n\tlayoutSize: groupSize,\n\tsubItem: item,\n\tcount: 2\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 <code>Item</code>의 개수를 그룹별로 지정해주면, <code>CompositionalLayout</code>이 알아서 <code>Item</code>의 크기를 결정해줍니다.</p>\n<h3 id=\"여러개의-Section을-갖는-경우\"><a href=\"#여러개의-Section을-갖는-경우\" class=\"headerlink\" title=\"여러개의 Section을 갖는 경우\"></a>여러개의 Section을 갖는 경우</h3><p>지금까지는 <code>Section</code>이 하나인 경우, 즉 <code>FlowLayout</code>으로도 별 어려움 없이 구현할 수 있었던 경우들이였습니다.</p>\n<p><code>CompositionalLayout</code>이 이걸 위해서 등장한 건 아니였죠.</p>\n<p>여러개의 <code>Section</code>을 갖고, 각각을 관리할 수 있는 경우를 살펴봅시다.</p>\n<img src=\"https://i.imgur.com/854peYX.png\" width=\"300\">\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func createLayout() -&gt; UICollectionViewLayout &#123;\n\tlet layout &#x3D; UICOllectionViewCompositionalLayout &#123; sectionIndex: Int, layoutEnvironment: NSCollectionLayoutEnvironment -&gt; NSCollectionLayoutSection? in\n\t\tguard let sectionLayoutKind &#x3D; SectionLayoutKind(rawValue: sectionIndex) else &#123; return nil &#125;\n\t\tlet columns &#x3D; sectionLayoutKind.columnCount\n\n\t\t&#x2F;&#x2F; 위 경우와 마찬가지로 아래 group 설정에서 override됨\n\t\tlet itemSize &#x3D; NSCollectionLayoutSize(\n\t\t\twidthDimension: .fractionalWidth(1.0),\n\t\t\theightDimension: .fractionalHeight(1.0)\n\t\t)\n\t\tlet item &#x3D; NSCollectionLayoutItem(layoutSize: itemSize)\n\t\titem.contentInsets &#x3D; NSDirectionalEdgeInsets(top: 2, leading: 2, bottom: 2, trailing: 2)\n\n\t\tlet groupHeight &#x3D; columns &#x3D;&#x3D; 1 ?\n\t\t\tNSCollectionLayoutDimension.absolute(44) :\n\t\t\tNSCollectionLayoutDimension.fractionalWidth(0.2)\n\t\tlet groupSize &#x3D; NSCollectionLayoutSize(\n\t\t\twidthDimension: .fractionalWidth(1.0),\n\t\t\theightDimension: groupHeight\n\t\t)\n\t\tlet group &#x3D; NSCollectionLayoutGroup.horizontal(\n\t\t\tlayoutSize: groupSize,\n\t\t\tsubitem: item,\n\t\t\tcount: columns\n\t\t)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>굉장히 굉장히 길어 보이지만 핵심은 하나입니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let layout &#x3D; UICollectionViewCompositionalLayout &#123; sectionIndex: Int, layoutEnvironment: NSCollectionLayoutEnvironment -&gt; NSCollectionLayoutSection? in\n\t&#x2F;&#x2F; \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>이 부분이죠.</p>\n<p>이 모든 설정들은 <code>SectionProvider</code> 클로저 안에 있습니다.</p>\n<p>그리고 두 개의 파라미터를 제공합니다.</p>\n<p><code>sectionIndex</code>는 말 그대로 <code>Section</code>의 index고, <code>layoutEnvironment</code>는 \bsize나 display scale과 같은 container의 프로퍼티들을 제공해주는 프로토콜입니다.</p>\n<p><code>SectionLayoutKind</code>는 <code>sectionIndex</code> 값을 파라미터로 받아 <code>Section</code>의 종류를 결정해주고, 하나의 column에 몇개의 <code>Item</code>이 들어가는지를 정해주는 <code>enum</code> 타입입니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum SectionLayoutKind: Int, CaseIterable &#123;\n\tcase list, grid5, grid3\n\n\tvar columnCount: Int &#123;\n\t\tswitch self &#123;\n\t\tcase .grid3:\n\t\t\treturn 3\n\t\tcase .grid5:\n\t\t\treturn 5\n\t\tcase .list:\n\t\t\treturn 1\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 <code>Section</code>의 index에 따라서 여러 종류의 Layout을 지정해줄 수 있습니다.</p>\n","feature":true,"text":"Compositional Layout 높은 반응성을 갖고 유연한 UI 조정이 가능한 item들을 조합하여 사용하는 레이아웃입니다. 애플이 Compositional Layout을 소개하면서 대표적으로 예시를 든 앱이 App Store와 사진 앱입니다. ...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Compositional-Layout\"><span class=\"toc-text\">Compositional Layout</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90\"><span class=\"toc-text\">기본 개념</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Size\"><span class=\"toc-text\">Size</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Item\"><span class=\"toc-text\">Item</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Group\"><span class=\"toc-text\">Group</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Section\"><span class=\"toc-text\">Section</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Layout\"><span class=\"toc-text\">Layout</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#init-section-NSCollectionLayoutSection\"><span class=\"toc-text\">init(section: NSCollectionLayoutSection)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#init-sectionProvider-escaping-SectionProvider\"><span class=\"toc-text\">init(sectionProvider: @escaping SectionProvider)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C\"><span class=\"toc-text\">활용 예시</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%A6%AC%EC%8A%A4%ED%8A%B8\"><span class=\"toc-text\">간단한 테이블 리스트</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%95%9C-%EC%A4%84%EC%9D%98-%EA%B0%9C%EC%88%98%EA%B0%80-5%EA%B0%9C%EB%A1%9C-%EA%B3%A0%EC%A0%95%EB%90%9C-%EA%B7%B8%EB%A6%AC%EB%93%9C\"><span class=\"toc-text\">한 줄의 개수가 5개로 고정된 그리드</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-Section%EC%9D%84-%EA%B0%96%EB%8A%94-%EA%B2%BD%EC%9A%B0\"><span class=\"toc-text\">여러개의 Section을 갖는 경우</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"22)🍎 Swift - Compositional Layout.02","uid":"98a6caad455ce327628ef8de6d0451a0","slug":"Swift/2023-01-31-Swift22","date":"2023-01-30T15:00:00.000Z","updated":"2023-03-31T14:20:34.012Z","comments":true,"path":"api/articles/Swift/2023-01-31-Swift22.json","keywords":null,"cover":"https://i.imgur.com/sTVYBGH.png","text":"Supplementary ItemCollectionView를 사용하다보면 자주 사용하게 되는 요소들이 있습니다. Badges, Headers, Footers라고 불리는 이것들은 리스트의 앞이나 뒤에 붙어 전체적인 리스트에 대한 정보를 제공해줍니다. B...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"20)🍎 Swift - RxFlow.02","uid":"a4bb605dd85632e4da94987ee3e7cc44","slug":"Swift/2023-01-28-Swift20","date":"2023-01-27T15:00:00.000Z","updated":"2023-03-31T10:45:54.536Z","comments":true,"path":"api/articles/Swift/2023-01-28-Swift20.json","keywords":null,"cover":null,"text":"RxFlow험난한 길이 예상되지만 가봅시다.. 깃허브와 같은 순서대로 해봅시다. Step 정의import RxFlow enum FavorStep: Step &#123; case signInIsRequired &#125; 우선 로그인 Step만 만들어주...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"},{"name":"Favor","slug":"Favor","count":6,"path":"api/tags/Favor.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}