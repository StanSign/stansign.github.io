{"title":"14)🍎 Swift - Rx 없이 Reactive Binding 해보기","uid":"01b2dffc69fa4db38318456db0dbef20","slug":"Swift/2022-11-20-Swift14","date":"2022-11-19T15:00:00.000Z","updated":"2023-03-31T10:42:38.383Z","comments":true,"path":"api/articles/Swift/2022-11-20-Swift14.json","keywords":null,"cover":null,"content":"<h1 id=\"Rx-없이-View-➡️-ViewModel-Binding하기\"><a href=\"#Rx-없이-View-➡️-ViewModel-Binding하기\" class=\"headerlink\" title=\"Rx 없이 View ➡️ ViewModel Binding하기\"></a>Rx 없이 View ➡️ ViewModel Binding하기</h1><p>Rx라는 놈 공부할 땐 어려웠는데..<br>한 번 써보니까 없이 기능 구현을 할 때 갈증이 계속해서 일어나는 현상을 겪고 있습니다.</p>\n<p>하지만 라이브러리에 의존하는 것은 좋지 않으니까 Rx 없이 데이터 바인딩을 하는 방법을 공부해보았습니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>코드의 경우 검색해본 거의 모든 게시물에서 동일한 형태로 사용되고 있었습니다. 내부적인 동작 과정도 모른채로 가져다쓰긴 싫어서 공부 겸 작성한 게시물입니다!</p></blockquote>\n<p>체크 리스트 앱을 만든다고 가정합시다.<br>할 일을 완료할 때마다 그 날 일의 완료율 Label을 계속해서 바꿔주고 싶어요.<br>딱 Rx를 사용하면 편리한 상황이지만 다른 기능을 찾아봅시다.</p>\n<p>값이 바뀔 때마다 수행하는 동작..<br>정확히 해당 기능을 하는 친구가 있었던 것 같아요.</p>\n<p>바로 <code>didSet</code>입니다.</p>\n<h2 id=\"didSet\"><a href=\"#didSet\" class=\"headerlink\" title=\"didSet\"></a>didSet</h2><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var donePercentage: Int &#x3D; 0 &#123;\n\tdidSet &#123;\n\t\tprint(oldValue)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>donePercentage</code>의 값이 바뀔 때마다 <code>didSet</code>에 있는 <code>print</code> 함수가 자동으로 호출됩니다.<br>이 <code>didSet</code>을 키워드로 잡고 시작해보겠습니다.</p>\n<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><p>Rx에서 우리는</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">viewModel.todos\n\t.subscribe(onNext: &#123; todo in\n\t\tprint(todo.count)\n\t&#125;)\n\t.disposed(by: self.disposeBag)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이런 식으로 <code>Observable</code>한 데이터를 만들어주고 <code>subscribe</code>하여 필요한 동작들을 처리해주었습니다.</p>\n<p>먼저 필요한 <code>Observable</code> 타입을 차근차근 만들어봅시다.</p>\n<h3 id=\"value-T\"><a href=\"#value-T\" class=\"headerlink\" title=\"value: T\"></a>value: T</h3><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Observable&lt;T&gt; &#123;\n\tvar value: T\n\n\tinit(_ value: T) &#123;\n\t\tself.value &#x3D; value\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Observable</code>은 모든 타입에 대해서 관찰이 가능해야하기 때문에 <code>Generic</code> 타입을 <code>T</code>라는 이름으로 사용해주었습니다.<br>그리고 생성자를 통해 알맹이인 <code>value</code> 값을 넣어주었죠.</p>\n<p>이 <code>value</code> 값이 바뀔 때마다 어떤 함수를 실행해주어야 하기 때문에 <code>didSet</code>을 사용해줍시다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var value: T &#123;\n\tdidSet &#123;\n\t\t&#x2F;&#x2F; 실행할 함수\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"listener-클로저\"><a href=\"#listener-클로저\" class=\"headerlink\" title=\"listener (클로저)\"></a>listener (클로저)</h3><p>다시 Rx의 경우를 봐볼까요?</p>\n<p>저 <code>didSet</code> 안에 들어가게 될 함수를 찾아봅시다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">.subscribe(onNext: &#123; todo in\n\tprint(todo)\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>subscribe</code>라는 함수를 호출하고 클로저의 형태로 함수를 전달받아 실행하는 것 같네요.</p>\n<p>그렇다면 안에 들어갈 함수를 담을 클로저 변수를 정의해줍시다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">var listener: ((T) -&gt; Void)?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>return</code> 받는 값은 없으니 <code>Void</code>로 주고 <code>value</code> 값을 받아 처리해주어야 하니 <code>input</code> 파라미터로 <code>T</code>(제너릭 타입)을 받아줍시다.</p>\n<p>이제 이 <code>listener</code> 클로저를 <code>Observable</code> 코드에 적용시켜줍시다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Observable&lt;T&gt; &#123;\n\tvar value: T &#123;\n\t\tdidSet &#123;\n\t\t\tself.listener?(value)\n\t\t&#125;\n\t&#125;\n\n\tvar listener: ((T) -&gt; Void)?\n\n\tinit(_ value: T) &#123;\n\t\tself.value &#x3D; value\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"subscribe\"><a href=\"#subscribe\" class=\"headerlink\" title=\"subscribe\"></a>subscribe</h3><p><code>View</code>쪽에서 <code>subscribe</code> 안에서 클로저로 받는 함수를 <code>listener</code>에 담고 있다가 <code>didSet</code>이 호출되면 실행되야합니다.</p>\n<p>따라서 파라미터로 <code>@escaping</code> 클로저를 받아주고 클래스 내부의 <code>listener</code>에 담아줍시다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func subscribe(listener: @escaping (T) -&gt; Void) &#123;\n\tlistener(value)\n\tself.listener &#x3D; listener\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이 때 <code>listener(value)</code>와 같이 한 번 실행해줬기 때문에, <code>subscribe</code>와 동시에 무조건 한 번은 실행됩니다.</p>\n<p>binding과 동시에 실행을 하지 않고 싶은 경우에는 빼주어도 아무 문제 없습니다.</p>\n<h3 id=\"종합\"><a href=\"#종합\" class=\"headerlink\" title=\"종합\"></a>종합</h3><p>이제 코드들을 합쳐봅시다!</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class Observable&lt;T&gt; &#123;\n\tvar value: T &#123;\n\t\tdidSet &#123;\n\t\t\tself.listener?(value)\n\t\t&#125;\n\t&#125;\n\n\tvar listener: ((T) -&gt; Void)?\n\n\tinit(_ value: T) &#123;\n\t\tself.value &#x3D; value\n\t&#125;\n\n\tfunc subscribe(listener: @escaping (T) -&gt; Void) &#123;\n\t\tlistener(value)\n\t\tself.listener &#x3D; listener\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"사용\"><a href=\"#사용\" class=\"headerlink\" title=\"사용\"></a>사용</h2><pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">class HomeViewModel &#123;\n\tvar todoData: Observable&lt;[ToDo]&gt; &#x3D; Observable([])\n&#125;\n\nclass HomeViewController: UIViewController &#123;\n\tprivate var viewModel &#x3D; HomeViewModel()\n\n\tlazy var progressLabel &#x3D; UILabel().then &#123; ... &#125;\n\n\toverride func viewDidLoad() &#123;\n\t\tself.viewDidLoad()\n\t\tself.viewModel.todoData.subscribe &#123; todo in\n\t\t\tDispatchQueue.main.async &#123;\n\t\t\t\tself.progressLabel.text &#x3D; todo.count\n\t\t\t&#125;\n\t\t&#125;\n\n\t\tDispatchQueue.main.asyncAfter(deadline: .now() + 1) &#123;\n\t\t\tself.viewModel.todoData.value &#x3D; [\n\t\t\t\tToDo(title: &quot;Test&quot;, state: .completed)\n\t\t\t]\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"Rx 없이 View ➡️ ViewModel Binding하기Rx라는 놈 공부할 땐 어려웠는데..한 번 써보니까 없이 기능 구현을 할 때 갈증이 계속해서 일어나는 현상을 겪고 있습니다. 하지만 라이브러리에 의존하는 것은 좋지 않으니까 Rx 없이 데이터 바...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Rx-%EC%97%86%EC%9D%B4-View-%E2%9E%A1%EF%B8%8F-ViewModel-Binding%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">Rx 없이 View ➡️ ViewModel Binding하기</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#didSet\"><span class=\"toc-text\">didSet</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Observable\"><span class=\"toc-text\">Observable</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#value-T\"><span class=\"toc-text\">value: T</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#listener-%ED%81%B4%EB%A1%9C%EC%A0%80\"><span class=\"toc-text\">listener (클로저)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#subscribe\"><span class=\"toc-text\">subscribe</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%A2%85%ED%95%A9\"><span class=\"toc-text\">종합</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%82%AC%EC%9A%A9\"><span class=\"toc-text\">사용</span></a></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"39)🧰 Swift - Defer","uid":"32fd8798e5c3d3654084b9ba0acefdda","slug":"Allen/2022-12-02-Allen39","date":"2022-12-01T15:00:00.000Z","updated":"2023-03-31T10:35:18.090Z","comments":true,"path":"api/articles/Allen/2022-12-02-Allen39.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) Defer우리가 할 일을 미루는 것처럼 코드 실행도 미룰 수 있다면 어떨까요? Swift는 defer 키워드를 제공해서 블럭 안에 있는 구문들을 해당 스코프의 마지막까지 미뤄줄 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"37)🧰 Swift - 메모리 관리 (ARC)","uid":"c821c58f061b1a40d9641a5392a7fb36","slug":"Allen/2022-11-05-Allen37","date":"2022-11-04T15:00:00.000Z","updated":"2023-03-31T10:35:00.838Z","comments":true,"path":"api/articles/Allen/2022-11-05-Allen37.json","keywords":null,"cover":[],"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) ARC (Automatic Reference Counting)스위프트의 메모리 관리 모델값 형식과 참조 형식메모리 관리에 대해 공부하기 전에 메모리 관리가 어떤 때에 필요한 지 ...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}