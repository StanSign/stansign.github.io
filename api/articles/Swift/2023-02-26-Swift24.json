{"title":"24)🍎 Swift - Moya","uid":"3792db1f46c6369b4473f92f8ea4160f","slug":"Swift/2023-02-26-Swift24","date":"2023-02-25T15:00:00.000Z","updated":"2023-03-31T10:45:09.491Z","comments":true,"path":"api/articles/Swift/2023-02-26-Swift24.json","keywords":null,"cover":[],"content":"<h1 id=\"Moya\"><a href=\"#Moya\" class=\"headerlink\" title=\"Moya\"></a>Moya</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>모야가 대체 모야?</p></blockquote>\n<p>(아마 한국인이 작성한 모야 게시물 80%는 이걸로 시작할듯…)</p>\n<p>그래서 모야는 뭘까요?</p>\n<p>Moya는 <code>enum</code> 타입을 적극적으로 활용하여 네트워크 요청 레이어를 <code>type-safe</code>하게 래핑한 네트워킹 라이브러리입니다.</p>\n<p>컴파일 타임에 엔드포인트 접근 관련 에러를 띄워주기 때문에 더욱 안전하고 간편하게 앱을 빌드할 수 있다는 장점이 있다고 해요!</p>\n<h2 id=\"Alamofire와의-관계\"><a href=\"#Alamofire와의-관계\" class=\"headerlink\" title=\"Alamofire와의 관계?\"></a>Alamofire와의 관계?</h2><p>Swift 언어를 처음 학습할 때 <code>URLSession</code>을 공부한 뒤에 네트워크 관련된 유용한 라이브러리가 많다는 사실을 알고 어떤 것이 있나 살펴보던 때가 있었습니다.</p>\n<p>모두가 알고 있는 <code>Alamofire</code>, <code>Kingfisher</code>, <code>Moya</code> 등이 있었죠..</p>\n<p>그 중에서 <code>Kingfisher</code>는 이미지 관련 라이브러리니 남는 건 <code>Alamofire</code>와 <code>Moya</code>였습니다.</p>\n<p>아무것도 모르던 저는 <code>Moya</code>의 귀여운 이름에 끌려 무작정 공부를 시작했더랩죠..</p>\n<p>무슨 말인지 하나도 이해하지 못하고 <code>Alamofire</code>로 후퇴했었는데요.. 당연한거였습니다.</p>\n<p><code>Moya</code>의 네트워킹은 사실 <code>Alamofire</code>이기 때문이죠…!</p>\n<p><img src=\"https://i.imgur.com/nbxtcTj.png\"></p>\n<p>Dependency에 떡하니 박혀있는게 보이시죠..</p>\n<p><img src=\"https://i.imgur.com/sjBahL4.png\"></p>\n<p>사실 깃허브 설명란의 이미지에도 <code>Alamofire</code>가 하나의 계층을 떡하니 잡고 있는 걸 볼 수 있습니다..</p>\n<h2 id=\"개념\"><a href=\"#개념\" class=\"headerlink\" title=\"개념\"></a>개념</h2><p>모야를 이해하려면 세 가지 핵심 요소를 먼저 알아야합니다.</p>\n<h3 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h3><p><code>MoyaProvider</code> 객체로 접근할 수 있는 메인 객체입니다.</p>\n<p>네트워크 관련 기능을 사용하기 위해서는 무조건 이 <code>MoyaProvider</code> 객체를 생성하거나 주입받아야 합니다.</p>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h3><p>API를 제공하는 서비스를 부르는 명칭입니다.</p>\n<p>공개된 오픈 API일 수도 있고, 프로젝트 내부에서 사용되는 서버의 API일 수도 있겠죠.</p>\n<p>이 <code>Target</code>은 <code>TargetType</code> <code>protocol</code>을 사용해서 정의해줄 수 있습니다.</p>\n<h3 id=\"Endpoint\"><a href=\"#Endpoint\" class=\"headerlink\" title=\"Endpoint\"></a>Endpoint</h3><p><code>Endpoint</code>는 네트워킹 요청을 위해 필요한 정보들을 담는 객체입니다.</p>\n<p>HTTP 메서드, request body &#x2F; header 등의 정보들을 담고 있고, <code>Target</code> 또한 <code>MoyaProvider</code>에 의해 이 <code>Endpoint</code>로 변환되어 사용됩니다.</p>\n<p>이 <code>Endpoint</code>를 커스텀하면 모든 종류의 네트워킹에 필요한 데이터 맵핑을 수행할 수 있다고 하네요.</p>\n<h2 id=\"기초\"><a href=\"#기초\" class=\"headerlink\" title=\"기초\"></a>기초</h2><p>공식 문서보다는 코데코의 예제가 쉬워보이니까 코데코의 예제로 진행해보겠습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">public enum Marvel &#123;\n  static private let publicKey &#x3D; &quot;PUBLIC_KEY&quot;\n  static private let privateKey &#x3D; &quot;PRIVATE_KEY&quot;\n\n  case comics\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 <code>enum</code> 타입으로 API 서비스에 대한 정보를 넣어줄 수 있습니다.</p>\n<p><code>case</code>에는 필요한 API 엔드포인트마다 정의해주면 됩니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum MyService &#123;\n    case zen\n    case showUser(id: Int)\n    case createUser(firstName: String, lastName: String)\n    case updateUser(id: Int, firstName: String, lastName: String)\n    case showAccounts\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게요..!</p>\n<p>연관값으로 넣어준 파라미터들은 리퀘스트시에 파라미터가 필요할 경우 넣어주는 것으로 편하게 사용할 수 있습니다.</p>\n<p><code>Target</code>으로 사용될 <code>enum</code>은 반드시 <code>TargetType</code> 프로토콜을 채택해야 한다고 했었죠?</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Marvel: TargetType &#123;\n  public var baseURL: URL &#123;\n\t&#x2F;&#x2F;\n  &#125;\n\n  public var path: String &#123;\n\t&#x2F;&#x2F;\n  &#125;\n\n  public var method: Moya.Method &#123;\n\t&#x2F;&#x2F;\n  &#125;\n\n  public var sampleData: Data &#123;\n\t&#x2F;&#x2F;\n  &#125;\n\n  public var task: Moya.Task &#123;\n\t&#x2F;&#x2F;\n  &#125;\n\n  public var headers: [String : String]? &#123;\n\t&#x2F;&#x2F;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>프로토콜을 채택하고 필요한 프로퍼티들을 자동으로 넣어주면 위와 같은 형태가 됩니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Marvel: TargetType &#123;\n  public var baseURL: URL &#123;\n    return URL(string: &quot;https:&#x2F;&#x2F;gateway.marvel.com&#x2F;v1&#x2F;public&quot;)!\n  &#125;\n\n  public var path: String &#123;\n    switch self &#123;\n    case .comics: return &quot;&#x2F;comics&quot;\n    &#125;\n  &#125;\n\n  public var method: Moya.Method &#123;\n    switch self &#123;\n    case .comics: return .get\n    &#125;\n  &#125;\n\n  public var sampleData: Data &#123;\n    return Data()\n  &#125;\n\n  public var task: Moya.Task &#123; &#x2F;&#x2F; TODO: 알맞는 옵션으로 변경\n    return .requestPlain\n  &#125;\n\n  public var headers: [String : String]? &#123;\n    return [&quot;Content-Type&quot;: &quot;application&#x2F;json&quot;]\n  &#125;\n\n  public var validationType: ValidationType &#123;\n    return .successCodes\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"baseURL\"><a href=\"#baseURL\" class=\"headerlink\" title=\"baseURL\"></a>baseURL</h3><p>API 서비스의 <code>baseURL</code>을 입력해줍니다.</p>\n<h3 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h3><p><code>baseURL</code> 뒤에 붙는 요청 API의 <code>path</code> 주소를 입력해줍니다.</p>\n<p>예시의 경우 전체 API 요청 주소는 <a href=\"https://gateway.marvel.com/v1/public/comics\">https://gateway.marvel.com/v1/public/comics</a> 가 되겠죠!</p>\n<h3 id=\"method\"><a href=\"#method\" class=\"headerlink\" title=\"method\"></a>method</h3><p><code>path</code>에 맞는 HTTPS 통신 메서드를 반환해줍니다.</p>\n<p>ex) <code>.get</code>, <code>.delete</code>, <code>.patch</code> 등</p>\n<h3 id=\"sampleData\"><a href=\"#sampleData\" class=\"headerlink\" title=\"sampleData\"></a>sampleData</h3><p>유닛 테스트를 할 때나 실제로 서버가 없을 경우, 이 <code>sampleData</code>로 가상의 데이터를 담아주면 해당 데이터를 반환값으로 받아옵니다.</p>\n<p>필요하지 않을 경우  <code>Data()</code>를 반환하여 비어있는 데이터를 전달해줍니다!</p>\n<h3 id=\"task\"><a href=\"#task\" class=\"headerlink\" title=\"task\"></a>task</h3><p>요청에 파라미터를 포함하거나, 데이터를 포함하여 요청을 하는 등의 옵션들을 추가적으로 제공하여 HTTP 요청을 전송합니다.</p>\n<p>API가 요구하는 양식이나 서버의 상태등에 따라 너무나 다양한 경우가 있으므로 우선 아무런 옵션을 넣지 않는 <code>.requestPlain</code>을 선택해주었습니다.</p>\n<h3 id=\"headers\"><a href=\"#headers\" class=\"headerlink\" title=\"headers\"></a>headers</h3><p>HTTP 헤더를 넣어줍니다.</p>\n<p>예시에서는 가장 자주 쓰이는 <code>Content-Type: application/json</code>을 넣어주었습니다. (JSON 형식의 컨텐트)</p>\n<h3 id=\"validationType\"><a href=\"#validationType\" class=\"headerlink\" title=\"validationType\"></a>validationType</h3><p>필수적으로 필요한 항목은 아니지만, 자주 쓰이는 항목입니다.</p>\n<p><code>.successCodes</code>는 200..&lt;299 사이의 응답 코드를 받으면 통신을 성공했다고 처리하는 <code>case</code>입니다.</p>\n<p>이 <code>Target</code>만 봐도 <code>Moya</code>가 대충 어떤 느낌으로 쓰이는 지 알 수 있을 것 같네요.</p>\n<p>통신에 필요한 데이터들을 한 군데 모아두고 <code>switch-case</code>를 통해서 쉽게 요청 항목을 선택할 수 있을 것 같습니다.</p>\n<p><a href=\"https://developer.marvel.com/documentation/authorization\">https://developer.marvel.com/documentation/authorization</a></p>\n<p>이번에 사용하는 마블 API의 문서를 살펴보고, <code>task</code> 부분을 채워줍시다.</p>\n<p>Client-Side 앱은 사전에 인증이 되어 있어야 한다는군요.</p>\n<p>Server-Side 방식으로 진행해줍니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">public var task: Task &#123;\n  let ts &#x3D; &quot;\\(Date().timeIntervalSince1970)&quot;\n  let hash &#x3D; (ts + Marvel.privateKey + Marvel.publicKey).md5\n  let authParams &#x3D; [&quot;apikey&quot;: Marvel.publicKey, &quot;ts&quot;: ts, &quot;hash&quot;: hash]\n  \n  switch self &#123;\n  case .comics:\n\treturn .requestParameters(\n\t  parameters: [\n\t\t&quot;format&quot;: &quot;comic&quot;,\n\t\t&quot;formatType&quot;: &quot;comic&quot;,\n\t\t&quot;orderBy&quot;: &quot;-onsaleDate&quot;,\n\t\t&quot;dateDescriptor&quot;: &quot;lastWeek&quot;,\n\t\t&quot;limit&quot;: 50] + authParams,\n\t  encoding: URLEncoding.default)\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이제 실제로 API request를 보내봅시다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let provider &#x3D; MoyaProvider&lt;Marvel&gt;()\n\nprovider.request(.comics) &#123; result in\n  switch result &#123;\n  case .success(let response):\n\tdo &#123;\n\t  print(try response.mapJSON())\n\t&#125; catch &#123;\n\t  &#x2F;&#x2F; error handling\n\t&#125;\n  case .failure:\n\t&#x2F;&#x2F; error handling\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위와 같이 짧고 간결하게 통신 요청을 보낼 수 있습니다.</p>\n<p><img src=\"https://i.imgur.com/vxiOPZu.png\"></p>\n<p>엄청나게 많은 데이터들이 들어오는군요..</p>\n<p>이 데이터들을 감싸고 <code>View</code>에 적용하는 내용은 다른 HTTP 통신들과 같습니다.</p>\n<p><code>Moya</code>는 RxSwift와도 아주 잘 어울립니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">provider.rx.requestWithProgress(.zen).subscribe &#123; event in\n    switch event &#123;\n    case .next(let progressResponse):\n        if let response &#x3D; progressResponse.response &#123;\n            &#x2F;&#x2F; do something with response\n        &#125; else &#123;\n            print(&quot;Progress: \\(progressResponse.progress)&quot;)\n        &#125;\n    case .error(let error):\n        &#x2F;&#x2F; handle the error\n    default:\n        break\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이런식으로 기본적으로 Rx화도 되어있거든요. (패키지를 설치할 때 <code>Moya/RxSwift</code>도 함께 설치해주어야 합니다.)</p>\n<p>대략적인 사용 방법을 알았으니 실전에 적용해보기 위해 떠나보도록 하겠습니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>참고 문서</p></blockquote>\n<p><a href=\"https://www.kodeco.com/5121-moya-tutorial-for-ios-getting-started\">Kodeco - # Moya Tutorial for iOS: Getting Started</a></p>\n<p><a href=\"https://github.com/Moya/Moya/blob/master/docs/Examples/Basic.md\">Moya - Basic Usage</a></p>\n","text":"Moya 모야가 대체 모야? (아마 한국인이 작성한 모야 게시물 80%는 이걸로 시작할듯…) 그래서 모야는 뭘까요? Moya는 enum 타입을 적극적으로 활용하여 네트워크 요청 레이어를 type-safe하게 래핑한 네트워킹 라이브러리입니다. 컴파일 타...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"Swift","slug":"Swift","count":26,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Moya","slug":"Moya","count":1,"path":"api/tags/Moya.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Moya\"><span class=\"toc-text\">Moya</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Alamofire%EC%99%80%EC%9D%98-%EA%B4%80%EA%B3%84\"><span class=\"toc-text\">Alamofire와의 관계?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EA%B0%9C%EB%85%90\"><span class=\"toc-text\">개념</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Provider\"><span class=\"toc-text\">Provider</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Target\"><span class=\"toc-text\">Target</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Endpoint\"><span class=\"toc-text\">Endpoint</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EA%B8%B0%EC%B4%88\"><span class=\"toc-text\">기초</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#baseURL\"><span class=\"toc-text\">baseURL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#path\"><span class=\"toc-text\">path</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#method\"><span class=\"toc-text\">method</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sampleData\"><span class=\"toc-text\">sampleData</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#task\"><span class=\"toc-text\">task</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#headers\"><span class=\"toc-text\">headers</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#validationType\"><span class=\"toc-text\">validationType</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"21)🍎 Swift - Compositional Layout.01","uid":"8bbfe0d3b3501508bfc41548ddec18f1","slug":"Swift/2023-01-29-Swift21","date":"2023-01-28T15:00:00.000Z","updated":"2023-03-31T10:45:49.915Z","comments":true,"path":"api/articles/Swift/2023-01-29-Swift21.json","keywords":null,"cover":[],"text":"Compositional Layout 높은 반응성을 갖고 유연한 UI 조정이 가능한 item들을 조합하여 사용하는 레이아웃입니다. 애플이 Compositional Layout을 소개하면서 대표적으로 예시를 든 앱이 App Store와 사진 앱입니다. ...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Swift","slug":"Swift","count":26,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"feature":true},"next_post":{"title":"23)🍎 Swift - RxSwift Traits","uid":"2f437dcacf2ab858ae6b89a9091808ec","slug":"Swift/2023-02-23-Swift23","date":"2023-02-22T15:00:00.000Z","updated":"2023-03-31T10:45:36.146Z","comments":true,"path":"api/articles/Swift/2023-02-23-Swift23.json","keywords":null,"cover":null,"text":"TraitsTraits는 Observable의 한 종류라고 볼 수 있습니다. Traits는 UI 영역에서 복잡하고 다양한 기능이 있는 Observable 대신 사용되기 위해 만들어졌습니다. 따라서 RxCocoa와 아주 밀접한 관련이 있지만, 몇몇 기능...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Swift","slug":"Swift","count":26,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"RxSwift","slug":"RxSwift","count":2,"path":"api/tags/RxSwift.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}