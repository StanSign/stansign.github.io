{"title":"01)🎊 WWDC23 - What's new in UIKit","uid":"4932fe99e31aa6c7113fa36649ad4bc9","slug":"Swift/2023-06-07-Swift30","date":"2023-05-06T15:00:00.000Z","updated":"2023-06-07T08:14:04.967Z","comments":true,"path":"api/articles/Swift/2023-06-07-Swift30.json","keywords":null,"cover":"https://i.imgur.com/7ZMZmZ5.jpg","content":"<h1 id=\"WWDC23-What’s-new-in-UIKit\"><a href=\"#WWDC23-What’s-new-in-UIKit\" class=\"headerlink\" title=\"WWDC23 - What’s new in UIKit\"></a>WWDC23 - What’s new in UIKit</h1><p>드디어 WWDC23의 막이 열렸습니다!</p>\n<p><img src=\"https://i.imgur.com/b7Ne6Ui.jpg\"></p>\n<p>다들 <strong><strong>VisionOS</strong></strong>와 **<strong>Vision Pro</strong> **보셨나요??</p>\n<p>너무너무 놀라워서 당장이라도 공부하고 싶은 마음이 컸지만..</p>\n<p>스유와 ARKit을 모른다면 쉽게 접근할 수 없을 것 같더군요..! 😭</p>\n<p>그래서 여유가 좀 생긴다면 천천히 하나씩 공부해보려고 합니다!</p>\n<p>일단은 하던 UIKit에 집중해야죠!</p>\n<p>그래서 올해 덥덥디씨 공부의 시작을 <strong><strong>“What’s new in UIKit”</strong></strong>으로 시작해보려 합니다.</p>\n<h2 id=\"Architectural-Enhancements\"><a href=\"#Architectural-Enhancements\" class=\"headerlink\" title=\"Architectural Enhancements\"></a>Architectural Enhancements</h2><p>우선 <strong><strong>Architectural Enhancements</strong></strong>입니다! (이거 한국어로 뭐라고 번역해야하나요..)</p>\n<p>총 5가지의 파트로 나누어 설명되고 있습니다.</p>\n<h3 id=\"Xcode-Previews\"><a href=\"#Xcode-Previews\" class=\"headerlink\" title=\"Xcode Previews\"></a>Xcode Previews</h3><p>드디어 Preview를 UIKit 순정으로 사용할 수 있게 되었습니다! 👏👏</p>\n<p>원래는 UIKit에서 앱의 프리뷰를 앱 빌드 없이 보려면 SwiftUI의 feature를 빌려와서 사용해야 했죠.. 😭</p>\n<p>이제는 <code>import SwiftUI</code> 없이 순수 UIKit에서도 가능합니다!</p>\n<p>바로 새롭게 등장한 Swift의 macro 기능을 사용하는데요..!</p>\n<p><img src=\"https://i.imgur.com/TGikeo6.png\"></p>\n<p>오오… <code>#Preview</code>까지만 입력을 했는데도 옆에 Preview 화면이 바로 뜨네요… 😮</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token other-directive property\">#Preview</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Home\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> vc <span class=\"token operator\">=</span> <span class=\"token class-name\">HomeViewController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  vc<span class=\"token punctuation\">.</span>isBold <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">return</span> vc\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 새로운 macro를 사용해서 SwiftUI와 같이 Preview를 사용할 수 있게 되었습니다.</p>\n<p><code>vc.type = .edit</code>과 같이 vc의 프로퍼티나 메서드를 바꿔가면서 작업할 수도 있어요!</p>\n<p><img src=\"https://i.imgur.com/vqlSLJR.gif\"></p>\n<p>이렇게요..!</p>\n<p>근데요.. 문제가 하나 있습니다.</p>\n<p><img src=\"https://i.imgur.com/omAR5pU.png\"></p>\n<p>iOS 17부터거든요! 🥲 🥲 🥲</p>\n<p>아무래도 실제로 사용하기엔 시간이 조금 걸릴 것 같죠..?</p>\n<p><img src=\"https://i.imgur.com/fu2sBHj.png\"></p>\n<p>저는 일단은 <strong><strong>Debug</strong></strong> 타겟을 17.0으로 설정하니까 빌드는 되더라구요..</p>\n<p>나중에 Release할 때는 별도의 작업을 해주어야겠지만 우선은 이렇게 진행해보겠습니다.</p>\n<p><code>#Preview</code>가 정말 편리한 점은 <code>ViewController</code> 뿐만 아니라 <strong><code>UIView</code></strong> 에서도 사용할 수 있다는 점입니다.</p>\n<p><img src=\"https://i.imgur.com/TQgS5ac.png\"></p>\n<p>이렇게 다양한 크기의 컴포넌트로 시각화해주어서 혹시 모를 버그를 방지하는데도 큰 도움이 될 것 같네요.</p>\n<h3 id=\"ViewController-Life-Cycle\"><a href=\"#ViewController-Life-Cycle\" class=\"headerlink\" title=\"ViewController Life Cycle\"></a>ViewController Life Cycle</h3><p>다음으로는 <code>ViewController</code>의 Life Cycle에 변경점이 있습니다.</p>\n<p>새로운 콜백 함수가 추가되었는데요.. <code>viewIsAppearing</code>이라는 이름을 가지고 있습니다.</p>\n<p>이 <code>viewIsAppearing</code>은 <code>viewWillAppear</code>와 <code>viewDidAppear</code> 사이에 호출된다고 하는데요..!</p>\n<p>그냥 <code>viewWillAppear</code>를 사용하면 되는거 아니냐! 했지만..</p>\n<p><code>viewIsAppearing</code>이 호출되는 시점은 UI의 <strong><strong>trait collection이 구성</strong></strong>되었고, 각 컴포넌트들이 <strong><strong>UI 계층(hierarchy)에 추가되고 확정된 시점</strong></strong>이라고 합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span><span class=\"token function\">addSubview</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>snp<span class=\"token punctuation\">.</span>makeConstraints <span class=\"token punctuation\">&#123;</span> make <span class=\"token keyword\">in</span>\n    make<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span><span class=\"token function\">equalToSuperview</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">viewWillAppear</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> animated<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewWillAppear</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"View will Appear: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>frame</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">viewIsAppearing</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> animated<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewIsAppearing</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"View is Appearing: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>frame</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">viewDidAppear</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> animated<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidAppear</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"View did Appear: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>frame</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>자 그럼 이렇게 해두면 어떻게 출력되나 한 번 볼까요?</p>\n<p><img src=\"https://i.imgur.com/7YqKVqz.png\"></p>\n<p>🤔 🤔 🤔 레이아웃이 안잡혀있는데요..?</p>\n<p>뭥미..</p>\n<p><img src=\"https://i.imgur.com/TMrnMok.png\"></p>\n<p>라고 삽질을 하던 중 다음 화면에서 해답을 찾을 수 있었습니다.</p>\n<p><code>viewIsAppearing</code>은 <code>LayoutSubviews</code>들 보다는 앞에 콜백되거든요! 🫣</p>\n<p><code>viewIsAppearing</code>이 등장한 배경은 다음과 같습니다.</p>\n<ol>\n<li><p><code>viewWillAppear</code>는 컴포넌트들이 계층에 추가되기 이전에 콜백되기 때문에 <code>trait collection</code>을 사용하거나 <code>view</code>의 사이즈와 위치에 따른 로직을 추가하기에는 <strong>너무 이릅니다.</strong></p>\n</li>\n<li><p><code>viewDidAppear</code>는  모든 애니메이션이 끝난 후에 콜백되기 때문에 업데이트할 요소들이 <strong>너무 늦게</strong> 업데이트 되고, 유저들은 이를 직접 보게 된다.</p>\n</li>\n<li><p><code>layoutSubviews</code>들과 같은 시기에 콜백되는 함수가 필요하다…!</p>\n</li>\n</ol>\n<p>그러면 그냥 <code>layoutSubviews</code>에서 작업하면 되는거 아닌가요? 라는 질문이 생기던 찰나 바로 또 설명해주십니다.</p>\n<p><code>layoutSubviews</code>들은 transition이 있을 때, 혹은 <code>view</code>가 visible한 동안 <strong>몇 번이고 호출</strong> 될 수 있지만, <code>viewIsAppearing</code>은 transition당 <strong>딱 한 번</strong> 만 호출됩니다.</p>\n<p>또한 레이아웃을 잡는 동작이 필요가 없을 때도 호출되기 때문에 유용한 상황도 있겠죠!</p>\n<h3 id=\"Trait-System-Enhancements\"><a href=\"#Trait-System-Enhancements\" class=\"headerlink\" title=\"Trait System Enhancements\"></a>Trait System Enhancements</h3><p>위 내용과 이어지는 내용인 것 같네요!</p>\n<p>이건 근데 아직 제가 학습하지 못한 내용이라…</p>\n<p><img src=\"https://i.imgur.com/2eJ43l2.png\"></p>\n<p>이런 내용이 있다는 것만 알아두고 넘어가겠습니다..</p>\n<p>마침 세션 중에 관련 세션이 있는 것 같아 거기서부터 시작해볼 것 같네요!</p>\n<p>원래는 프레임워크에서 제공하는 형태의 trait만 사용할 수 있었지만, 이제는 커스텀하여 만들 수 있다! 라는 것이 핵심인 것 같습니다.</p>\n<h3 id=\"Animated-Symbol-Images\"><a href=\"#Animated-Symbol-Images\" class=\"headerlink\" title=\"Animated Symbol Images\"></a>Animated Symbol Images</h3><p>애플은 아이콘을 SF Symbols를 통해 제공하고 있죠?</p>\n<p>이 아이콘들을 사용하면 추가적인 노력 없이 앱 전반적으로 통일된 질감을 낼 수 있는 것이 큰 장점입니다.</p>\n<p>이제 이 SF Symbols에 <strong>애니메이션</strong>이 추가된다고 하네요.</p>\n<p>심지어 기본으로 제공되는 Symbol 외에도 커스텀 Symbol에도 적용할 수 있다고 합니다.</p>\n<p>그래서 어떻게 하냐?.. 기본은 짱 쉽습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>imageView<span class=\"token punctuation\">.</span><span class=\"token function\">addSymbolEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>bounce<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>이렇게 <code>.bounce</code> 이펙트를 추가해주면 한 번 bounce 됩니다.</p>\n<p><img src=\"https://i.imgur.com/zZiHQA1.gif\"></p>\n<p>ㅋㅋㅋㅋㅋ 귀엽지 않나요..</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>imageView<span class=\"token punctuation\">.</span><span class=\"token function\">addSymbolEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>variableColor<span class=\"token punctuation\">.</span>dimInactiveLayers<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>imageView<span class=\"token punctuation\">.</span><span class=\"token function\">removeSymbolEffect</span><span class=\"token punctuation\">(</span>ofType<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>variableColor<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>.bounce</code>와는 다르게 <code>.variableColor</code>는 이펙트를 제거해줄 때까지 반복됩니다.</p>\n<p><img src=\"https://i.imgur.com/AnK4ubR.gif\"></p>\n<p>이렇게요!</p>\n<p>이 외에도 여러가지 이펙트들이 있습니다.</p>\n<p><img src=\"https://i.imgur.com/YO72P21.png\"></p>\n<p>이 내용 또한 별도의 세션으로 준비되어 있다고 하네요.</p>\n<p>거기서 더 자세히 살펴보도록 합시다!</p>\n<h3 id=\"Empty-States\"><a href=\"#Empty-States\" class=\"headerlink\" title=\"Empty States\"></a>Empty States</h3><p>생각치도 못한 기능이 UIKit에 추가되었습니다.</p>\n<p>바로 비어있는 화면 Configuration!</p>\n<p>근데 그 전에 이것 좀 봐주세요..</p>\n<p><img src=\"https://i.imgur.com/wZ6rwci.gif\"></p>\n<p>😆 😆 😆 너무 귀여우셔…</p>\n<p>그래서 이렇게 귀엽게 소개하신 내용이 뭐냐면요..</p>\n<p><img src=\"https://i.imgur.com/LhWIoJ2.png\"></p>\n<p>이렇게 <strong>컨텐츠가 없는 비어있는 화면</strong> 입니다.</p>\n<p>정말 순수하게 컨텐츠가 없거나 네트워크 오류로 인해 불러올 수 없는 등 화면에 <strong>아무것도 표시할 수 없는 경우</strong> 들이 있죠?</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">\n<span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">UIContentUnavailableConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconfig<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> <span class=\"token class-name\">UIImage</span><span class=\"token punctuation\">(</span>systemName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"star.fill\"</span></span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"No Favorites\"</span></span>\nconfig<span class=\"token punctuation\">.</span>secondaryText <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Your favorite translations will appear here.\"</span></span>\n\nviewController<span class=\"token punctuation\">.</span>contentUnavailableConfiguration <span class=\"token operator\">=</span> config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>그럴 때 이렇게 간단하게 비어있는 화면에 대한 핸들링을 해줄 수가 있게 되었습니다.</p>\n<p><code>ViewController</code> 내부에서 사용할 수 있는 방법은요?</p>\n<p><strong><code>updateContentUnavailableConfiguration(using state:)</code></strong> 메서드를 <code>override</code>해서 사용해주면 됩니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">updateContentUnavailableConfiguration</span><span class=\"token punctuation\">(</span>\n  using state<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIContentUnavailableConfigurationState</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> config<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIContentUnavailableConfiguration</span><span class=\"token operator\">?</span>\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>searchResults<span class=\"token punctuation\">.</span>isEmpty <span class=\"token punctuation\">&#123;</span>\n    config <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>contentUnavailableConfiguration <span class=\"token operator\">=</span> config\n<span class=\"token punctuation\">&#125;</span>      <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 <code>contentUnavailableConfiguration</code>을 교체해주는 로직들을 넣어주고, 변경이 필요한 곳에서</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">setNeedsUpdateContentUnavailableConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>를 호출해주면 됩니다.</p>\n<p>아주 간단하죠!</p>\n<h2 id=\"Internationalization\"><a href=\"#Internationalization\" class=\"headerlink\" title=\"Internationalization\"></a>Internationalization</h2><p>다음 파트는 국제화입니다.</p>\n<p>이 파트는 사실 접할 기회가 많진 않을 것 같아서 관심 있는 분야만 살펴볼게요..</p>\n<h3 id=\"Wrapping-and-Hyphenation\"><a href=\"#Wrapping-and-Hyphenation\" class=\"headerlink\" title=\"Wrapping and Hyphenation\"></a>Wrapping and Hyphenation</h3><p>전 파트가 사실 아랍 문자와 관련된 내용이라 흠.. 하면서 보고 있었는데요.</p>\n<p>이 파트로 넘어오며 한국어가 언급돼서 엇! 하면서 다시 집중해서 보게 되었습니다.</p>\n<p>중국어, 독일어, 일본어, 그리고 한국어의 <strong>line-breaking</strong> 에 향상이 있다고 하네요.</p>\n<p>대부분의 경우에는</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token class-name\">UILabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlabel<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"안녕하세요!\"</span></span>\nlabel<span class=\"token punctuation\">.</span>traitOverrides<span class=\"token punctuation\">.</span>typesettingLanguage <span class=\"token operator\">=</span> <span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">(</span>identifier<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ko\"</span></span><span class=\"token punctuation\">)</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 <code>typesettingLanguage</code> trait을 설정해주는 것 만으로도 line-height와 hyphenation rule을 설정해줄 수 있다고 하네요.</p>\n<p><code>UIImage</code>를 받아올 때도 Locale에 따라 다른 크기를 받아올 수 있다고 합니다.</p>\n<p><code>UIImage</code>의 <code>font</code> 크기가 <code>UILabel</code>의 크기와 맞지 않는 경우에 직접 값을 비교해가며 넣느라 고생한 경험이 있는데, 그 문제가 해결된 것 같습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> locale <span class=\"token operator\">=</span> <span class=\"token class-name\">Locale</span><span class=\"token punctuation\">(</span>languageCode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>korean<span class=\"token punctuation\">)</span>\n\nimageView<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> <span class=\"token class-name\">UIImage</span><span class=\"token punctuation\">(</span>\n  systemName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"character.textbox\"</span></span><span class=\"token punctuation\">,</span>\n  withConfiguration<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIImage</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SymbolConfiguration</span><span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">:</span> locale<span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>자동으로 되는 것은 아니고, 이렇게 <code>locale</code>을 <code>configuration</code>으로 제공해주는 것으로 적용이 가능합니다.</p>\n<h2 id=\"General-Enhancements\"><a href=\"#General-Enhancements\" class=\"headerlink\" title=\"General Enhancements\"></a>General Enhancements</h2><p>아이패드 부분은 우선 쭉 넘어가고…</p>\n<p>전반적인 향상 부분을 살펴보도록 하겠습니다.</p>\n<h3 id=\"CollectionView-Improvements\"><a href=\"#CollectionView-Improvements\" class=\"headerlink\" title=\"CollectionView Improvements\"></a>CollectionView Improvements</h3><p><code>CollectionView</code>가 성능적으로 더! 향상되었다고 하네요..</p>\n<p><img src=\"https://i.imgur.com/mT6cwuC.png\"></p>\n<p>대략 10000개의 아이템이 있을 때, iOS 16에 대비해서 두배정도 빠르다고 합니다.</p>\n<p>10000개의 아이템까지 표현할 일이 있을까..? 싶긴 한데.. 아무튼 빨라서 안좋을 건 없으니까요?</p>\n<p>이 최적화는 <code>Snapshot</code>을 사용하는 방법, <code>batchUpdate</code>를 사용하는 방법 모두에게 통용된다네요!</p>\n<p>근데 어떻게 한 건지는 설명을 안해서.. 그냥 그렇다고 알고 넘어가라는 것 같습니다…</p>\n<p>다음으로는 <strong><code>CompositionalLayout</code></strong> 의 향상점입니다.</p>\n<p>제가 아주 사랑하는 <code>CompositionalLayout</code>.. 얼마나 발전했나 볼까요?</p>\n<p><img src=\"https://i.imgur.com/JAyvuNA.png\"></p>\n<p>적용 예시로 애플이 가져온 아이패드의 건강 앱입니다.</p>\n<p>두 Item 모두 <code>.estimated</code> 레이아웃 사이즈로 구현되었다고 하는데요.. 잘 보면 두 아이템의 높이가 다릅니다.</p>\n<p>그러니까 Item 자체의 사이즈가 다르지만, 하나의 그룹으로 묶여있기 때문에 하단 영역이 남아있는 모습인 것이죠.</p>\n<p>이를 해결하기 위해 새로운 <code>layoutDimension</code>이 소개되었습니다.</p>\n<p><strong><code>uniformAcrossSiblings</code></strong> 이라는 이름으로 등장했네요.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token class-name\">NSCollectionLayoutDimension</span><span class=\"token punctuation\">.</span><span class=\"token function\">uniformAcrossSiblings</span><span class=\"token punctuation\">(</span>estimate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>하나의 그룹안에 있는 아이템들이 <strong>가장 큰 아이템의 크기에 맞춰지는 것</strong> 을 볼 수 있네요.</p>\n<p><img src=\"https://i.imgur.com/dA4P89u.png\"></p>\n<p>이렇게 끝 지점이 달라서 불편했던 레이아웃을</p>\n<p><img src=\"https://i.imgur.com/016g0fj.png\"></p>\n<p>그룹 내의 가장 큰 아이템에 맞춰 높이를 통일 시킬 수 있게 되었습니다.</p>\n<p>편안… 😌</p>\n<h3 id=\"Spring-Animation-Parameters\"><a href=\"#Spring-Animation-Parameters\" class=\"headerlink\" title=\"Spring Animation Parameters\"></a>Spring Animation Parameters</h3><p>Spring Animation의 파라미터를 두 가지로 줄이는 향상이 있다고 합니다.</p>\n<p><strong><code>duration</code></strong> 과 <strong><code>bounce</code></strong> 이렇게 두 가지로요.</p>\n<p><code>duration</code>은 애니메이션 전체에 걸리는 시간이 아니라 변환 위치에 다다르는 시간입니다. <code>bounce</code>와는 완벽하게 독립적으로 동작한다고 하네요.</p>\n<p><code>bounce</code>는 말 그대로 튕기는 정도를 조절할 수 있는 파라미터 입니다.</p>\n<p>이 두 파라미터는 <code>UIView.animate</code>에 바로 적용할 수 있습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token class-name\">UIView</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>springDuration<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> bounce<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>circle<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>이 두 파라미터는 <strong>Optional</strong> 파라미터라서 </p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token class-name\">UIView</span><span class=\"token punctuation\">.</span>animate <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>circle<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 파라미터 없이 사용하게 되면 시스템이 정해둔 기본값으로 동작합니다.</p>\n<h3 id=\"Text-Interactions\"><a href=\"#Text-Interactions\" class=\"headerlink\" title=\"Text Interactions\"></a>Text Interactions</h3><p>텍스트 입력 커서와 테스트 선택에 새로운 API들이 제공됩니다.</p>\n<p>이제 <code>UITextInteraction</code>을 통째로 가져와 적용하는 대신, 선택한 텍스트에 대한 UI만 사용할 수 있다고 합니다.</p>\n<p>새로운 API들은 <code>UITextViewDelegate</code>를 채택하면서 사용할 수 있으며, <code>link</code>와 <code>text attachments</code>를 더 자유자재로 사용할 수 있도록 한다고 합니다.</p>\n<p>추가로 <code>link</code>가 아닌 텍스트에 대해서도 인터랙션 액션을 추가할 수 있는 API도 추가되었다고 하네요!</p>\n<p>다만 이 부분은 제가 적용해본 적이 없어서 제대로 이해한 것인지 모르겠네요..</p>\n<h3 id=\"Default-StatusBar-Style\"><a href=\"#Default-StatusBar-Style\" class=\"headerlink\" title=\"Default StatusBar Style\"></a>Default StatusBar Style</h3><p>이런 경우 아주 많을 겁니다.</p>\n<p><img src=\"https://i.imgur.com/WJLprVz.png\"></p>\n<p>이 경우 라이트 모드라서 검정색의 StatusBar가 사용되고 있습니다.</p>\n<p>하지만 컨텐츠를 위로 스크롤하면..?</p>\n<p><img src=\"https://i.imgur.com/X517MBq.png\"></p>\n<p>쨔잔.. 이렇게 컨텐츠와 StatusBar가 겹쳐보이면서 원래라면 검정색의 StatusBar가 안보이게 됐겠지만,</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">var</span> preferredStatusBarStyle<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIStatusBarStyle</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 <code>.default</code>로 설정해두면 알아서 뒤에 <strong>배치된 컨텐츠에 따라 색상을 바꾼</strong> 다고 하네요.</p>\n<p><img src=\"https://i.imgur.com/zBOGISh.png\"></p>\n<p>심지어 이 변화는 양쪽이 별개로 작동합니다.</p>\n<p>아주 굿! 👍</p>\n<h3 id=\"Drag-and-Drop-Enhancements\"><a href=\"#Drag-and-Drop-Enhancements\" class=\"headerlink\" title=\"Drag and Drop Enhancements\"></a>Drag and Drop Enhancements</h3><p><img src=\"https://i.imgur.com/Au3NjAt.gif\"></p>\n<p>이 부분은 직접 보는게 빠를 것 같아요!</p>\n<p>이제 드래그 &amp; 드롭이 가능한 컨텐츠는 컨텐츠의 종류에 따라 앱 아이콘에 드롭하는 것 만으로도 특정 액션을 할 수 있습니다.</p>\n<p><code>Info.plist</code> 의 <code>CFBundleDocumentTypes</code>에 해당 파일의 형식이 지원하는 지를 설정해주면 바로 사용할 수 있습니다.</p>\n<p>이렇게 설정된 형식의 파일은 <code>UIScene</code> delegate 콜백에 의해 처리된다고 하네요!</p>\n<h3 id=\"ISO-HDR-Image-Support\"><a href=\"#ISO-HDR-Image-Support\" class=\"headerlink\" title=\"ISO HDR Image Support\"></a>ISO HDR Image Support</h3><p>UIKit에서 이제 <code>UIImageView</code>나 <code>UIGraphicsImageRenderer</code>에서 ISO HDR 이미지를 쉽게 사용할 수 있습니다.</p>\n<p>이 부분도 관련 세션에서 자세하게 다룬다고 합니다..</p>\n<h3 id=\"PageControl\"><a href=\"#PageControl\" class=\"headerlink\" title=\"PageControl\"></a>PageControl</h3><p><code>UIPageControl</code>은 자동 전환되는 배너로 많이 쓰이고 있죠.</p>\n<p>그 쓰임새를 강화할 수 있도록 <code>UIPageControl</code>에 <strong>타이머</strong> 가 추가되었습니다.</p>\n<p><img src=\"https://i.imgur.com/pDCQray.png\"></p>\n<p>단순히 점만 있던 것을 넘어 이제 <strong>현재 페이지가 얼마나 진행되었는지</strong> 를 시각적으로 제공하네요.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> timerProgress <span class=\"token operator\">=</span> <span class=\"token class-name\">UIPageControlTimerProgress</span><span class=\"token punctuation\">(</span>preferredDuration<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\npageControl<span class=\"token punctuation\">.</span>progress <span class=\"token operator\">=</span> timerProgress\n\ntimerProgress<span class=\"token punctuation\">.</span><span class=\"token function\">resumeTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>UIPageControl</code>의 새로운 <code>progress</code> 프로퍼티를 활용해서 쉽게 사용할 수 있습니다.</p>\n<p>그리고 무려… <strong>빌트인 타이머</strong> 가 생겼다고 해요..</p>\n<p>타이머가 될 때마다 다음 페이지로 알아서 넘어가는 것은 물론이고,</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">myTimer<span class=\"token punctuation\">.</span>addPeriodicTimeObserver <span class=\"token punctuation\">&#123;</span> timer <span class=\"token keyword\">in</span>\n  progress<span class=\"token punctuation\">.</span>currentProgress <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">/</span> timer<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 직접 <code>progress</code>를 설정해줄 수도 있어요!</p>\n<p>이제 자동 무한 스크롤 배너를 아주 쉽게 구현할 수 있겠네요.</p>\n<h3 id=\"Palette-Menus\"><a href=\"#Palette-Menus\" class=\"headerlink\" title=\"Palette Menus\"></a>Palette Menus</h3><p><img src=\"https://i.imgur.com/NG02D3t.png\"></p>\n<p>아니 진짜 이분 왜 이렇게 귀여우신 건데요..</p>\n<p>아무튼..</p>\n<p><img src=\"https://i.imgur.com/iTBMhoL.png\"></p>\n<p>이런 색상을 선택하는 메뉴가 지금도 이곳저곳에 있었죠..?</p>\n<p>이제 <code>Palette</code> 메뉴를 기본적으로 제공한다고 합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token class-name\">UIMenu</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">.</span>displayInline<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>displayAsPalette <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>이렇게 <code>UIMenu</code>에 넣어주는 것으로 간편하게 사용할 수 있습니다.</p>\n<p>색상 뿐만 아니라</p>\n<p><img src=\"https://i.imgur.com/eapBv2I.png\"></p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token class-name\">UIAction</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIImage</span><span class=\"token punctuation\">(</span>systemName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"heart.fill\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>이렇게 이미지도 넣어줄 수 있네요.</p>\n<p>이미지의 경우 <code>.on</code> 상태일 때 <code>tintColor</code>로 하이라이트 된다고 합니다.</p>\n<hr>\n<p>여기까지가 “What’s new in UIKit” 세션의 내용이였습니다.</p>\n<p>Preview와 StatusBar, Progress가 접목된 PageControl..</p>\n<p>마음에 드는 내용들이 잔뜩 있었네요. 👍</p>\n<p>다른 세션도 얼른 공부하러 출동!  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>참고 문서</p></blockquote>\n<p><a href=\"https://developer.apple.com/wwdc23/10055\">WWDC21 - What’s new in UIKit</a></p>\n","feature":true,"text":"WWDC23 - What’s new in UIKit드디어 WWDC23의 막이 열렸습니다! 다들 VisionOS와 **Vision Pro **보셨나요?? 너무너무 놀라워서 당장이라도 공부하고 싶은 마음이 컸지만.. 스유와 ARKit을 모른다면 쉽게 접근...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"},{"name":"WWDC23","slug":"Swift/WWDC23","count":1,"path":"api/categories/Swift/WWDC23.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"WWDC23","slug":"WWDC23","count":1,"path":"api/tags/WWDC23.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#WWDC23-What%E2%80%99s-new-in-UIKit\"><span class=\"toc-text\">WWDC23 - What’s new in UIKit</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Architectural-Enhancements\"><span class=\"toc-text\">Architectural Enhancements</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Xcode-Previews\"><span class=\"toc-text\">Xcode Previews</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ViewController-Life-Cycle\"><span class=\"toc-text\">ViewController Life Cycle</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Trait-System-Enhancements\"><span class=\"toc-text\">Trait System Enhancements</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Animated-Symbol-Images\"><span class=\"toc-text\">Animated Symbol Images</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Empty-States\"><span class=\"toc-text\">Empty States</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Internationalization\"><span class=\"toc-text\">Internationalization</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Wrapping-and-Hyphenation\"><span class=\"toc-text\">Wrapping and Hyphenation</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#General-Enhancements\"><span class=\"toc-text\">General Enhancements</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CollectionView-Improvements\"><span class=\"toc-text\">CollectionView Improvements</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-Animation-Parameters\"><span class=\"toc-text\">Spring Animation Parameters</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Text-Interactions\"><span class=\"toc-text\">Text Interactions</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Default-StatusBar-Style\"><span class=\"toc-text\">Default StatusBar Style</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Drag-and-Drop-Enhancements\"><span class=\"toc-text\">Drag and Drop Enhancements</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ISO-HDR-Image-Support\"><span class=\"toc-text\">ISO HDR Image Support</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PageControl\"><span class=\"toc-text\">PageControl</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Palette-Menus\"><span class=\"toc-text\">Palette Menus</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"29)🍎 Swift - 인스타그램 스토리로 공유하기","uid":"96468e592e7cdf6f399481c66d5c9acd","slug":"Swift/2023-05-30-Swift29","date":"2023-05-06T15:00:00.000Z","updated":"2023-05-30T12:59:42.038Z","comments":true,"path":"api/articles/Swift/2023-05-30-Swift29.json","keywords":null,"cover":"https://i.imgur.com/YnrGnKE.png","text":"인스타그램 스토리 공유오늘은 앱에서 얻어낸 사진을 인스타그램 스토리로 공유하는 법을 공부해보겠습니다. Instagram - Sharing to stories 해당 문서를 따라가며 진행해보죠! 앱 ID 휙득하기 가장 먼저 눈에 띄는 경고문이 있네요! 다...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Favor","slug":"Favor","count":6,"path":"api/tags/Favor.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"feature":true}}