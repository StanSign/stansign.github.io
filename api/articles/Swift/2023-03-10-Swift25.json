{"title":"25)🍎 Swift - Package","uid":"06d14767cdd4b129532d498df40afc71","slug":"Swift/2023-03-10-Swift25","date":"2023-03-09T15:00:00.000Z","updated":"2023-03-31T14:12:42.282Z","comments":true,"path":"api/articles/Swift/2023-03-10-Swift25.json","keywords":null,"cover":"https://i.imgur.com/nheVjo5.png","content":"<h1 id=\"Package-패키지\"><a href=\"#Package-패키지\" class=\"headerlink\" title=\"Package (패키지)\"></a>Package (패키지)</h1><p><img src=\"https://i.imgur.com/wiNIbnk.png\"></p>\n<p>패키지란 프로젝트 내에서 사용하는 코드&#x2F;리소스들을 재사용하기 쉽도록 묶어 정돈하거나 다른 개발자나 커뮤니티와 공유하기 위한 기능입니다.</p>\n<p>Xcode는 이런 패키지 기능을 Swift Package Manager를 통해 쉽고 간편하게 사용할 수 있도록 지원하고 있습니다.</p>\n<p>네 맞아요..</p>\n<p>저희가 맨날 쓰던 그거요..</p>\n<p>그러면 멋있고 화려한 RxSwift와 같은 라이브러리를 만들기 위해 시작해보죠?</p>\n<h2 id=\"Swift-Package-만들기\"><a href=\"#Swift-Package-만들기\" class=\"headerlink\" title=\"Swift Package 만들기\"></a>Swift Package 만들기</h2><p><img src=\"https://docs-assets.developer.apple.com/published/ce439cc5d6ba4621ef3eb70fe9168526/creating-a-swift-package-with-xcode-1@2x.png\" alt=\"Flowchart showing the development lifecycle for a Swift package.\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>전반적인 패키지 생성 과정</p></blockquote>\n<p><img src=\"https://i.imgur.com/adw5bti.png\"></p>\n<p>패키지 만들기 정말 쉽습니다.</p>\n<p>Xcode의 메뉴에서 <code>File ➡️ New ➡️ Package</code> 를 눌러줍시다.</p>\n<p><img src=\"https://i.imgur.com/fxGMBSw.png\"></p>\n<p>그러면 이렇게 프로젝트나 파일을 만드는 것과 같이 패키지를 생성하는 창이 보입니다.</p>\n<p>저는 Favor 프로젝트에 패키지를 적용하기 위해 Add to와  Group도 설정해주었습니다.</p>\n<p>그러면 비어있는 패키지 만들기 끝입니다.</p>\n<p><img src=\"https://i.imgur.com/ZcS8ZSl.png\"></p>\n<p>패키지를 생성하면 이런 구조의 파일들이 프로젝트에 추가됩니다. 각각을 한 번 알아볼까요?</p>\n<ul>\n<li>README.md</li>\n</ul>\n<p>뭐 설명할 것도 없죠. 패키지에 대한 설명을 넣어주면 됩니다.</p>\n<ul>\n<li>Package.swift</li>\n</ul>\n<p>흔히들 manifest라고 부르는 패키지에 대한 정보가 담긴 파일입니다. 이 파일 안에서 패키지의 name, products, targets, dependencies들을 설정해주게 됩니다.</p>\n<ul>\n<li>Sources</li>\n</ul>\n<p>소스 파일들은 이 Sources 디렉토리 내부에 위치합니다. 그리고 Target이라는 하나의 이름 안에 관리됩니다.</p>\n<ul>\n<li>Tests</li>\n</ul>\n<p>패키지에 대한 Unit Test 코드들이 여기에 해당됩니다.</p>\n<h2 id=\"Package-swift-작성\"><a href=\"#Package-swift-작성\" class=\"headerlink\" title=\"Package.swift 작성\"></a>Package.swift 작성</h2><p>Favor 프로젝트는 세가지 패키지를 만들어 사용하기로 했습니다.</p>\n<ul>\n<li>FavorCoreKit</li>\n</ul>\n<p><code>Foundation</code>의 <code>extension</code>들, OS와 밀접하게 닿아있는 기능들 (<code>PhotosUI</code>, <code>CoreGraphics</code> 등)을 담아둡니다.<br>보통 <code>BaseViewController</code>와 같은 <code>Base</code> 파일들도 여기에 담긴다고 하는데 아직 저희 프로젝트는 이런 파일들이 많지 않아서 (<code>BaseVC</code> 하나) 추가적인 회의를 통해 결정하기로  했습니다.</p>\n<ul>\n<li>FavorUIKit</li>\n</ul>\n<p><code>UIKit</code>의 <code>extension</code>들과 커스텀 UI 컴포넌트들, 폰트와 아이콘 같은 Resources들과 UI에 사용되는 상수 파일들이 포합됩니다.</p>\n<ul>\n<li>FavorNetworkKit</li>\n</ul>\n<p>HTTP 통신과 같은 네트워크 작업에 필요한 파일들이 모두 포함됩니다. 저희 프로젝트는 <code>Moya</code>를 사용하기 때문에 <code>BaseTargetType</code>과 <code>API</code> 파일들을 여기에 넣어주었습니다.</p>\n<p>이 중에서 FavorUIKit을 한 번 살펴보겠습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">&#x2F;&#x2F; swift-tools-version: 5.7\n&#x2F;&#x2F; The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package &#x3D; Package(\n  name: &quot;FavorUIKit&quot;,\n  platforms: [\n    .iOS(.v15)\n  ],\n  products: [\n    &#x2F;&#x2F; Products define the executables and libraries a package produces, and make them visible to other packages.\n    .library(\n      name: &quot;FavorUIKit&quot;,\n      targets: [&quot;FavorUIKit&quot;]),\n  ],\n  dependencies: [\n    &#x2F;&#x2F; Dependencies declare other packages that this package depends on.\n    &#x2F;&#x2F; .package(url: &#x2F;* package url *&#x2F;, from: &quot;1.0.0&quot;),\n    .package(url: &quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveX&#x2F;RxSwift.git&quot;, .upToNextMajor(from: &quot;6.5.0&quot;)),\n    .package(url: &quot;https:&#x2F;&#x2F;github.com&#x2F;SnapKit&#x2F;SnapKit.git&quot;, .upToNextMajor(from: &quot;5.6.0&quot;)),\n    .package(path: &quot;..&#x2F;FavorCoreKit&quot;)\n  ],\n  targets: [\n    &#x2F;&#x2F; Targets are the basic building blocks of a package. A target can define a module or a test suite.\n    &#x2F;&#x2F; Targets can depend on other targets in this package, and on products in packages this package depends on.\n    .target(\n      name: &quot;FavorUIKit&quot;,\n      dependencies: [\n        &quot;RxSwift&quot;,\n        .product(name: &quot;RxCocoa&quot;, package: &quot;RxSwift&quot;),\n        &quot;SnapKit&quot;,\n        &quot;FavorCoreKit&quot;\n      ],\n      resources: [\n        .process(&quot;Resources&quot;)\n      ]\n    ),\n    .testTarget(\n      name: &quot;FavorUIKitTests&quot;,\n      dependencies: [&quot;FavorUIKit&quot;]),\n  ]\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h4><p><code>name</code>은 말 그대로 패키지의 이름입니다.</p>\n<h4 id=\"platforms\"><a href=\"#platforms\" class=\"headerlink\" title=\"platforms\"></a>platforms</h4><p><code>platforms</code>는 패키지가 사용될 수 있는 플랫폼을 명시해둡니다. <code>.iOS</code>, <code>.macOS</code>와 같은 플랫폼 <code>case</code>와 <code>.v15</code>와 같은 버전 <code>case</code>를 넣어 적용할 수 있습니다.</p>\n<h4 id=\"products\"><a href=\"#products\" class=\"headerlink\" title=\"products\"></a>products</h4><p><code>products</code>는 패키지가 제공하는 프로덕츠들을 명시하는 곳입니다. <code>.library</code> 외에도 <code>.executable</code>, <code>.plugin</code>과 같은 <code>case</code>도 있습니다.</p>\n<p>하나의 라이브러리에 여러개의 targets를 만들 수도 있습니다. 대표적으로 RxSwift의 경우 RxSwift 하나의 라이브러리에 RxRelay, RxCocoa 등의 여러 타겟들을 제공하고 있죠.</p>\n<h4 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h4><p>패키지가 사용하는 다른 패키지들을 명시합니다. 여기에 적힐 내용은 보통 라이브러리 리드미 파일에 적어두는 경우가 많으니 참고하여 적어주면 됩니다.</p>\n<p>깃허브에 올라와있는 패키지의 경우 <code>.package(url:)</code>을 사용해주면 되고, 로컬 패키지의 경우 <code>.package(path:)</code>를 사용해줍니다.</p>\n<p>뒤에 붙는 버전의 경우</p>\n<ul>\n<li>from</li>\n</ul>\n<p>해당 버전 이상부터 사용합니다.</p>\n<ul>\n<li>uptoNextMajor</li>\n</ul>\n<p>메이저 버전이 바뀌기 전까지 업데이트하며 사용합니다.<br><code>ex) 5.0.0 ~ 6.0.0</code></p>\n<ul>\n<li>uptoNextMinor</li>\n</ul>\n<p>마이너 버전이 바뀌기 전까지 업데이트하며 사용합니다.<br><code>ex) 5.0.0 ~ 5.1.0</code></p>\n<ul>\n<li>exact<br>해당 버전으로 고정하여 사용합니다.</li>\n</ul>\n<h4 id=\"targets\"><a href=\"#targets\" class=\"headerlink\" title=\"targets\"></a>targets</h4><p>패키지에 사용된 타겟들을 각각 명시합니다. </p>\n<p><code>dependencies</code>에는 보통 위의 dependencies에 적힌 패키지들이 적히고, 하나의 패키지에 타겟이 여러개인 경우 <code>.product(name: &quot;RxCocoa&quot;, package: &quot;RxSwift&quot;)</code>와 같이 각각 적어줍니다.</p>\n<p><code>resources</code>에는 타겟에서 사용되는 리소스 파일들을  명시합니다.</p>\n<p><img src=\"http://tech.kakao.com/wp-content/uploads/2022/05/11_swiftpm.png\"></p>\n<p>단 <code>.xcassets</code>, <code>.storyboard</code>, <code>.xib</code>, <code>.nib</code> 파일등과 같은 리소스 파일들은 Xcode가 그 사용처가 분명하다고 판단하여 자동으로 패키징이 이루어집니다.</p>\n<p><img src=\"http://tech.kakao.com/wp-content/uploads/2022/05/12_swiftpm.png\"></p>\n<p>하지만 저희 프로젝트의 경우 폰트와 같은 자동으로 패키징되지 않는 타입의 리소스가 있기 떄문에 <code>.process(&quot;Resources&quot;)</code>와 같이 명시해주었습니다.</p>\n<p>리소스 명시는 두가지 방법을 지원합니다.</p>\n<ul>\n<li>process</li>\n</ul>\n<p>해당 디렉토리에 있는 모든 리소스를 하나의 depth로 평준화합니다.</p>\n<p>플랫폼에 따라 Xcode가 최적화를 진행할 수 있다면 최적화를 진행해서 리소스 번들의 최상위 디렉토리에 복사합니다.</p>\n<ul>\n<li>copy</li>\n</ul>\n<p>디렉토리 구조 그대로 복사하여 사용합니다.</p>\n<p>디렉토리 구조를 굳이 유지해야하는게 아니라면 최적화도 진행되는 <code>process</code>가 사용된다고 합니다.</p>\n<h2 id=\"접근제어자\"><a href=\"#접근제어자\" class=\"headerlink\" title=\"접근제어자\"></a>접근제어자</h2><p>패키지화를 한 이상 접근제어자에 더욱 신경을 써주어야 합니다.</p>\n<p>Swift에는 다섯가지 접근 제어자가 있습니다.</p>\n<h4 id=\"open-public\"><a href=\"#open-public\" class=\"headerlink\" title=\"open, public\"></a>open, public</h4><p>프로젝트 내의 모든 곳에서 접근할 수 있습니다.</p>\n<p><code>open</code>과 <code>public</code>의 차이가 패키징을 사용하면서 중요해집니다.</p>\n<p><code>open</code>을 사용하면 다른 모듈에서 <code>overclass</code>를 허용합니다. 하지만 <code>public</code>은 이를 허용하지 않습니다.</p>\n<p>따라서 <code>BaseViewController</code>와 같이 상속이 필요한 클래스의 경우 <code>open</code>으로 접근을 열어주어야 합니다.</p>\n<h4 id=\"internal\"><a href=\"#internal\" class=\"headerlink\" title=\"internal\"></a>internal</h4><p>아무 접근제어자도 작성하지 않으면 기본적으로 적용되는 접근제어자입니다. 작성된 모듈 안에서만 접근 가능합니다.</p>\n<h4 id=\"fileprivate\"><a href=\"#fileprivate\" class=\"headerlink\" title=\"fileprivate\"></a>fileprivate</h4><p>작성된 소스 파일 내부에서만 접근 가능합니다.</p>\n<h4 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h4><p>가장 제한적인 접근제어자입니다. 작성된 객체 내부에서만 접근 가능합니다.</p>\n<h2 id=\"패키지-적용하기\"><a href=\"#패키지-적용하기\" class=\"headerlink\" title=\"패키지 적용하기\"></a>패키지 적용하기</h2><p><img src=\"https://i.imgur.com/LYKKSNC.png\"></p>\n<p>프로젝트의 앱 타겟에서 라이브러리 추가를 눌러줍니다.</p>\n<p><img src=\"https://i.imgur.com/gLI60WK.png\"></p>\n<p>Workspace 내부에 만들어두었기 때문에 패키지를 바로 선택할 수 있습니다.</p>\n<p><img src=\"https://i.imgur.com/CBHCtA8.png\"></p>\n<p><code>import</code>까지 해보면서 정상적으로 추가되었는지 확인해봅시다!</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>참고 문서</p></blockquote>\n<p><a href=\"https://developer.apple.com/documentation/xcode/creating-a-standalone-swift-package-with-xcode\">Apple - Creating a standalone Swift package with Xcode</a></p>\n<p><a href=\"https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package\">Apple - Bundling resources with a Swift package</a></p>\n<p><a href=\"https://tech.kakao.com/2022/06/02/swift-package-manager/\">KakaoTech - Swift Package Manager 적용기</a></p>\n<p><a href=\"https://zeddios.tistory.com/1259\">ZeddiOS - Copy와 Process의 차이점</a></p>\n","feature":true,"text":"Package (패키지) 패키지란 프로젝트 내에서 사용하는 코드&#x2F;리소스들을 재사용하기 쉽도록 묶어 정돈하거나 다른 개발자나 커뮤니티와 공유하기 위한 기능입니다. Xcode는 이런 패키지 기능을 Swift Package Manager를 통해 쉽...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Favor","slug":"Favor","count":6,"path":"api/tags/Favor.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Package-%ED%8C%A8%ED%82%A4%EC%A7%80\"><span class=\"toc-text\">Package (패키지)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Swift-Package-%EB%A7%8C%EB%93%A4%EA%B8%B0\"><span class=\"toc-text\">Swift Package 만들기</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Package-swift-%EC%9E%91%EC%84%B1\"><span class=\"toc-text\">Package.swift 작성</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#name\"><span class=\"toc-text\">name</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#platforms\"><span class=\"toc-text\">platforms</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#products\"><span class=\"toc-text\">products</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dependencies\"><span class=\"toc-text\">dependencies</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#targets\"><span class=\"toc-text\">targets</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%9E%90\"><span class=\"toc-text\">접근제어자</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#open-public\"><span class=\"toc-text\">open, public</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#internal\"><span class=\"toc-text\">internal</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#fileprivate\"><span class=\"toc-text\">fileprivate</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#private\"><span class=\"toc-text\">private</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">패키지 적용하기</span></a></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"26)🍎 Swift - Concurrency","uid":"d77fc5a0b46ee953e78fea8c5bdb21ac","slug":"Swift/2023-03-28-Swift26","date":"2023-03-27T15:00:00.000Z","updated":"2023-03-31T14:06:38.437Z","comments":true,"path":"api/articles/Swift/2023-03-28-Swift26.json","keywords":null,"cover":"https://i.imgur.com/3V3xo6Q.png","text":"ConcurrencyWWDC21의 주요 주제는 Concurrency라고 생각합니다. 21년에 처음 공개된 후 관련된 포스트도 많아졌고 서드파티 라이브러리에서도 대응 업데이트가 많이 이루어진 상황입니다. 이제 슬슬 실무에 사용되는 모습들도 보이기 시작하...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"feature":true},"next_post":{"title":"24)🍎 Swift - Moya","uid":"3792db1f46c6369b4473f92f8ea4160f","slug":"Swift/2023-02-26-Swift24","date":"2023-02-25T15:00:00.000Z","updated":"2023-03-31T14:18:24.179Z","comments":true,"path":"api/articles/Swift/2023-02-26-Swift24.json","keywords":null,"cover":"https://i.imgur.com/3np5TJM.png","text":"Moya 모야가 대체 모야? (아마 한국인이 작성한 모야 게시물 80%는 이걸로 시작할듯…) 그래서 모야는 뭘까요? Moya는 enum 타입을 적극적으로 활용하여 네트워크 요청 레이어를 type-safe하게 래핑한 네트워킹 라이브러리입니다. 컴파일 타...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Moya","slug":"Moya","count":1,"path":"api/tags/Moya.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}