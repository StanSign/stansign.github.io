{"title":"6)🍎Swift - MVVM, Clean Architecture","uid":"4155e8969c3d99086cd0bca559bd0d29","slug":"Swift/2022-04-04-Swift06","date":"2022-04-03T15:00:00.000Z","updated":"2023-03-31T10:41:23.617Z","comments":true,"path":"api/articles/Swift/2022-04-04-Swift06.json","keywords":null,"cover":[],"content":"<p>이번 포스트에서는 제 프로젝트를 예시로 iOS 프로젝트에 MVVM+Clean Architecture 구조를 적용해보겠습니다!</p>\n<p>저번 포스팅을 작성하고도 헷갈리는 부분들이 많아서 계속해서 정보들을 찾아봤습니다. 그러다가 아주 좋은 포스트를 발견했는데, 오늘은 해당 포스트를 기반으로 내용을 정리해보겠습니다. 제 포스트를 보시는 분들도 아래 포스트를 자세히 읽어보는 것을 추천합니다 👍</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> <a href=\"https://tech.olx.com/clean-architecture-and-mvvm-on-ios-c9d167d9f5b3\"><strong>Clean Architecture and MVVM on iOS</strong></a></p></blockquote>\n<h1 id=\"MVVM-Clean-Architecture\"><a href=\"#MVVM-Clean-Architecture\" class=\"headerlink\" title=\"MVVM + Clean Architecture\"></a>MVVM + Clean Architecture</h1><p><img src=\"https://raw.githubusercontent.com/StanSign/StanSign.github.io/imageUpload/_assets/202204042348689.png\" alt=\"1*JxCAYFc2UsovUdt13vtEwQ\"></p>\n<p>해당 게시물을 보면 위와 같이 크게 세 가지 레이어로 구성을 나누었습니다. 이런 의문점이 들 수 있습니다. 저번 포스트에서는 4가지로 나뉘었는데 Clean Architecture 구조가 아닌거 아닌가요?</p>\n<p>Clean Architecture의 핵심은 의존성에 있습니다. 안쪽 레이어부터 바깥 레이어로의 의존성 방향이 있지만 않으면 레이어의 개수나 구조는 아무 상관이 없죠. 따라서 위와 같은 구조도 아무 문제가 없는 것입니다!</p>\n<p>위 게시물에 따른 레이어의 종류는 아래과 같습니다.</p>\n<ul>\n<li>Presentation Layer</li>\n<li>Domain Layer</li>\n<li>Data Layer</li>\n</ul>\n<h4 id=\"Domain-Layer\"><a href=\"#Domain-Layer\" class=\"headerlink\" title=\"Domain Layer\"></a>Domain Layer</h4><p><strong>Domain Layer</strong>는 가장 안쪽의 레이어입니다. 따라서 아무런 의존성을 가지지 말아야하고, 독립되어 있어야합니다. 이로서 얻을 수 있는 이점으로는 아무론 종속성이 없기 때문에 테스트하기 매우 간편하다는 점입니다. 다른 파일의 수정이나 추가 없이 오직 Domain Layer에만 집중해도 결과가 도출되죠.</p>\n<p><strong>Entities</strong>, <strong>Use Cases</strong>, <strong>Repository Interfaces</strong>들이 Domain Layer에 속합니다.</p>\n<h4 id=\"Presentation-Layer\"><a href=\"#Presentation-Layer\" class=\"headerlink\" title=\"Presentation Layer\"></a>Presentation Layer</h4><p><strong>Presentation Layer</strong>에는 말 그대로 UI 요소들이 속합니다. 대표적으로 <strong>View Model</strong>이 여기에 속하여 Use Cases의 함수들을 호출합니다. </p>\n<p>Presentation Layer는 오직 Domain Layer에만 종속되어 있습니다.</p>\n<h4 id=\"Data-Layer\"><a href=\"#Data-Layer\" class=\"headerlink\" title=\"Data Layer\"></a>Data Layer</h4><p><strong>Data Layer</strong>에는 <strong>Repository</strong>와 <strong>Data Sources</strong>들이 속합니다. 여기서 Repository는 외부의 Data Sources로부터 데이터를 받아올 때 사용되고,  Data Sources들은 로컬 데이터들을 의미합니다.</p>\n<p>Data Layer 또한 오직 Domain Layer에만 종속되어 있습니다.</p>\n<h3 id=\"✔️-적용하기\"><a href=\"#✔️-적용하기\" class=\"headerlink\" title=\"✔️ 적용하기\"></a>✔️ 적용하기</h3><p>위 포스트와 제가 배워온대로 그림을 그려보면 아래와 같이 나와야합니다.</p>\n<p><img src=\"https://raw.githubusercontent.com/StanSign/StanSign.github.io/imageUpload/_assets/202204050041865.png\" alt=\"Clean_without\"></p>\n<p>그런데 구조가 이렇게 되면 Use Case가 Repository를 호출하는데, 참조 관계는 반대로 되어 있는 아주 잘못된 현상이 발생하게 됩니다. 안쪽 레이어가 바깥 쪽 레이어를 참조하다니, Clean Architecture의 규칙을 깨부수고 있네요 😫</p>\n<p>하지만 Use Case는 꼭 Repository에 Request를 해야합니다. 이럴 땐 어떻게 해야할까요?</p>\n<p><img src=\"https://raw.githubusercontent.com/StanSign/StanSign.github.io/imageUpload/_assets/202204050106290.png\" alt=\"Clean\"></p>\n<p>바로 위와 같이 중간에 한 단계를 더 거치게 만들면 됩니다. 위 레이어 설명에서 Domain Layer에 <strong>Repository Interface</strong>가 포함되어 있었죠? 이 친구가 바로 여기에 쓰입니다.</p>\n<p>Repository Interface는 프로토콜의 형태로서 Use Case와 같은 레이어에 속해있지만, 실제 구현은 Data 레이어에 있게 됩니다.</p>\n<p>데이터의 흐름을 살펴보고 실제 구현에 들어가보겠습니다.</p>\n<ol>\n<li>View가 View Model의 함수를 요청한다.</li>\n<li>View Model이 Use Case를 실행한다.</li>\n<li>Use Case가 User와 Repository로부터 얻은 데이터를 활용하여 결과를 도출합니다.</li>\n<li>이 때, Repository는 네트워크(ex: API)와 Local DB(ex: Realm)로부터 데이터를 받아와 Use Case에 제공합니다.</li>\n<li>Use Case에서 도출된 결과를 거꾸로 View에 제공합니다.</li>\n</ol>\n","text":"이번 포스트에서는 제 프로젝트를 예시로 iOS 프로젝트에 MVVM+Clean Architecture 구조를 적용해보겠습니다! 저번 포스팅을 작성하고도 헷갈리는 부분들이 많아서 계속해서 정보들을 찾아봤습니다. 그러다가 아주 좋은 포스트를 발견했는데, 오...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":27,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":75,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":75,"path":"api/tags/iOS.json"},{"name":"MVVM","slug":"MVVM","count":2,"path":"api/tags/MVVM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MVVM-Clean-Architecture\"><span class=\"toc-text\">MVVM + Clean Architecture</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Domain-Layer\"><span class=\"toc-text\">Domain Layer</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Presentation-Layer\"><span class=\"toc-text\">Presentation Layer</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Data-Layer\"><span class=\"toc-text\">Data Layer</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%9C%94%EF%B8%8F-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">✔️ 적용하기</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"7)🍎Swift - Coordinator 패턴.01","uid":"69ea212f10e69614cb613a9eeb1f8524","slug":"Swift/2022-04-08-Swift07","date":"2022-04-07T15:00:00.000Z","updated":"2023-03-31T10:41:39.606Z","comments":true,"path":"api/articles/Swift/2022-04-08-Swift07.json","keywords":null,"cover":null,"text":"진짜로 이 프로젝트가 이렇게 이거저거 많이 해보게 될 줄은 몰랐는데.. 아무래도 이거저거 너무 많이 해보느라 이해가 부족하게 넘어가는 부분도 있는 것 같아요. 마무리 되면 래핑을 한번 해봐야겠습니다 😭 이번에는 Coordinator 패턴입니다. Vie...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":27,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":75,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":75,"path":"api/tags/iOS.json"},{"name":"Coordinator","slug":"Coordinator","count":1,"path":"api/tags/Coordinator.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"5)🍎Swift - MVVM, Clean Architecture","uid":"6914f10df24adec42e526e015cc9898d","slug":"Swift/2022-03-31-Swift05","date":"2022-03-30T15:00:00.000Z","updated":"2023-03-31T10:41:13.546Z","comments":true,"path":"api/articles/Swift/2022-03-31-Swift05.json","keywords":null,"cover":[],"text":"RxSwift를 다루게 되다 보니 불가항력적으로 눈에 계속 보이는 MVVM 구조라는 놈이 있습니다. View Controller의 역할이 너무 무거워지고 있던 것을 체감하던 중이여서 프로젝트가 더 진행되기 전에 MVVM 구조를 적용해보기로 했습니다. ...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":27,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":75,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":75,"path":"api/tags/iOS.json"},{"name":"MVVM","slug":"MVVM","count":2,"path":"api/tags/MVVM.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}