{"title":"5)🍎Swift - MVVM, Clean Architecture","uid":"6914f10df24adec42e526e015cc9898d","slug":"Swift/2022-03-31-Swift05","date":"2022-03-30T15:00:00.000Z","updated":"2023-03-31T10:41:13.546Z","comments":true,"path":"api/articles/Swift/2022-03-31-Swift05.json","keywords":null,"cover":[],"content":"<p>RxSwift를 다루게 되다 보니 불가항력적으로 눈에 계속 보이는 MVVM 구조라는 놈이 있습니다. View Controller의 역할이 너무 무거워지고 있던 것을 체감하던 중이여서 프로젝트가 더 진행되기 전에 MVVM 구조를 적용해보기로 했습니다.</p>\n<p>원래는 AWS 서비스들을 사용해보고자 시작했던 프로젝트인데 하다보니 이것저것 많이 건들여보게 되네요 🧐</p>\n<h1 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h1><p>MVVM 구조는 사실 굳이 RxSwift가 아니여도 iOS 앱개발을 공부하다보면 자주 마주치게 되는 용어입니다. MVVM은 <strong>Model</strong>, <strong>View</strong>, <strong>View Model</strong>로 코드를 구분하는 구조입니다. </p>\n<p>그런데 기존의 MVC 구조에서 뭔가가 불편했으니까 이런 새로운 구조를 적용하는 것이겠죠? MVC 구조는 이해하기 상당히 쉽고 애플도 XCode의 기본 구조를 MVC로 설정해둔 듯 합니다. 기본으로 설정된 파일의 이름조차 View Controller이기 때문이죠. 하지만 MVC 구조는 View Controller에게 거의 모든 것을 맡깁니다. 아무리 class를 분리하더라도 결국에는 View Controller에서 참조하여 사용하게 되죠. </p>\n<p>MVVM 구조는 View Controller가 독박쓰던 구조를 세가지 구조로 나눕니다.</p>\n<p><img src=\"https://raw.githubusercontent.com/StanSign/StanSign.github.io/imageUpload/_assets/202203312100264.png\" alt=\"MVVM\"></p>\n<p><strong>View &amp; View Controller</strong>: 화면을 구성하는 것을 담당합니다.</p>\n<p><strong>View Model</strong>: 화면으로 전달되는 정보들과 그에 필요한 기능들을 담당합니다.</p>\n<p><strong>Model</strong>: 실질적인 데이터들의 저장을 담당합니다.</p>\n<p><img src=\"https://raw.githubusercontent.com/StanSign/StanSign.github.io/imageUpload/_assets/202204010134435.png\" alt=\"MVVM_example\"></p>\n<p>알기 쉽게 예를 들어보면 위와 같이 표현할 수 있습니다. View Model은 Model의 데이터들을 계속해서 Update해주고, View Controller에는 화면에 출력할 정보를 뿌려줍니다. View Controller는 View를 구성해서 화면을 구성합니다.</p>\n<p>이렇게 해서 얻는 이점이 뭐냐?! 하시면</p>\n<p>이제 View Controller와 View에는 오직 화면 구성 코드만이 남겨지게 됩니다. 그리고 실질적인 동작 코드들은 전부 View Model에 들어가게 됨으로서 UI에 대한 접근 없이도 이런저런 테스트나 기능 수정등을 할 수 있게 됩니다. 정돈된 파일은 덤이고요!</p>\n<p>하지만 그렇다고 MVVM 구조가 만능인 것은 아닙니다..</p>\n<h3 id=\"고통받는-View-Model\"><a href=\"#고통받는-View-Model\" class=\"headerlink\" title=\"고통받는 View Model\"></a>고통받는 View Model</h3><p>View Controller는 이제 무게를 좀 덜 수 있게 되었습니다. 하지만 모든 업무를 떠안게 된 View Model… 사실상 무겁고 계속해서 추가가 되는 코드들은 이 View Model이 전부 맡게 되었습니다. </p>\n<p>그래서 Clean-Architecture로 View Model의 기능들도 쪼개봅시다!</p>\n<hr>\n<h1 id=\"Clean-Architecture\"><a href=\"#Clean-Architecture\" class=\"headerlink\" title=\"Clean Architecture\"></a>Clean Architecture</h1><p><img src=\"https://raw.githubusercontent.com/StanSign/StanSign.github.io/imageUpload/_assets/202204010203897.jpeg\" alt=\"R1280x0\"></p>\n<p>이 그래프 하나로 모든 것을 설명할 수 있습니다.</p>\n<ul>\n<li>종속성은 안쪽으로만 향할 수 있다.</li>\n<li>안쪽의 요소는 바깥쪽 요소에 대해 아무것도 알 수 없다.</li>\n<li>바깥쪽에서 사용된 이름들은 안쪽에서 사용할 수 없다. (변수, 함수, 클래스 등)</li>\n</ul>\n<p>사실 세가지 모두 동일한 말을 하고 있습니다. 바깥쪽 요소들은 어떤 일이 있어도 절대로 안쪽 요소들로부터의 영향을 받지 않도록 한다는 것이죠.</p>\n<p>자 이제 각 단계별로 어떤 요소들이 있는지 알아보겠습니다.</p>\n<h4 id=\"Entities-Model\"><a href=\"#Entities-Model\" class=\"headerlink\" title=\"Entities (Model)\"></a>Entities (Model)</h4><p>이 안에 있는 요소들의 특징은 거의 변경될 일이 없다는 점입니다. 예를 들면 DB의 구조..같은 것이 있겠죠? 그래서 MVC 모델에서 Model로 쓰던 데이터의 구조 파일 등이 여기에 속합니다. </p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Film</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n  <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n  <span class=\"token keyword\">let</span> plot<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span>\n  <span class=\"token keyword\">let</span> image<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위와 같이 Film이라는 데이터 구조는 완전히 새로운 데이터 구조를 추가&#x2F;수정할 것이 아니라면 거의 건드릴 일이 없는 코드입니다. 영화 정보앱의 기능이 아무리 바뀌더라도 영화 정보를 사용하지 않을 일은 없겠죠?</p>\n<h4 id=\"Use-Cases\"><a href=\"#Use-Cases\" class=\"headerlink\" title=\"Use Cases\"></a>Use Cases</h4><p>Use Cases란 사용자가 직접 “사용”하는 앱의 동작과 시나리오들이라고 말할 수 있습니다. 이런 구조를 처음 보는 저에게는 가장 이해하기 힘들었던 부분입니다. 이번에도 쉽게 위의 예시를 통해 살펴보겠습니다. </p>\n<p>영화 정보앱을 켜고 사용자는 어떤 행동을 할까요? 검색을 하던, 추천 정보를 보던 영화 정보를 보여주기 위한 일종의 버튼을 클릭하겠죠? 이 시나리오가 바로 Use Case입니다. </p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> isLoginAccepted <span class=\"token operator\">=</span> <span class=\"token class-name\">BehaviorSubject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadFilmInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">updateFilmInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">notifyReceived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>보통 위와 같이 표현됩니다. 유저의 행동, 상태의 변화 등으로 인해 어떤 출력값의 변화가 필요할 때 Use Cases가 출동하여 해결해준다 고 볼 수 있습니다.</p>\n<h4 id=\"Interface-Adapters\"><a href=\"#Interface-Adapters\" class=\"headerlink\" title=\"Interface Adapters\"></a>Interface Adapters</h4><p>이 부분은 <strong>Presentation Layer</strong>라고 부르는 사람들도 많습니다. 어느쪽이던 이름에서 화면의 구성과 관련이 있을 것 같다는 느낌이 들죠? MVVM 모델의 View Model이 보통 이 구역에 해당됩니다. Clean Architecture를 적용한 MVVM 구조에서 View Model은 오직 화면에 출력될 데이터를 최종적으로 가공하는 역할만 하기 때문입니다. </p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">setTimestampFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">setFilmGradeFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>그래서 보통 위와 같이 Use Cases의 output으로 얻은 정보를 사용자가 보기 쉽게 가공하는 방식으로 많이 사용됩니다. </p>\n<p>20220323 ➡️ 2022년 3월 23일</p>\n<p>처럼요.</p>\n<h4 id=\"Frameworks-amp-Drivers\"><a href=\"#Frameworks-amp-Drivers\" class=\"headerlink\" title=\"Frameworks &amp; Drivers\"></a>Frameworks &amp; Drivers</h4><p>이 부분은 최외곽인 만큼 가장 활발하게 변형이 이루어집니다. 사용자가 직접적으로 상호작용하는 UI나 DB 외에도 Framework등도 여기에 포함됩니다.</p>\n","text":"RxSwift를 다루게 되다 보니 불가항력적으로 눈에 계속 보이는 MVVM 구조라는 놈이 있습니다. View Controller의 역할이 너무 무거워지고 있던 것을 체감하던 중이여서 프로젝트가 더 진행되기 전에 MVVM 구조를 적용해보기로 했습니다. ...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":26,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"MVVM","slug":"MVVM","count":2,"path":"api/tags/MVVM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MVVM\"><span class=\"toc-text\">MVVM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B3%A0%ED%86%B5%EB%B0%9B%EB%8A%94-View-Model\"><span class=\"toc-text\">고통받는 View Model</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Clean-Architecture\"><span class=\"toc-text\">Clean Architecture</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Entities-Model\"><span class=\"toc-text\">Entities (Model)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Use-Cases\"><span class=\"toc-text\">Use Cases</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Interface-Adapters\"><span class=\"toc-text\">Interface Adapters</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Frameworks-amp-Drivers\"><span class=\"toc-text\">Frameworks &amp; Drivers</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"6)🍎Swift - MVVM, Clean Architecture","uid":"4155e8969c3d99086cd0bca559bd0d29","slug":"Swift/2022-04-04-Swift06","date":"2022-04-03T15:00:00.000Z","updated":"2023-03-31T10:41:23.617Z","comments":true,"path":"api/articles/Swift/2022-04-04-Swift06.json","keywords":null,"cover":[],"text":"이번 포스트에서는 제 프로젝트를 예시로 iOS 프로젝트에 MVVM+Clean Architecture 구조를 적용해보겠습니다! 저번 포스팅을 작성하고도 헷갈리는 부분들이 많아서 계속해서 정보들을 찾아봤습니다. 그러다가 아주 좋은 포스트를 발견했는데, 오...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":26,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"MVVM","slug":"MVVM","count":2,"path":"api/tags/MVVM.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"4)🍎Swift - RxSwift","uid":"ba350faaa7dac5578f5aca8757053cb0","slug":"Swift/2022-03-18-Swift04","date":"2022-03-17T15:00:00.000Z","updated":"2023-03-31T10:41:05.448Z","comments":true,"path":"api/articles/Swift/2022-03-18-Swift04.json","keywords":null,"cover":[],"text":"오늘은 모두가 쓰지만 저만 안쓰고 있던 RxSwift가 무엇이고, 어떻게 쓰는건지 알아보겠습니다. 우선 RxSwift는 Swift만 갖고 있는 라이브러리는 아닙니다. 원래의 프로젝트 명은 ReactiveX이고 이 이름으로는 어디선가 들어봤던 것 같기도...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"Swift","slug":"Swift","count":26,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"RxSwift","slug":"RxSwift","count":2,"path":"api/tags/RxSwift.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://www.instagram.com/nomatter_jun/"}}}}}}