{"title":"30)🍎 Swift - WidgetKit","uid":"96d1cc8a79035ed04ee1a5935c77af8d","slug":"Swift/2023-06-08-Swift30","date":"2023-06-07T15:00:00.000Z","updated":"2023-06-11T17:14:56.806Z","comments":true,"path":"api/articles/Swift/2023-06-08-Swift30.json","keywords":null,"cover":"https://i.imgur.com/U81BhYa.png","content":"<h1 id=\"Swift-WidgetKit-01\"><a href=\"#Swift-WidgetKit-01\" class=\"headerlink\" title=\"Swift - WidgetKit.01\"></a>Swift - WidgetKit.01</h1><p>WWDC의 iOS 파트에서 꽤 크게 소개된 WidgetKit이 있었죠..</p>\n<p>Widget이 이제 애니메이션을 갖게 되었습니다.</p>\n<p>다른 플랫폼으로의 확장은 덤이구요.</p>\n<p>그런데 전 그 전의 내용도 아직 못봤거든요..</p>\n<p>그래서 지금 시작합니다.</p>\n<p>WidgetKit!</p>\n<p>하지만 시작하자마자 큰 장벽을 만났습니다.</p>\n<p>Widget은 오직 <strong>SwiftUI</strong> 로만 만들 수 있습니다…</p>\n<p>그래도 작은 화면이니까… 한 번 해봐야겠어요..</p>\n<h2 id=\"How-WidgetKit-Works\"><a href=\"#How-WidgetKit-Works\" class=\"headerlink\" title=\"How WidgetKit Works\"></a>How WidgetKit Works</h2><p>애플은 위젯에 대해서 굉장히 제한적인 요소라는 생각을 가지고 있는 것 같습니다.</p>\n<p>사용자는 홈 화면을 하루에 90회 정도 방문하지만, 그 시간은 굉장히 적다는 것을 강조하고 있네요.</p>\n<p>그래서 Widget에는 <strong>로딩 인디케이터가 돌고 있는 상황이 없어야 한다</strong> 고 합니다.</p>\n<p><img src=\"https://i.imgur.com/TxMgcG4.png\"></p>\n<p>WidgetKit은 <strong>백그라운드 익스텐션</strong> 입니다.</p>\n<p>시간에 따라 화면들을 패키징하여 홈으로 전달해준다고 하는데요.. 이렇게 함으로써 앱을 실행하고, 데이터를 불러오고, 화면에 띄우는 일련의 과정들을 스킵합니다.</p>\n<p>정말 위젯으로 표시될 화면을 뭉텅이로 가져오기만 하는 것이죠..</p>\n<p>그래서 위젯을 개발하는데 있어 핵심적인 키워드는 <strong>“타임라인”</strong> 입니다.</p>\n<p>위젯은 타임라인에 따라 동작합니다.</p>\n<p>위젯은 타임라인에 미리 <strong>스케줄링된 대로 업데이트</strong> 될 수도 있고, <strong>앱에서 요청하여 업데이트</strong> 될 수도 있습니다.</p>\n<p><img src=\"https://i.imgur.com/t7cfSyR.png\"></p>\n<p>여기 달력 앱의 위젯이 있는데요, 이 경우에는 달력에 등록된 일정들에 따라 스케줄링을 할 수 있습니다.</p>\n<p>각 일정이 다가오거나 끝난 시점에 위젯을 업데이트할 수 있는 것이죠.</p>\n<p><img src=\"https://i.imgur.com/qpBrvoL.png\"></p>\n<p>그런데 사용자가 앱을 열고, 일정을 수정했다면요?</p>\n<p>이럴 때는 앱에서 직접 요청하여 위젯을 업데이트 시킬 수 있는 것이죠.<br>(정확히는 타임라인을 업데이트하는 것입니다.)</p>\n<h2 id=\"Widget-Definition\"><a href=\"#Widget-Definition\" class=\"headerlink\" title=\"Widget Definition\"></a>Widget Definition</h2><p>실제로 위젯을 만들기 전에, 위젯을 정의해야합니다.</p>\n<p>위젯은 네 가지로 정의할 수 있습니다: <strong>kind</strong> , <strong>configuration</strong> , <strong>supportedFamilies</strong> , <strong>placeholder</strong> 로요!</p>\n<h4 id=\"Kind\"><a href=\"#Kind\" class=\"headerlink\" title=\"Kind\"></a>Kind</h4><p>우선 <strong>kind</strong> 입니다.</p>\n<p><img src=\"https://i.imgur.com/HJhqYpB.png\"></p>\n<p>위젯은 하나의 종류만 있지 않습니다.</p>\n<p><img src=\"https://i.imgur.com/GfG85qj.png\"></p>\n<p>같은 사이즈라도 여러개의 정보를 요약하여 보여주거나, 하나의 정보를 조금 더 자세하게 보여줄 수도 있죠.</p>\n<h4 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h4><p>이렇게 분류된 각 종류(kind)의 위젯들은 어떤 <strong>Configuration</strong> 을 지원하는 지에 대한 정보도 담고 있습니다.</p>\n<p><strong>StaticConfiguration</strong> 과 <strong>IntentConfiguration</strong> , 이렇게 두 가지 Configuration이 있는데요, 아주 간단한 개념입니다!</p>\n<p><strong>StaticConfiguration</strong> 은 사실 Configuration이 없는 겁니다.</p>\n<p>하나의 Configuration만을 사용하기 위해 이렇게 이름이 붙은 것 같아요.</p>\n<p>별도의 설정이 필요 없는, 오직 하나의 고정된 종류의 데이터만을 보여줄 때 사용됩니다.</p>\n<p><img src=\"https://i.imgur.com/SLcJTjv.png\"></p>\n<p>반대로 <strong>IntentConfiguration</strong> 은 설정을 통해 위젯이 보여주는 화면이 달라질 때 사용됩니다.</p>\n<p>예시로는 “여러 종류의 리스트 중에서 어떤 종류를 위젯으로 보여줄 지 선택이 필요할 때” 가 있겠죠?</p>\n<h4 id=\"Supported-Families\"><a href=\"#Supported-Families\" class=\"headerlink\" title=\"Supported Families\"></a>Supported Families</h4><p><img src=\"https://i.imgur.com/rTpoPiR.png\"></p>\n<p><strong>SupportedFamilies</strong> 는 <strong>지원하는 위젯의 크기</strong> 입니다.</p>\n<p>기본으로는 세 종류의 크기를 모두 지원하는 것으로 되어있지만, 개발자가 선택할 수 있습니다.</p>\n<h4 id=\"Placeholder\"><a href=\"#Placeholder\" class=\"headerlink\" title=\"Placeholder\"></a>Placeholder</h4><p><img src=\"https://i.imgur.com/PReiEpQ.png\"></p>\n<p><strong>Placeholder</strong> 도 간단합니다.</p>\n<p>어떤 데이터도 들어가지 않은, 위젯이 어떤 형태인지만 표현하는 비어있는 View를 제공해주면 됩니다.</p>\n<h2 id=\"StatelessUI\"><a href=\"#StatelessUI\" class=\"headerlink\" title=\"StatelessUI\"></a>StatelessUI</h2><p><img src=\"https://i.imgur.com/Cxk0nYH.png\"></p>\n<p>위젯은 다음의 네 가지 원칙을 지켜야합니다.</p>\n<p>사실 애플이 제한해두고 있기 때문에 어길 수도 없지만요?</p>\n<ol>\n<li>위젯은 작은 별도의 앱이 아니다. 앱에 진입시키기 위한 단편적인 정보를 제공할 뿐이다.</li>\n<li>위젯은 스크롤을 지원하지 않는다.</li>\n<li>위젯에는 움직이는 사진이나 비디오가 들어갈 수 없다.</li>\n<li>위젯에는 오직 탭 제스처만이 유효하다.</li>\n</ol>\n<p><img src=\"https://i.imgur.com/98lT34v.png\"></p>\n<p>위젯은 오직 앱의 특정 지점에 도달하기 위한 숏컷을 제공할 뿐이고, 이것은 <strong>URL API</strong> 를 활용해 구현된다고 하네요!</p>\n<h2 id=\"Views\"><a href=\"#Views\" class=\"headerlink\" title=\"Views\"></a>Views</h2><p>위젯에는 세 가지 View가 필요합니다.</p>\n<p>첫 번째는 <strong>placeholder</strong> 로 이미 다룬 내용이구요..</p>\n<p><img src=\"https://i.imgur.com/FRhUTFH.png\"></p>\n<p>두 번째로 <strong>snapshot</strong> 이라는 화면이 필요합니다.</p>\n<p>Widget Gallery와 같은 곳에서 빠르게 데이터를 불러와 사용할 수 있는 단일성의 화면입니다.</p>\n<p>마지막으로는 <strong>timeline</strong> 입니다.</p>\n<p>실제로 위젯을 홈 화면에 띄울 때 사용되는 화면입니다.</p>\n<p>보통 snapshot과 timeline의 첫 화면은 동일한 화면으로 구성되는게 좋다고 하네요.</p>\n<p>타임라인은 Light Mode와 Dark Mode일 때의 화면을 동시에 제공하여 시스템이 알아서 조정할 수 있도록 되어 있고, 한 번에 며칠동안의 View를 제공한는 것이 좋다고 합니다.</p>\n<h2 id=\"Reload\"><a href=\"#Reload\" class=\"headerlink\" title=\"Reload\"></a>Reload</h2><p>하지만 위젯도 좀 더 자주 업데이트 되어야 할 때가 있겠죠?</p>\n<p>이럴 때는 <strong>reload</strong> 라는 개념을 사용합니다.</p>\n<p><img src=\"https://i.imgur.com/Zx9mGQN.png\"></p>\n<p>Reload가 실행되면 화면에 배치된 <strong>모든 위젯</strong> 에 대해서 시스템이 <strong>새로운 timeline을 제공</strong> 하도록 요청합니다.</p>\n<p>자 코드로 한 번 살펴봅시다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">TimelineProvider</span> <span class=\"token punctuation\">&#123;</span>\n  associatedType <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">TimelineEntry</span>\n\n  <span class=\"token keyword\">typealias</span> <span class=\"token class-name\">Context</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">TimelineProviderContext</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">snapshot</span><span class=\"token punctuation\">(</span>with context<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">,</span>\n                completion<span class=\"token punctuation\">:</span> <span class=\"token attribute atrule\">@escaping</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">timeline</span><span class=\"token punctuation\">(</span>with context<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">,</span>\n                completion<span class=\"token punctuation\">:</span> <span class=\"token attribute atrule\">@escaping</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Timeline</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>코드로 봐도 잘 모르겠긴 한데요.. 🤔</p>\n<p><code>Entry</code>는 보통 <code>Date</code> 데이터가 들어간다고 하구요..</p>\n<p><code>Context</code>에는 environment 정보와 <code>Entry</code>를 요청한 시스템에 대한 정보가 들어온다고 합니다.</p>\n<p><code>snapshot</code>과 <code>timeline</code>은 말 그대로 이전에 살펴보았던 snapshot과 timeline 데이터를 제공받기 위한 함수입니다.</p>\n<p><code>snapshot</code>에는 단일 데이터가, <code>timeline</code>에는 여러 개의 데이터가 들어가겠죠?</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Provider</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">TimelineProvider</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">snapshot</span><span class=\"token punctuation\">(</span>with context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">,</span> \n                       completion<span class=\"token punctuation\">:</span> <span class=\"token attribute atrule\">@escaping</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleEntry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> entry <span class=\"token operator\">=</span> <span class=\"token class-name\">SimpleEntry</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">timeline</span><span class=\"token punctuation\">(</span>with context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">,</span> \n                       completion<span class=\"token punctuation\">:</span> <span class=\"token attribute atrule\">@escaping</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Timeline</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> entry <span class=\"token operator\">=</span> <span class=\"token class-name\">SimpleEntry</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> timeline <span class=\"token operator\">=</span> <span class=\"token class-name\">Timeline</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> policy<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>atEnd<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>timeline<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>TimelineProvider</code>를 채택하면 이런 형태의 모습일겁니다.</p>\n<p>여기서 주목할 점은 <code>policy: .atEnd</code> 부분입니다.</p>\n<p>여기서 <code>policy</code>란 reload가 되는 시점을 정하는 policy라고 볼 수 있는데요,</p>\n<p><strong><code>atEnd</code></strong> 로 제공한 timeline이 끝날 때 reload를 할 수 있고, <strong><code>after(date: Date)</code></strong> 로 일정 시간이 됐을 때 reload하거나 <strong><code>never</code></strong> 로 요청하지 않을 수 있습니다.</p>\n<p>그래서 reload는 대체 언제 되느냐?</p>\n<p>자연적으로 발생하는 reload는 아래의 규칙에 따라 이루어집니다.</p>\n<ol>\n<li>ReloadPolicy를 따라 되거나</li>\n<li>더 자주 화면에 등장하는 위젯에 더 많은 reload를 제공하거나</li>\n<li>기기 환경이 바뀔 때 시스템이 강제로 reload합니다.</li>\n</ol>\n<p>앱이 요청하는 reload는 <strong>Background Notification</strong> 이 있거나, <strong>사용자가 데이터를 변경</strong> 했을 때 이루어집니다.</p>\n<p>두 경우 모두 <code>WidgetCenter</code>의 <code>reloadTimelines(ofKind:)</code>를 사용하면 된다고 하네요.</p>\n<ul>\n<li><code>reloadTimelines(ofKind:)</code></li>\n<li><code>reloadAllTimelines</code></li>\n<li><code>getCurrentConfigurations(completion:)</code></li>\n</ul>\n<p>WidgetKit은 이렇게 세가지 API를 제공하고 있는 것을 알아두고 넘어갑시다!</p>\n<p>그런데 위젯을 사용할 때, 네트워크 통신을 통해 새로운 데이터를 받아와야할 때도 있겠죠?</p>\n<p>그럴 때는 background <code>URLSessions</code>를 사용합니다.</p>\n<p>하지만! 위젯은 절대절대 실시간 데이터를 반영하기 위한 기능이 아니기 때문에 그 빈도를 잘 설정해달라고 합니다.</p>\n<p><img src=\"https://i.imgur.com/4nThOSr.png\"></p>\n<p>그래서 정리해보면.. 위젯의 Reload는 <strong>Background Networking</strong> 을 통해 이루어지거나, <strong>Timeline</strong> 에 의해 이루어지거나 <strong>앱의 요청</strong> 에 따라 이루어질 수 있겠습니다.</p>\n<h2 id=\"Personalization-amp-Intelligence\"><a href=\"#Personalization-amp-Intelligence\" class=\"headerlink\" title=\"Personalization &amp; Intelligence\"></a>Personalization &amp; Intelligence</h2><p>앞에서 위젯은 여러 설정에 따라 데이터를 다르게 보여줄 수 있다고 했었습니다.</p>\n<h3 id=\"Personalization\"><a href=\"#Personalization\" class=\"headerlink\" title=\"Personalization\"></a>Personalization</h3><p>이 기능을 사용하려면 <strong>App Intent</strong> 라는 것을 사용해야 합니다.</p>\n<p>Intent Framework는 여러개의 파라미터로 이루어져 있습니다.</p>\n<p>각 파라미터는 유저에게 묻는 일종의 질문이라고 생각하면 됩니다.</p>\n<p><img src=\"https://i.imgur.com/DilGpGG.png\"></p>\n<p>예를 들어 주식 앱의 경우 유저가 위젯을 터치하여 어떤 주식을 표시할 것인지를 선택할 수 있겠죠.</p>\n<p>이 때, App Intent를 사용해 유저가 앱에서 지정해둔 주식의 리스트를 위젯으로 받아올 수 있습니다.</p>\n<p>만약 유저가 원하는 옵션이 리스트에 없다면?</p>\n<p><img src=\"https://i.imgur.com/WEKdjFW.png\"></p>\n<p>Intents는 dynamic options capability 기능을 제공합니다.</p>\n<p>유저가 종목을 검색하면, 시스템이 주식 Intents Extension을 실행하여 리스트를 새롭게 받아올 수 있습니다.</p>\n<p>이 부분은 따로 더 공부가 필요해보이네요…</p>\n<p>SiriKit과 관련된 내용이라고 합니다..</p>\n<p>Intent를 사용하면 이전의 코드도 다음과 같이 바꿔주어야 합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@main</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SampleWidget</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Widget</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> kind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"SampleWidget\"</span></span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">WidgetConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">IntentConfiguration</span><span class=\"token punctuation\">(</span>kind<span class=\"token punctuation\">:</span> kind<span class=\"token punctuation\">,</span>\n                        intent<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ConfigurationIntent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span>\n                        provider<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Provider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        placeholder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PlaceholderView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> entry <span class=\"token keyword\">in</span>\n                          <span class=\"token class-name\">SampleWidgetEntryView</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">configurationDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"My Widget\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"This is an example widget.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>StaticConfiguration</code> 대신 <code>IntentConfiguration</code> 을 사용해주고 (아.. 이래서 이름이 IntentCongiruation이였구나…)</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Provider</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">IntentTimelineProvider</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">timeline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> configuration<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ConfigurationIntent</span><span class=\"token punctuation\">,</span> with context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">,</span> \n                       completion<span class=\"token punctuation\">:</span> <span class=\"token attribute atrule\">@escaping</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Timeline</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> entry <span class=\"token operator\">=</span> <span class=\"token class-name\">SimpleEntry</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> configuration<span class=\"token punctuation\">:</span> configuration<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// generate a timeline based on the values of the Intent</span>\n\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>timeline<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>TimelineProvider</code>도 <code>IntentTimelineProvider</code>로 업데이트해서 제공해주어야 합니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>IntentHandler를 사용할 때의 주의점!</p></blockquote>\n<p>DynamicIntent를 구성하고, <code>IntentHandler</code>를 구현할 때 헤맨 곳이 있었는데요..</p>\n<p><code>DynamicSummonerSelectionIntentHandler</code> 프로토콜을 준수하려 했을 때입니다.</p>\n<p>해당 프로토콜을 채택하고, <code>stub</code>를 추가하면 XCode가 두 가지 메서드를 추가해줍니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func provideSummonerOptionsCollection(for intent: DynamicSummonerSelectionIntent, with completion: @escaping (INObjectCollection&lt;Summoner&gt;?, Error?) -&gt; Void) &#123;\n\t\t&#x2F;&#x2F;\n&#125;\n\nfunc provideSummonerOptionsCollection(for intent: DynamicSummonerSelectionIntent) async throws -&gt; INObjectCollection&lt;Summoner&gt; &#123;\n\t\t&#x2F;&#x2F;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>저는 처음에 <strong>“<code>@escaping</code> 클로저 방식과 <code>async/await</code>의 두 가지 방식을 모두 제공해줘야하는구나!”</strong> 라고 생각하고 작업을 했습니다.</p>\n<p>그러면 이런 에러가 뜰겁니다..</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Method with Objective-C selector conflicts with method with the same Objective-C selector.</p></blockquote>\n<p>대체 어디서 Conflict가 나는거지? 라는 의문이 들었지만.. 원인은 간단했습니다.</p>\n<p>Handler에 들어가서 내용을 잘 살펴보면.. 두 프로토콜이 대응되는 Obj-C 함수가 같습니다..</p>\n<p>그래서 같은 함수라는 에러를 내고 있는 것이죠..</p>\n<p>그렇다면 해결법은…?</p>\n<p>두 함수 중 하나만 골라서 사용해주시면 됩니다… 🥲</p>\n<h3 id=\"Intelligence\"><a href=\"#Intelligence\" class=\"headerlink\" title=\"Intelligence\"></a>Intelligence</h3><p>자 그런데 애플이 제공하는 기본 위젯 중 “스마트 스택” 이라는 놈이 있죠?</p>\n<p>iOS가 유저의 패턴과 환경을 분석하여 상황에 가장 맞는 위젯을 선택하여 보여주는 기능입니다.</p>\n<p>어떻게 내 위젯이 스마트 스택에 뜰 수 있게 하느냐? 하면 두가지 방법이 있습니다.</p>\n<h4 id=\"1-Shortcuts-Donate\"><a href=\"#1-Shortcuts-Donate\" class=\"headerlink\" title=\"1. Shortcuts Donate\"></a>1. Shortcuts Donate</h4><p>유저가 앱 내에서 활동을 해서 Shortcuts로 donate를 하게 되면, 같은 INIntent를 사용하는 위젯이 스마트 스택의 위로 올 수 있게 됩니다.</p>\n<h4 id=\"2-TimelineEntryRelevance-API\"><a href=\"#2-TimelineEntryRelevance-API\" class=\"headerlink\" title=\"2. TimelineEntryRelevance API\"></a>2. TimelineEntryRelevance API</h4><p>어떤 시간이 다가오고, 내 앱의 entry가 가장 중요한 시점이라고 생각되면, 시스템에게 <code>score</code>와 <code>duration</code>을 제공하여 스마트 스택의 위로 위치하게 유도할 수 있습니다.</p>\n<p>Relevance는 <code>TimelineEntryRelevance(score:)</code>로 사용할 수 있습니다.</p>\n<p>여기서 <code>score</code>라는 파라미터가 중요한데, 저희가 원하는 어떤 상수를 넣어주면 됩니다.</p>\n<p>이 상수의 범위는 정해져있지 않으며, 저희가 전달한 각 상수들과의 상대적인 차이에 따라서 알아서 우선순위가 정해집니다.</p>\n","text":"Swift - WidgetKit.01WWDC의 iOS 파트에서 꽤 크게 소개된 WidgetKit이 있었죠.. Widget이 이제 애니메이션을 갖게 되었습니다. 다른 플랫폼으로의 확장은 덤이구요. 그런데 전 그 전의 내용도 아직 못봤거든요.. 그래서 지...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Swift-WidgetKit-01\"><span class=\"toc-text\">Swift - WidgetKit.01</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#How-WidgetKit-Works\"><span class=\"toc-text\">How WidgetKit Works</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Widget-Definition\"><span class=\"toc-text\">Widget Definition</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kind\"><span class=\"toc-text\">Kind</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Configuration\"><span class=\"toc-text\">Configuration</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Supported-Families\"><span class=\"toc-text\">Supported Families</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Placeholder\"><span class=\"toc-text\">Placeholder</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#StatelessUI\"><span class=\"toc-text\">StatelessUI</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Views\"><span class=\"toc-text\">Views</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Reload\"><span class=\"toc-text\">Reload</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Personalization-amp-Intelligence\"><span class=\"toc-text\">Personalization &amp; Intelligence</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Personalization\"><span class=\"toc-text\">Personalization</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Intelligence\"><span class=\"toc-text\">Intelligence</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-Shortcuts-Donate\"><span class=\"toc-text\">1. Shortcuts Donate</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-TimelineEntryRelevance-API\"><span class=\"toc-text\">2. TimelineEntryRelevance API</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"01)🎊 WWDC23 - What's new in UIKit","uid":"4932fe99e31aa6c7113fa36649ad4bc9","slug":"WWDC23/2023-06-07-WWDC23-01","date":"2023-06-06T15:00:00.000Z","updated":"2023-06-08T08:18:57.712Z","comments":true,"path":"api/articles/WWDC23/2023-06-07-WWDC23-01.json","keywords":null,"cover":"https://i.imgur.com/7ZMZmZ5.jpg","text":"WWDC23 - What’s new in UIKit드디어 WWDC23의 막이 열렸습니다! 다들 VisionOS 와 Vision Pro 보셨나요?? 너무너무 놀라워서 당장이라도 공부하고 싶은 마음이 컸지만.. 스유와 ARKit을 모른다면 쉽게 접근할 수...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/categories/WWDC23.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"},{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/tags/WWDC23.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"feature":true},"next_post":{"title":"29)🍎 Swift - 인스타그램 스토리로 공유하기","uid":"96468e592e7cdf6f399481c66d5c9acd","slug":"Swift/2023-05-30-Swift29","date":"2023-05-29T15:00:00.000Z","updated":"2023-06-08T08:15:52.964Z","comments":true,"path":"api/articles/Swift/2023-05-30-Swift29.json","keywords":null,"cover":"https://i.imgur.com/YnrGnKE.png","text":"인스타그램 스토리 공유오늘은 앱에서 얻어낸 사진을 인스타그램 스토리로 공유하는 법을 공부해보겠습니다. Instagram - Sharing to stories 해당 문서를 따라가며 진행해보죠! 앱 ID 휙득하기 가장 먼저 눈에 띄는 경고문이 있네요! 다...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"},{"name":"Favor","slug":"Favor","count":6,"path":"api/tags/Favor.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}