{"title":"7)🍎Swift - Coordinator 패턴.01","uid":"69ea212f10e69614cb613a9eeb1f8524","slug":"Swift/2022-04-08-Swift07","date":"2022-04-07T15:00:00.000Z","updated":"2023-03-31T10:41:39.606Z","comments":true,"path":"api/articles/Swift/2022-04-08-Swift07.json","keywords":null,"cover":null,"content":"<p>진짜로 이 프로젝트가 이렇게 이거저거 많이 해보게 될 줄은 몰랐는데.. 아무래도 이거저거 너무 많이 해보느라 이해가 부족하게 넘어가는 부분도 있는 것 같아요. 마무리 되면 래핑을 한번 해봐야겠습니다 😭</p>\n<p>이번에는 Coordinator 패턴입니다.</p>\n<p>View Controller간의 Flow를 제어하는 객체를 두어서 뷰컨간의 전환을 안정적이고 쉽게 만드는 패턴인데요, 사실 제 프로젝트에는 당장 필요성은 못느끼고 있지만 또 당장 적용해볼수 있는 데 안해볼 수 없지 않습니까? ㅎㅎ;;</p>\n<p>그래서 해보기로 했습니다.</p>\n<p>오늘 도움을 얻은 게시물은</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://somevitalyz123.medium.com/coordinator-pattern-with-tab-bar-controller-33e08d39d7d\">Coordinator Pattern with Tab Bar Controller</a></p></blockquote>\n<p>위 블로그 글 입니다!</p>\n<h1 id=\"Coordinator-Pattern\"><a href=\"#Coordinator-Pattern\" class=\"headerlink\" title=\"Coordinator Pattern\"></a>Coordinator Pattern</h1><h3 id=\"코디네이터-패턴이란\"><a href=\"#코디네이터-패턴이란\" class=\"headerlink\" title=\"코디네이터 패턴이란?\"></a>코디네이터 패턴이란?</h3><p>코디네이터 패턴이란 위에서 간략하게 설명했듯이</p>\n<p>앱의 View Controller들 사이의 Flow Control과 Navigation을 관리해주는 패턴입니다. 코디네이터 패턴을 사용함으로서 화면의 흐름을 관리하기 쉽고, 또 뷰를 불러오는 코드에 재사용성을 부여해준다는 이점이 있습니다.</p>\n<h5 id=\"원래의-방식\"><a href=\"#원래의-방식\" class=\"headerlink\" title=\"원래의 방식\"></a>원래의 방식</h5><p>자 원래라면 View Controller를 불러올 때 어떤 식으로 했나요? 스토리보드를 사용했다고 한다면</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> storyboard <span class=\"token operator\">=</span> <span class=\"token class-name\">UIStoryboard</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Main\"</span></span><span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> mainViewController <span class=\"token operator\">=</span> storyboard<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateInitialViewController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token class-name\">MainViewController</span>\n<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>navigationController<span class=\"token punctuation\">.</span><span class=\"token function\">pushViewController</span><span class=\"token punctuation\">(</span>mainViewController<span class=\"token punctuation\">,</span> animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>위처럼 아주아주 긴 코드를 새로운 뷰컨을 불러올때마다 입력하고 실행해야 했죠?</p>\n<p>화면이 많지 않은 앱이거나 하나의 화면에서 하나의 화면으로만 넘어가는 경우에야 전혀 문제가 될 게 없지만, 화면이 아주 많고 한 화면에서 여러가지 화면으로의 전환이 가능하다면 위 코드를 반복해서 계속 입력했을 거에요. </p>\n<h5 id=\"코디네이터를-사용하면\"><a href=\"#코디네이터를-사용하면\" class=\"headerlink\" title=\"코디네이터를 사용하면?\"></a>코디네이터를 사용하면?</h5><script src=\"https://gist.github.com/StanSign/7e78c70a93c51b47a626b103723a2d3d.js?file=Coordinator.swift\"></script>\n\n<p>네 엄청 복잡해보이죠..? 그냥 원래의 방식을 쓰고 싶어지죠..?</p>\n<p>하지만 한번 배워두면 분명 잘 써먹을거라 믿고 배워봅시다.</p>\n<h5 id=\"그래서-저걸-어떻게-쓰죠\"><a href=\"#그래서-저걸-어떻게-쓰죠\" class=\"headerlink\" title=\"그래서 저걸 어떻게 쓰죠?\"></a>그래서 저걸 어떻게 쓰죠?</h5><p>코디네이터 패턴을 사용하는 모든 앱에는 최소한 하나의 코디네이터가 필요합니다. 보통 가장 뿌리가 되는 코디네이터부터 만들기 시작하고, 일반적으로 <strong>AppCoordinator</strong>라고 부릅니다. 물론 여러개의 코디네이터를 사용할 수 있지만 우선 가장 뿌리가 되는 친구부터 만들어보겠습니다.</p>\n<script src=\"https://gist.github.com/StanSign/7e78c70a93c51b47a626b103723a2d3d.js?file=AppCoordinator.swift\"></script>\n\n<p>마찬가지로 복잡해보이지만 앞에 만들었던 프로토콜대로 만든 것 뿐이에요!</p>\n<p>그리고 AppCoordinator를 init하는데 가장 좋은 곳은 AppDelegate라고 하네요</p>\n<p>이 AppDelegate라는 놈도 한번 제대로 공부해봐야하는데 잊고 있엇네요. 이참에 리스트에 올려두고.. 그런데 AppDelegate라는 놈은 iOS13 이후부터 SceneDelegate와 기능을 나누어갖게 되었습니다. 간단하게만 설명드리고 넘어가자면 앱의 진입지점을 정해주고 실행상태를 모니터링 해준다고 생각하시면 됩니다. (사실 저도 잘 몰라요 😓)</p>\n<p>그래서 <strong>SceneDelegate</strong>에 아래 부분을 추가해서 앱 실행시에 설정해줍시다!</p>\n<script src=\"https://gist.github.com/StanSign/7e78c70a93c51b47a626b103723a2d3d.js?file=SceneDelegate.swift\"></script>\n\n<p>이제 이 앱은 실행시키면 아무것도 없는 비어있는 <strong>Navigation Controller</strong>만 띄우는 앱이 되었습니다. 하지만 사실은 <strong>DefaultAppCoordinator</strong>의 <strong>start</strong> 함수를 콜하여 실행시키고 있죠. 단지 아직 그 부분을 구현하지 않았을 뿐입니다.</p>\n<script src=\"https://gist.github.com/StanSign/7e78c70a93c51b47a626b103723a2d3d.js?file=showHomeFlow.swift\"></script>\n\n<p>우선 동작하는 것을 확인하기 위해 이렇게 원하는 ViewController를 push해주는 코드를 넣어주면 해당 뷰컨이 앱 실행 초기화면으로 등장하는 것을 볼 수 있습니다!</p>\n","text":"진짜로 이 프로젝트가 이렇게 이거저거 많이 해보게 될 줄은 몰랐는데.. 아무래도 이거저거 너무 많이 해보느라 이해가 부족하게 넘어가는 부분도 있는 것 같아요. 마무리 되면 래핑을 한번 해봐야겠습니다 😭 이번에는 Coordinator 패턴입니다. Vie...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Coordinator","slug":"Coordinator","count":1,"path":"api/tags/Coordinator.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Coordinator-Pattern\"><span class=\"toc-text\">Coordinator Pattern</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%BD%94%EB%94%94%EB%84%A4%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80\"><span class=\"toc-text\">코디네이터 패턴이란?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%9B%90%EB%9E%98%EC%9D%98-%EB%B0%A9%EC%8B%9D\"><span class=\"toc-text\">원래의 방식</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%BD%94%EB%94%94%EB%84%A4%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4\"><span class=\"toc-text\">코디네이터를 사용하면?</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%A0%80%EA%B1%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EC%A3%A0\"><span class=\"toc-text\">그래서 저걸 어떻게 쓰죠?</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"8)🍎Swift - Coordinator 패턴.02","uid":"c6e16700a7ef39990817280778f95b8a","slug":"Swift/2022-04-12-Swift08","date":"2022-04-11T15:00:00.000Z","updated":"2023-03-31T10:41:50.034Z","comments":true,"path":"api/articles/Swift/2022-04-12-Swift08.json","keywords":null,"cover":null,"text":"TabBar + Coordinator 패턴코디네이터 패턴을 조금 응용하면 TabBar에도 적용을 할 수가 있습니다. 오늘은 단순 적용이기 때문에 코드 위주로 쓱쓱 지나갈게요! 다른 기본적인 부분은 TabBar 구성과 동일합니다. 중요한 곳은 바로 여기...","link":"","photos":[],"count_time":{"symbolsCount":737,"symbolsTime":"1 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"6)🍎Swift - MVVM, Clean Architecture","uid":"4155e8969c3d99086cd0bca559bd0d29","slug":"Swift/2022-04-04-Swift06","date":"2022-04-03T15:00:00.000Z","updated":"2023-03-31T10:41:23.617Z","comments":true,"path":"api/articles/Swift/2022-04-04-Swift06.json","keywords":null,"cover":[],"text":"이번 포스트에서는 제 프로젝트를 예시로 iOS 프로젝트에 MVVM+Clean Architecture 구조를 적용해보겠습니다! 저번 포스팅을 작성하고도 헷갈리는 부분들이 많아서 계속해서 정보들을 찾아봤습니다. 그러다가 아주 좋은 포스트를 발견했는데, 오...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"MVVM","slug":"MVVM","count":2,"path":"api/tags/MVVM.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}