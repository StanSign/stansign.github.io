{"title":"2)🍎Swift - 클로저(Closure).02","uid":"4bec864af0b8c90bc4e0e9a7d2f81123","slug":"Swift/2022-03-02-Swift02","date":"2022-03-01T15:00:00.000Z","updated":"2023-03-31T10:40:50.818Z","comments":true,"path":"api/articles/Swift/2022-03-02-Swift02.json","keywords":null,"cover":null,"content":"<p>이번에는 덩치가 큰 클로저라는 친구를 다이어트 시키는 방법과 저를 곤란하게 만든 @escaping 클로저에 대해 알아보겠습니다</p>\n<p>우리 클로저라는 친구는 덩치가 너무 큽니다.. 이전 게시물의 예시를 다시 가져와볼까요?</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123; () -&gt; () in\n    print(&quot;Hi! I&#39;m Closure&quot;)\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>클로저를 인수로 받는 함수의 호출법입니다. 위 예시는 사실 아주 단순한 친구였죠? </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(클로저)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>네.. 가만히 한번 관찰해보면 이 친구는</p>\n<p>() -&gt; () </p>\n<p>요 부분이라던지..</p>\n<p>closure: </p>\n<p>요 부분이라던지.. 불필요하게 명시되어 있는 여러 부분들이 보입니다. 마치 저의 몸에 붙어있는 불필요한 지방같죠. 😝</p>\n<p>그래서 지금부터는 클로저의 체중 감량법을 알아보겠습니다.</p>\n<hr>\n<h3 id=\"Trailing-Closure-트레일링-클로저\"><a href=\"#Trailing-Closure-트레일링-클로저\" class=\"headerlink\" title=\"Trailing Closure (트레일링 클로저)\"></a>Trailing Closure (트레일링 클로저)</h3><p>또 새로운 용어가 나왔지만 이해를 돕기 위한 도구로서 접근해봅시다. “Trailing &#x3D; 끝에 붙은” 이라는 뜻이죠?</p>\n<p>이 경량법은 <strong>함수의 마지막 인자로 클로저</strong>가 들어가있을 때 사용할 수 있습니다. 마지막 클로저를 빼내서 <strong>함수의 끝</strong>에 간략화해서 붙여쓰는 방법이죠. 이 때, 인자의 자리에서 뛰쳐나왔으니 <strong>인자명은 적지 않습니다</strong>.</p>\n<p>역시 예시가 이해에 직빵이죠?</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123; () -&gt; () in\n    print(&quot;Hi! I&#39;m Closure&quot;)\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>네 위의 예시와 같은 예시입니다. <strong>function({ … })</strong> 이렇게 괄호안에 중괄호가 들어가있어서 한 눈에 파악이 어려운 점이 있었습니다. 그래서 <strong>Trailing Closure</strong>를 사용해볼게요!</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo() &#123; () -&gt; () in\n    print(&quot;Hi! I&#39;m Closure&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게!! <strong>function() { … }</strong> 형태로 바꿀 수 있고, <strong>closure:</strong> 와 같은 인자명도 생략할 수 있습니다. </p>\n<p>그리고 여기에서 추가로! 인자가 클로저 단 하나일 경우에는 **()**까지 생략 가능합니다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo &#123; () -&gt; () in\n    print(&quot;Hi! I&#39;m Closure&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>이렇게 말이죠!</p>\n<p>인자가 여러개인 경우도 한번 볼게요</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func fetchData(success: () -&gt; (), fail: () -&gt; ()) &#123;\n    &#x2F;&#x2F; Tasks\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>위 함수는 아래와 같이 호출될겁니다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">fetchData(success: &#123; () -&gt; () in\n    print(&quot;Success&quot;)\n&#125;, fail: &#123; () -&gt; () in\n    print(&quot;Fail&quot;)\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>이 호출법에 Trailing Closure를 활용해볼게요.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">fetchData(success: &#123; () -&gt; () in\n    print(&quot;Success&quot;)\n&#125;) &#123; () -&gt; () in\n    print(&quot;Fail&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>이렇게! 마지막 클로저 인자만 뒤로 쏙 뺄 수 있죠.</p>\n<p>정리해볼까요?</p>\n<ol>\n<li>마지막 인자가 클로저인 경우, 해당 클로저를 인자에서 빼내서 함수 뒤에 붙일 수 있다.</li>\n<li>이 때, 인자명은 생략된다.</li>\n<li>만약 인자가 클로저 단 하나일 경우에는 함수 호출 구문인 () 또한 생략할 수 있다.</li>\n</ol>\n<hr>\n<h3 id=\"gt-in-생략\"><a href=\"#gt-in-생략\" class=\"headerlink\" title=\"() -&gt; () in 생략\"></a>() -&gt; () in 생략</h3><p>자.. 그런데 사실 저희 눈에 제일 거슬리는건 저런 마이너한 부분이 아닙니다. 본인이 클로저라고 당당히 소리치고 있는 <strong>() -&gt; () in</strong> 이 부분이죠.</p>\n<p>너무 자기주장이 강해서 클로저 구문을 보면 저 부분부터 눈이 갑니다. 그래서 저 부분을 생략해볼겁니다.</p>\n<p>자 아래와 같은 함수가 있습니다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func foo(closure: (Int, Int, Int) -&gt; (Int)) &#123;\n    closure(1, 2, 3)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>인자로 Int형 1, 2, 3을 받아 Int형 Return Type을 내보내는 클로저를 인수로 갖는 함수 foo()이네요. 이 함수를 호출할 때는 어떻게 해야할까요?</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123;closure: (a: Int, b: Int, c: Int) -&gt; Int in\n    return a + b + c\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>혹은 Trailing Closure를 사용해서</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo() &#123; (a: Int, b: Int, c: Int) -&gt; Int in\n    return a + b + c\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>이런식으로 주저리주저리.. 굉장히 길어집니다. 심지어 위 예시는 굉장히 간단한 예시이죠? 실전에선 더욱 복잡해지고 길어질겁니다. 그래서 이 친구를 총 다섯 단계에 걸쳐 축약해볼게요!</p>\n<p><strong>1.. 데이터 타입을 생략한다.</strong></p>\n<p>가장 만만한 데이터 타입부터 생략해봅시다. Swift는 현대 언어의 기본 소양인 “데이터타입 알아서 처리하기” 기능이 당연히 있습니다. 이를 적극적으로 활용한 방법이죠.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123;closure: (a: Int, b: Int, c: Int) -&gt; Int in\n    return a + b + c\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>여기서 Int 타입들을 전부 생략합니다!</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123;closure: (a, b, c) in \n    return a + b + c\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>😮😮😮 </p>\n<p>벌써부터 엄청나게 줄어들었네요! 물론 데이터타입에 대해 엄격하게 관리하실거면 하나하나 적어주시는게 좋습니다.</p>\n<p><strong>2.. 클로저의 인자명을 생략하고 shortand를 사용한다.</strong></p>\n<p>우선 shortand가 무엇이냐 하면, </p>\n<p><strong>($0, $1, $2)</strong></p>\n<p>요 친구들입니다. 파이썬을 다뤄보신 분들이라면 익숙하실거에요. 각각 **(첫 번째 인자, 두 번째 인자, 세 번째 인자)**를 의미하죠.</p>\n<p>이를 위 예시에 한 번 적용해볼까요?</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123;closure: (a, b, c) in \n    return a + b + c\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>쨔쟈쟌~</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123;\n    return $0 + $1 + $2\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>와우.. 이제 두 번째 단계인데 벌써 엄청나게 단순해졌어요.</p>\n<p>물론 두 번째 방법에도 유의할 점은 있습니다. 인덱스 수와 인자의 수를 정확히 맞춰주셔야 해요!</p>\n<p><strong>3.. 클로저 구문 안에 return만 있을 경우, 이 또한 생략한다.</strong></p>\n<p>이건 빠르게 예시로 보고 넘어갑시다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123;\n    return $0 + $1 + $2\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 클로저 안에 return 구문만 있는 경우에는?</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123;\n    $0 + $1 + $2\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>이렇게 <strong>return</strong> 또한 생략해줄 수 있습니다.</p>\n<p><strong>4.. Trailing Closure</strong></p>\n<p>위에서 다룬 Trailing Closure를 적용해줍시다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123;\n    $0 + $1 + $2\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>마지막 인자를 함수 뒤로 빼버리죠!</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo() &#123;\n    $0 + $1 + $2\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>ㅎㅎ;;;</p>\n<p><strong>5.. 인자가 클로저 단 하나라면? ()도 생략한다.</strong></p>\n<p>마찬가지로 위에서 다뤘었죠? 인자가 클로저 단 하나이고, Trailing Closure를 적용하면 () 안에는 아무것도 남아있지 않습니다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo() &#123;\n    $0 + $1 + $2\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>없어져라 ()!</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo &#123;\n    $0 + $1 + $2\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>여기까지! 통통했던 클로저 친구가 이쑤시개가 되었습니다.. 드라마틱한 연출을 위해 비교해볼게요.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123;closure: (a: Int, b: Int, c: Int) -&gt; Int in\n    return a + b + c\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>이 친구가..</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo &#123;\n    $0 + $1 + $2\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게.. 이 정도면 클로저 친구의 건강을 걱정해야 하는거 아닌가 싶네요 😅</p>\n<p>물론 위의 예시는 매우 극단적인 경우입니다. 실전에서 이렇게까지 축약되는 경우는 거의 없다고 보셔도 되지만, 한두가지만 적용해도 가시성이 훨씬 좋아지니 적극적으로 활용해줍시다!</p>\n","text":"이번에는 덩치가 큰 클로저라는 친구를 다이어트 시키는 방법과 저를 곤란하게 만든 @escaping 클로저에 대해 알아보겠습니다 우리 클로저라는 친구는 덩치가 너무 큽니다.. 이전 게시물의 예시를 다시 가져와볼까요? foo(closure: &#123; ...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":80,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":80,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Trailing-Closure-%ED%8A%B8%EB%A0%88%EC%9D%BC%EB%A7%81-%ED%81%B4%EB%A1%9C%EC%A0%80\"><span class=\"toc-text\">Trailing Closure (트레일링 클로저)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gt-in-%EC%83%9D%EB%9E%B5\"><span class=\"toc-text\">() -&gt; () in 생략</span></a></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"3)🍎Swift - 클로저(Closure).03","uid":"e8e4dffd0540e6da0503ffe01c05cfbd","slug":"Swift/2022-03-03-Swift03","date":"2022-03-02T15:00:00.000Z","updated":"2023-03-31T10:40:56.160Z","comments":true,"path":"api/articles/Swift/2022-03-03-Swift03.json","keywords":null,"cover":null,"text":"이번에는 @autoclosure와 @escaping에 대해 알아보겠습니다. @autoclosureautoclosure도 우선 용어 자체를 살펴보겠습니다. 자동-클로저? 이게 대체 뭘까요? 이번에는 정의를 살펴봅시다. 인자로서 전달된 일반구문&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":80,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":80,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"1)🍎Swift - 클로저(Closure).01","uid":"95363f08e13410733c358df6bc3d7681","slug":"Swift/2022-03-01-Swift01","date":"2022-02-28T15:00:00.000Z","updated":"2023-03-31T10:40:34.717Z","comments":true,"path":"api/articles/Swift/2022-03-01-Swift01.json","keywords":null,"cover":null,"text":"혼자 공부하다 도저히 안되겠어서 정리해보는 태그를 하나 만들었습니다!첫 게시물의 주제는 느낌적으로 써왔지만 제대로 공부해본 적은 없는 클로저입니다. 클로저란?지금까지 클로저하면 그냥 “그룹으로 실행되는 코드 덩어리” 정도로 생각하고 사용해왔습니다.그런...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":80,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":80,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}