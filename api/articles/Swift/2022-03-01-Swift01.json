{"title":"1)🍎Swift - 클로저(Closure).01","uid":"95363f08e13410733c358df6bc3d7681","slug":"Swift/2022-03-01-Swift01","date":"2022-02-28T15:00:00.000Z","updated":"2023-03-31T10:40:34.717Z","comments":true,"path":"api/articles/Swift/2022-03-01-Swift01.json","keywords":null,"cover":null,"content":"<p>혼자 공부하다 도저히 안되겠어서 정리해보는 태그를 하나 만들었습니다!<br>첫 게시물의 주제는 느낌적으로 써왔지만 제대로 공부해본 적은 없는 클로저입니다.</p>\n<h3 id=\"클로저란\"><a href=\"#클로저란\" class=\"headerlink\" title=\"클로저란?\"></a>클로저란?</h3><p>지금까지 클로저하면 그냥 <strong>“그룹으로 실행되는 코드 덩어리”</strong> 정도로 생각하고 사용해왔습니다.<br>그런데 자료를 찾아보니 어머나 글쎄 그게 전부네요?</p>\n<p>물론 여러가지 옵션들이 추가되면서 다양하게 활용이 가능하지만 기본적인 개념은 정말로 <strong>코드 덩어리</strong> 그 이상도 이하도 아니였습니다.</p>\n<p>그런데 충격적인 사실이 하나 있었습니다.<br>바로 <strong>함수</strong>도 클로저였던 것이죠.</p>\n<p>함수야 다른 언어들에서도 기본적인 개념이라서 Swift에서도 써왔는데 생각해보면 클로저나 함수나 하는 기능은 같습니다.</p>\n<p>정확하게 살펴보면 <strong>함수</strong>는 <strong>이름이 있는 클로저</strong>입니다.<br>이게 무슨 소리냐면, 클로저에는 <strong>Unnamed Closure</strong>와 <strong>Named Closure</strong> 이렇게 두 가지 종류가 있습니다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func foo() &#123;\n    print(&quot;Actually, I&#39;m Named Closure&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>저희가 줄곧 사용해왔던 위와 같은 <strong>함수</strong>라는 녀석은 사실 <strong>Named Closure</strong>였던 것이죠. </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let boo &#x3D; &#123; print(&quot;I&#39;m Unnamed Closure&quot;) &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>그리고 지금까지 감으로 사용해오던 윗 놈은 <strong>Unnamed Closure</strong>이지만, 편의상 Named Closure를 함수라고 부르기 때문에 줄여서 그냥 “Closure”라고 불렀던 것입니다.</p>\n<p>자 그래서 클로저란 놈은 어떻게 생겼느냐? 하시면</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123; (Parameters) -&gt; Return in\n    &#x2F;&#x2F; tasks\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>이렇게 생겼습니다. Swift를 사용하다보면 굉장히 자주 나오기 때문에 은연중에 익숙해진 구조네요..</p>\n<p>하지만 제대로 학습해보기 위해 구조를 뜯어내보겠습니다. 클로저는 <strong>in</strong>을 기준으로 두 가지 부분으로 나눌 수 있습니다.<br>인자와 반환형으로 이루어진 <strong>Closure Head</strong>와 실행부가 있는 <strong>Closure Body</strong>이죠.</p>\n<p>사실 쓸 줄만 알면 됐지 용어는 중요한 게 아니니 예시 하나만 간단히 보고 넘어갑시다!</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let boo &#x3D; &#123; (title: String) -&gt; String in \n    return &quot;Title: \\(title)&quot;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"클로저의-기능-사용법\"><a href=\"#클로저의-기능-사용법\" class=\"headerlink\" title=\"클로저의 기능, 사용법\"></a>클로저의 기능, 사용법</h3><p>지금부터는 클로저가 할 수 있는 기본적인 기능을 알아보겠습니다. 함수와 같은 놈인걸 알았으니 함수의 기능들을 생각해보면서 보면 나름 쉽습니다!</p>\n<p><strong>1.. 함수의 인자로서 사용될 수 있다.</strong></p>\n<p>기능 첫 번째! 처음 마주쳤을 때 가장 당황했던 기능입니다. 웬 처음보는 구조가 함수 인자로 떡하니 자리를 잡고 있는데, 괄호에 화살표에 어질어질했던 기억이 있네요.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func foo(closure: () -&gt; ()) &#123;\n    closure()\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>위와 같이 함수를 인자로 받는 함수 형태를 사용할 수 있다는 점 아시나요? 개인적으로 익숙하지는 않아서 인지만 해두고 직접 사용하지는 않던 기능인데요, 여기에 클로저를 사용하게 되면 사실은 자주 사용하던 기능이라는 사실을 깨닫게 됩니다. 참고로 위 예시에서 closure()는 함수입니다!</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">foo(closure: &#123; () -&gt; () in\n    print(&quot;Hi! I&#39;m Closure&quot;)\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>처음 보시는 분들이 여기서 헤롱헤롱하고 계실테니 자세히 살펴보겠습니다. 자세히 보면, </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123; () -&gt; () in\n    print(&quot;Hi! I&#39;m Closure&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>이 부분.. 보이시나요? 뭔가 굉장히 길어보이지만 그냥 하나의 클로저입니다. 이 클로저가 closure라는 이름으로 foo() 함수의 인자로서 전달된 것이죠.</p>\n<p>이게 보이고나면 위 구조는 생각보다 간단해집니다. “Hi! I’m Closure”라는 String을 출력하는 함수 closure()가 foo() 함수의 인자로 전달되어 실행되는 구조인 것이죠.</p>\n<p><strong>2.. 함수의 반환으로서도 사용될 수 있다.</strong></p>\n<p>두 번째 기능은 빠르게 살펴봅시다! 함수의 인자로 클로저를 사용할 수 있다면 반환 타입으로도 사용될 수 있겠죠?</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func foo() -&gt; () -&gt; () &#123;\n    return &#123; () -&gt; () in\n        print(&quot;Hi! I&#39;m Closure&quot;)\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>네 맞아요. 얘도 만만치 않게 복잡해보입니다. 하지만 우리의 애플은 () -&gt; () -&gt; () 같은 애매한 표현을 좋아하지 않아요.</p>\n<p>저 형태 그대로 사용될 일은 거의 없으니 해당 파트에서 다시 정리해보겠습니다.</p>\n<p><strong>3.. 변수&#x2F;상수에 사용할 수 있다.</strong></p>\n<p>사실 제일 기본적인 형태입니다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let closure &#x3D; &#123; () -&gt; () in\n    print(&quot;Hi! I&#39;m Closure&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>보통 return으로 변수&#x2F;상수에 값을 넣어주게 됩니다.</p>\n<p>여기까지가 클로저의 기본 개념이라고 할 수 있습니다. 다음 게시물에서는 제가 이렇게 정리하게 만든 원흉인 @escaping closure 위주로 작성해보겠습니다!</p>\n","text":"혼자 공부하다 도저히 안되겠어서 정리해보는 태그를 하나 만들었습니다!첫 게시물의 주제는 느낌적으로 써왔지만 제대로 공부해본 적은 없는 클로저입니다. 클로저란?지금까지 클로저하면 그냥 “그룹으로 실행되는 코드 덩어리” 정도로 생각하고 사용해왔습니다.그런...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EB%9E%80\"><span class=\"toc-text\">클로저란?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%EA%B8%B0%EB%8A%A5-%EC%82%AC%EC%9A%A9%EB%B2%95\"><span class=\"toc-text\">클로저의 기능, 사용법</span></a></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"2)🍎Swift - 클로저(Closure).02","uid":"4bec864af0b8c90bc4e0e9a7d2f81123","slug":"Swift/2022-03-02-Swift02","date":"2022-03-01T15:00:00.000Z","updated":"2023-03-31T10:40:50.818Z","comments":true,"path":"api/articles/Swift/2022-03-02-Swift02.json","keywords":null,"cover":null,"text":"이번에는 덩치가 큰 클로저라는 친구를 다이어트 시키는 방법과 저를 곤란하게 만든 @escaping 클로저에 대해 알아보겠습니다 우리 클로저라는 친구는 덩치가 너무 큽니다.. 이전 게시물의 예시를 다시 가져와볼까요? foo(closure: &#123; ...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"9)📱iOS앱개발 - CaseIterable 이해하기","uid":"aeca58d27d9a585d8ce5c912856b6811","slug":"Assemble/220214_09/2022-02-14-assemble09","date":"2022-02-13T15:00:00.000Z","updated":"2023-03-31T10:39:00.196Z","comments":true,"path":"api/articles/Assemble/220214_09/2022-02-14-assemble09.json","keywords":null,"cover":[],"text":"Pageboy 라이브러리의 예제를 보던 도중 CaseIterable 프로토콜을 사용하는 예제가 있는데 이게 뭔지를 몰라서 공부를 해보았습니다. CaseIterable 프로토콜은 모든 case들에 대해 컬렉션을 만들어 제공해주는 타입입니다. 쉽게 말해서...","link":"","photos":[],"count_time":{"symbolsCount":753,"symbolsTime":"1 mins."},"categories":[{"name":"Assemble","slug":"Assemble","count":9,"path":"api/categories/Assemble.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Assemble","slug":"Assemble","count":9,"path":"api/tags/Assemble.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}