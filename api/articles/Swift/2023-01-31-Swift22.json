{"title":"22)🍎 Swift - Compositional Layout.02","uid":"98a6caad455ce327628ef8de6d0451a0","slug":"Swift/2023-01-31-Swift22","date":"2023-01-30T15:00:00.000Z","updated":"2023-03-31T14:20:34.012Z","comments":true,"path":"api/articles/Swift/2023-01-31-Swift22.json","keywords":null,"cover":"https://i.imgur.com/sTVYBGH.png","content":"<h2 id=\"Supplementary-Item\"><a href=\"#Supplementary-Item\" class=\"headerlink\" title=\"Supplementary Item\"></a>Supplementary Item</h2><p>CollectionView를 사용하다보면 자주 사용하게 되는 요소들이 있습니다.</p>\n<p>Badges, Headers, Footers라고 불리는 이것들은 리스트의 앞이나 뒤에 붙어 전체적인 리스트에 대한 정보를 제공해줍니다.</p>\n<h3 id=\"Badges\"><a href=\"#Badges\" class=\"headerlink\" title=\"Badges\"></a>Badges</h3><p><code>CompositionalLayout</code>에서는 이런 SupplementaryItem들을 사용하기 더욱 쉽게 Anchor 개념을 도입했습니다.</p>\n<img src=\"https://i.imgur.com/IvAOVeC.png\" width=\"500\">\n\n<p>SupplementaryItem과 CollectionView의 시각적인 관계로서 이들의 위치를 정해준다는 개념입니다.</p>\n<p>개념 자체도 굉장히 쉽죠?</p>\n<p>적용도 동일하게 매우 쉽게 구현되었습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let badgeAnchor &#x3D; NSCollectionLayoutAnchor(\n\tedges: [.top, .trailing],\n\tfractionalOffset: CGPoint(x: 0.3, y: -0.3)\n)\nlet badgeSize &#x3D; NSCollectionLayoutSize(\n\twidthDimension: .absolute(20),\n\theightDimension: .absolute(20)\n)\nlet badge &#x3D; NSCollectionLayoutSupplementaryItem(\n\tlayoutSize: badgeSize,\n\telementKind: &quot;badge&quot;,\n\tcontainerAnchor: badgeAnchor\n)\nlet item &#x3D; NSCollectionLayoutItem(\n\tlayoutSize: itemSize,\n\tsupplementaryItems: [badge]\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>여기서 적용된 <code>badge</code>라는 <code>Item</code>은 우측 상단에 위치하고 20x20의 사이즈를 갖는다는 것을 쉽게 알 수 있죠.</p>\n<h3 id=\"Header-amp-Footer\"><a href=\"#Header-amp-Footer\" class=\"headerlink\" title=\"Header &amp; Footer\"></a>Header &amp; Footer</h3><p>Header와 Footer는 Badges와는 다른 점이 있습니다.</p>\n<p>Badges는 <code>Item</code>의 특정 위치에 겹쳐보이는 요소지만, Header와 Footer는 <code>Item</code>을 밀어내고 공간을 차지하면서 위치하는 요소라는 점입니다.</p>\n<p>따라서 Header와 Footer는 <code>Boundary</code>라는 추가적인 기능을 갖고 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let header &#x3D; NSCollectionLayoutBoundarySupplementaryItem(\n\tcontentSize: headerSize,\n\telementKind: &quot;header&quot;,\n\talignment: .top\n)\nlet footer &#x3D; NSCollectionLayoutBoundarySupplementaryItem(\n\tlayoutSize: footerSize,\n\telementKind: &quot;footer&quot;,\n\talignment: .bottom\n)\n\nheader.pinToVisibleBounds &#x3D; true\nsection.boundarySupplementaryItems &#x3D; [header, footer]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>pinToVisibleBounds</code> 프로퍼티를 사용해 흔히 말하는 Sticky Header 또한 만들기 쉬워졌습니다.</p>\n<h3 id=\"Decoration-View\"><a href=\"#Decoration-View\" class=\"headerlink\" title=\"Decoration View\"></a>Decoration View</h3><p><code>ScrollView</code>들의 배경을 꾸며주는 <code>DecorationView</code> 또한 아래처럼 사용할 수 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let background &#x3D; NSCollectionLayoutDecorationItem.backgorund(elementKind: &quot;background&quot;)\nsection.backgroundItems &#x3D; [background]\n\nlayout.register(\n\tMyCoolDecorationView.self,\n\tforDecorationViewOfKind: &quot;background&quot;\n)\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Estimated-Self-Sizing\"><a href=\"#Estimated-Self-Sizing\" class=\"headerlink\" title=\"Estimated Self-Sizing\"></a>Estimated Self-Sizing</h2><p><code>Item</code>들의 요소들의 크기가 정해지지 않고 변화하는 경우가 있습니다.</p>\n<p>컨텐츠가 있거나 없는 경우가 있을수도 있고, OS의 텍스트 크기를 변경함에 따라 <code>size</code>에 변화가 생길수도 있죠.</p>\n<p><code>size</code>를 설정해줄 때 <code>.estimated</code>을 활용하면 이에 대해 유연한 대응이 가능해집니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let headerSize &#x3D; NSCollectionLayoutSize(\n\twidthDimension: .fractionalWidth(1.0),\n\theightDimension: .estimated(44.0)\n)\nlet header &#x3D; NSCollectionLayoutBoundarySupplementaryitem(\n\tlayoutSize: headerSize,\n\telementKind: &quot;header&quot;,\n\talignment: .top\n)\nheader.pinToVisibleBounds &#x3D; true\nsection.boundarySupplementaryItems &#x3D; [header, footer]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위 예시의 경우 <code>Item</code>의 높이를 컨텐츠의 크기 변화에 대응시킬 수 있는 것이죠.</p>\n<h2 id=\"Group-안에-Group-넣기\"><a href=\"#Group-안에-Group-넣기\" class=\"headerlink\" title=\"Group 안에 Group 넣기\"></a>Group 안에 Group 넣기</h2><p>CollectionView가 복잡해지면서 <code>Group</code> 안에 다른 <code>Group</code>을 넣을 일이 생길 수도 있겠죠.</p>\n<p>사실 <code>NSCollectionLayoutGroup</code>은 <code>NSCollectionLayoutItem</code>을 상속받은 하위타입입니다.</p>\n<p>다른 말로, <code>Group</code>을 모아서 다른 <code>Group</code>을 만들수도 있다는 의미죠.</p>\n<p>이런 Nesting에는 제한이 없기 때문에 상당히 다양한 형태의 디자인들을 만들 수 있게 되었습니다.</p>\n<img src=\"https://i.imgur.com/ZHvtvEJ.png\" width=\"300\">\n\n<p>이런 형태를 만드려면 어떻게 만들면 될까요?</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let leadingItem &#x3D; NSCollectionLayoutItem(\n\tlayoutSize: leadingItemSize\n)\nlet trailingItem &#x3D; NSCollectionLayoutItem(\n\tlayoutSize: trailingItemSize\n)\nlet trailingGroup &#x3D; NSCollectionLayoutGroup.vertical(\n\tlayoutSize: trailingGroupSize,\n\tsubitem: trailingItem,\n\tcount: 2\n)\nlet containerGroup &#x3D; NSCollectionLayoutGroup.horizontal(\n\tlayoutSize: containerGroupSize,\n\tsubitems: [leadingItem, trailingGroup]\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>사실 굉장히 직관적으로 구성할 수 있습니다.</p>\n<p><code>leadingItem</code>과 <code>trailingItem</code> 둘이 묶인 <code>trailingGroup</code>을 <code>containerGroup</code>으로 묶은 형태입니다.</p>\n<h2 id=\"CollectionView를-CollectionView에-넣기\"><a href=\"#CollectionView를-CollectionView에-넣기\" class=\"headerlink\" title=\"CollectionView를 CollectionView에 넣기\"></a>CollectionView를 CollectionView에 넣기</h2><p><code>CollectionView</code> 안에 또 다른 <code>CollectionView</code>가 있을 경우, 스크롤하는 방향이 바뀌기 때문에 부자연스러운 동작을 보일 수 있습니다.</p>\n<p>이런 경우를 해결하기 위해서는</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">section.orthogonalScrollingBehavior &#x3D; .continuous<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>이 한 줄의 코드를 추가해주면 해결됩니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">enum UICollectionLayoutSectionOrthogonalScrollingBehavior: Int &#123;\n\tcase none\n\tcase continuous\n\tcase continuousGroupLeadingBoundary\n\tcase paging\n\tcase groupPaging\n\tcase groupPagingCentered\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 두개의 <code>continuous</code> 옵션과 3개의 <code>paging</code> 옵션이 있으니 원하는 값을 찾아 넣어봅시다.</p>\n","text":"Supplementary ItemCollectionView를 사용하다보면 자주 사용하게 되는 요소들이 있습니다. Badges, Headers, Footers라고 불리는 이것들은 리스트의 앞이나 뒤에 붙어 전체적인 리스트에 대한 정보를 제공해줍니다. B...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Supplementary-Item\"><span class=\"toc-text\">Supplementary Item</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Badges\"><span class=\"toc-text\">Badges</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Header-amp-Footer\"><span class=\"toc-text\">Header &amp; Footer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Decoration-View\"><span class=\"toc-text\">Decoration View</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Estimated-Self-Sizing\"><span class=\"toc-text\">Estimated Self-Sizing</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Group-%EC%95%88%EC%97%90-Group-%EB%84%A3%EA%B8%B0\"><span class=\"toc-text\">Group 안에 Group 넣기</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CollectionView%EB%A5%BC-CollectionView%EC%97%90-%EB%84%A3%EA%B8%B0\"><span class=\"toc-text\">CollectionView를 CollectionView에 넣기</span></a></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"23)🍎 Swift - RxSwift Traits","uid":"2f437dcacf2ab858ae6b89a9091808ec","slug":"Swift/2023-02-23-Swift23","date":"2023-02-22T15:00:00.000Z","updated":"2023-03-31T10:45:36.146Z","comments":true,"path":"api/articles/Swift/2023-02-23-Swift23.json","keywords":null,"cover":null,"text":"TraitsTraits는 Observable의 한 종류라고 볼 수 있습니다. Traits는 UI 영역에서 복잡하고 다양한 기능이 있는 Observable 대신 사용되기 위해 만들어졌습니다. 따라서 RxCocoa와 아주 밀접한 관련이 있지만, 몇몇 기능...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"},{"name":"RxSwift","slug":"RxSwift","count":2,"path":"api/tags/RxSwift.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"21)🍎 Swift - Compositional Layout.01","uid":"8bbfe0d3b3501508bfc41548ddec18f1","slug":"Swift/2023-01-29-Swift21","date":"2023-01-28T15:00:00.000Z","updated":"2023-03-31T14:20:29.397Z","comments":true,"path":"api/articles/Swift/2023-01-29-Swift21.json","keywords":null,"cover":"https://i.imgur.com/sTVYBGH.png","text":"Compositional Layout 높은 반응성을 갖고 유연한 UI 조정이 가능한 item들을 조합하여 사용하는 레이아웃입니다. 애플이 Compositional Layout을 소개하면서 대표적으로 예시를 든 앱이 App Store와 사진 앱입니다. ...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"feature":true}}