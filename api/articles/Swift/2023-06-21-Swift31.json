{"title":"31)🍎 Swift - Sign in with Apple","uid":"3109988ad89a1ccaa9db523d69ee2dd9","slug":"Swift/2023-06-21-Swift31","date":"2023-06-20T15:00:00.000Z","updated":"2023-06-21T06:31:38.302Z","comments":true,"path":"api/articles/Swift/2023-06-21-Swift31.json","keywords":null,"cover":"https://i.imgur.com/JySaXK4.png","content":"<h1 id=\"Swift-Sign-in-with-Apple\"><a href=\"#Swift-Sign-in-with-Apple\" class=\"headerlink\" title=\"Swift - Sign in with Apple\"></a>Swift - Sign in with Apple</h1><p>오늘은 애플로 로그인을 구현해볼겁니다!</p>\n<p>바로 가볼까요~</p>\n<h2 id=\"HIG\"><a href=\"#HIG\" class=\"headerlink\" title=\"HIG\"></a>HIG</h2><p>애플로 로그인은 애플의 SDK를 사용하는 것이니 애플이 제시한 디자인 가이드를 잘 따라주어야 합니다. Sign in with Apple에 대한 HIG 문서는 <a href=\"https://developer.apple.com/design/human-interface-guidelines/sign-in-with-apple#Creating-a-custom-Sign-in-with-Apple-button\">여기</a>에 있습니다.</p>\n<h3 id=\"Offering-Sign-in-with-Apple\"><a href=\"#Offering-Sign-in-with-Apple\" class=\"headerlink\" title=\"Offering Sign in with Apple\"></a>Offering Sign in with Apple</h3><p>애플로 로그인을 구현하면서 다음과 같은 점들을 따라야 합니다.</p>\n<ol>\n<li>로그인을 함으로써 사용자가 이득을 얻을 수 있는 경우에만 애플로 로그인을 제공할 것</li>\n<li>로그인의 시점을 미룰 수 있다면 최대한 미룰 것</li>\n<li>가입이 필요하다면 가입 이후에 SDK 로그인을 선택할 수 있도록 할 것</li>\n<li>기존에 사용하던 애플로 로그인에 연결될 수 있도록 구현할 것</li>\n<li>커머스 앱일 경우, 물품을 실제로 구매하기 직전에 로그인을 요구할 것</li>\n<li>애플로 로그인이 성공함과 동시에 사용자가 계정을 사용할 수 있는 화면으로 반겨줄 것</li>\n<li>애플로 로그인되어 있다는 사실을 안내할 것</li>\n</ol>\n<p>중요한 점은 사용자들이 가입을 하는 것을 원하지는 않으니, <strong>가입이 필요한 이유를 설명</strong> 하고 <strong>응당하는 가치를 제공</strong> 해야 한다. 로그인 시점은 <strong>최대한 늦추는 것</strong> 이 좋고 이전&#x2F;다른 기기에서 <strong>사용하던 계정과의 연동</strong> 이 이루어져야 한다.</p>\n<h3 id=\"Collecting-Data\"><a href=\"#Collecting-Data\" class=\"headerlink\" title=\"Collecting Data\"></a>Collecting Data</h3><p>애플로 로그인을 이용하면 사용자의 이름과 이메일 주소를 제공받을 수 있습니다.<br>하지만 경우에 따라 추가적인 정보가 필요할 때가 있겠죠. (생일이나 거주지 같은)<br>이럴 때를 위한 가이드라인도 제공하고 있습니다.</p>\n<ol>\n<li>부가 제공 정보가 필수적인지, 권장인지를 명확하게 전달할 것</li>\n<li>사용자가 직접 비밀번호를 입력하게 하지 말 것</li>\n<li>사용자가 이메일 가리기 옵션을 제공할 경우, 실제 이메일 주소를 요구하지 말 것</li>\n<li>부가적인 정보를 요구하기 전에 앱을 사용해 볼 수 있도록 할 것</li>\n<li>데이터 수집에 대해 투명할 것</li>\n</ol>\n<p>사실 대부분 도의적으로 알고 있는 부분들이죠?<br>4번의 경우가 눈에 띄는데, “일단 둘러보기” 옵션이 상용 앱에 점점 많아지는 이유가 아닐까 싶습니다.</p>\n<h3 id=\"Displaying-Buttons\"><a href=\"#Displaying-Buttons\" class=\"headerlink\" title=\"Displaying Buttons\"></a>Displaying Buttons</h3><p>자 이제 실제로 어떤 디자인을 요구하는 지 살펴볼까요..</p>\n<p>애플로 로그인은 애플이 제공하는 컴포넌트를 사용하는 것이 가장 쉽고 좋은 방법입니다.</p>\n<p><img src=\"https://i.imgur.com/XLjgmuj.png\"></p>\n<p>이 모양의 버튼 여기저기서 많이 보셨잖아요? 😋<br>하지만 앱의 기획이나 디자인에 따라 다른 형태로 사용하고 싶을 때도 있겠죠?<br>애플이 제공하는 가이드라인만 따른다면, 커스텀으로 제작하는 것도 가능합니다.</p>\n<ol>\n<li>다른 로그인 옵션들과 동일한 사이즈를 가질 것</li>\n<li>로그인 버튼을 찾기위해 유저가 스크롤할 일이 없을 것</li>\n</ol>\n<p>이 두가지 핵심 가이드라인을 생각하며 세부 내용들을 살펴봅시다.</p>\n<p>커스텀 애플로 로그인 버튼에서 가장 중요한 점은 당연하게도 <strong>해당 버튼이 “애플로 로그인” 기능을 한다는 것을 명시</strong> 해주는 것입니다.<br>애플이 제공하는 버튼과 같이 “애플로 로그인” 타이포와 로고를 함께 넣거나, 애플 로고 단일의 버튼을 넣는 식으로 말이죠.<br>참고로 애플이 제공하는 디자인 리소스(애플 로고와 같은)들은 <a href=\"https://developer.apple.com/design/resources/\">여기</a>서 얻을 수 있답니다.</p>\n<p>애플 로고를 사용하는 만큼 가이드라인도 굉장히 많습니다..<br>브랜드가 직접적으로 노출되는 버튼인만큼 브랜드에 대한 통일성을 지키기 위해서겠죠?<br>찬찬히 읽어보면서 그렇구나~ 정도로 봐도 괜찮을 것 같습니다.</p>\n<p><img src=\"https://i.imgur.com/yCbe7Li.png\"></p>\n<h4 id=\"로고\"><a href=\"#로고\" class=\"headerlink\" title=\"로고\"></a>로고</h4><ol>\n<li>로고 자체를 버튼으로 쓰지말고, 버튼 안에 로고가 포함되는 형태로 구성할 것</li>\n<li>버튼의 높이와 로고의 높이를 동일하게 설정할 것</li>\n<li>로고 파일을 잘라서 사용하지 말 것</li>\n<li>상하단에 패딩을 추가하지 말 것</li>\n</ol>\n<h4 id=\"버튼-속성\"><a href=\"#버튼-속성\" class=\"headerlink\" title=\"버튼 속성\"></a>버튼 속성</h4><ol>\n<li>버튼 타이틀은 “Sign in with Apple”, “Sign up with Apple”, “Continue with Apple”만 사용할 것</li>\n<li>로고와 텍스트가 포함된 버튼은 항상 사각형의 형태를 유지하고, 로고만 있는 버튼은 사각형이나 원형일 것</li>\n<li>로고와 타이틀 색상은 검정 혹은 흰색일 것 (커스텀 컬러 사용 금지)</li>\n<li>타이틀 폰트는 변경이 가능 (weight와 size 포함)</li>\n<li>대문자 자율적으로 사용 가능 (모든 글자를 대문자로 하는 것도 가능)</li>\n<li>배경 형태(질감, 그래디언트)는 앱에 맞게 변형 가능 (단 흰색, 검정 색상은 유지할 것)</li>\n<li>Corner Radius는 다른 버튼들에 맞게 변경 가능</li>\n<li>테두리와 그림자도 다른 버튼들에 맞게 변경 가능</li>\n</ol>\n<h2 id=\"Implementing-Sign-in-with-Apple\"><a href=\"#Implementing-Sign-in-with-Apple\" class=\"headerlink\" title=\"Implementing Sign in with Apple\"></a>Implementing Sign in with Apple</h2><p>자 이제 디자인적으로 고려해야할 점들은 알았으니 실제로 앱에 적용해봅시다.</p>\n<h3 id=\"Capability-추가\"><a href=\"#Capability-추가\" class=\"headerlink\" title=\"Capability 추가\"></a>Capability 추가</h3><p><img src=\"https://i.imgur.com/RUeUptV.png\"></p>\n<p>앱 환경 설정의 Signing &amp; Capabilities 탭에서 <strong>“+ Capability”</strong> 버튼을 통해 Sign in with Apple을 추가해줍니다.<br>그리고 Apple Developer의 <a href=\"https://developer.apple.com/account/resources/certificates/list\">Certificates, Identifiers &amp; Profiles</a>에서 애플로 로그인을 추가해줄 앱의 Identifier에 찾아들어갑시다.</p>\n<p><img src=\"https://i.imgur.com/ZORGuC3.png'\"></p>\n<p>그리고 이렇게 프로젝트 설정과 동일하게 <strong>“Sign in with Apple”</strong> Capability를 켜줍니다.</p>\n<p><img src=\"https://i.imgur.com/QMrOBgC.png\"></p>\n<p>환경 설정은 보통 여기서 끝나지만..<br>저의 경우에는 깃허브 액션을 사용하고 있어서 프로비저닝을 자동으로 관리해주는 옵션을 꺼두었기 때문에 직접 추가해주어야 합니다.</p>\n<p>App ID에 Capability를 켜준 뒤에 Profiles 탭에서 업데이트된 프로비전 파일을 다운받아줍니다.</p>\n<p><img src=\"https://i.imgur.com/EmWVN5a.png\"> <img src=\"https://i.imgur.com/8vbD8aq.png\"></p>\n<p>다운로드한 프로비전 파일을 import하고 정상적으로 적용이 됐다면..! 로컬에서는 세팅이 끝난겁니다.<br>저와 같이 깃허브 액션에 프로비전을 등록해두신 분들은 암호화 &amp; 업로드도 다시 해야한다는 것을 잊지 말아주세요!</p>\n<h3 id=\"Add-a-Sign-in-with-Apple-Button\"><a href=\"#Add-a-Sign-in-with-Apple-Button\" class=\"headerlink\" title=\"Add a Sign in with Apple Button\"></a>Add a Sign in with Apple Button</h3><p>자 이제 진짜 진짜 구현에 들어갑시다.</p>\n<p>우선 필요한 프레임워크를 <code>import</code> 해줍니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">AuthenticationServices</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>애플로 로그인을 트리거해줄 버튼부터 만들어야겠죠?<br>애플이 기본적으로 제공하는 컴포넌트를 사용한다면, <a href=\"https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidbutton\"><code>ASAuthorizationAppleIDButton</code></a>을 사용해줍시다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">setupProviderLoginView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> authorizationButton <span class=\"token operator\">=</span> <span class=\"token class-name\">ASAuthorizationAppleIDButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  authorizationButton<span class=\"token punctuation\">.</span><span class=\"token function\">addTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token other-directive property\">#selector</span><span class=\"token punctuation\">(</span>handleAuthorizationAppleIDButtonPress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>touchUpInside<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>loginProviderStackView<span class=\"token punctuation\">.</span><span class=\"token function\">addArrangedSubview</span><span class=\"token punctuation\">(</span>authorizationButton<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://i.imgur.com/wBXNcN8.png\"></p>\n<p>저는 디자이너님이 만들어주신 이 커스텀 버튼을 사용해볼게요!<br><code>#selector</code> 에 들어가는 메서드의 기능만 동일하면 되니 기본 컴포넌트나 커스텀 버튼이나 동일하게 진행해줍시다.</p>\n<h3 id=\"Request-Authorization-with-Apple-ID\"><a href=\"#Request-Authorization-with-Apple-ID\" class=\"headerlink\" title=\"Request Authorization with Apple ID\"></a>Request Authorization with Apple ID</h3><p>이제 버튼의 액션에 해당되는 <code>handleAuthorizationiAppleIDButtonPress()</code> 메서드를 구현해봅시다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">handleSignInWithApple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> provider <span class=\"token operator\">=</span> <span class=\"token class-name\">ASAuthorizationAppleIDProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">createRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  request<span class=\"token punctuation\">.</span>requestedScopes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">let</span> authorizationController <span class=\"token operator\">=</span> <span class=\"token class-name\">ASAuthorizationController</span><span class=\"token punctuation\">(</span>authorizationRequests<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>request<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  authorizationController<span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n  authorizationController<span class=\"token punctuation\">.</span>presentationContextProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n  authorizationController<span class=\"token punctuation\">.</span><span class=\"token function\">performRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>일단 <code>Provider</code> 인스턴스를 생성해주고, 리퀘스트를 보내야 하기 때문에 <code>createRequest()</code> 와 요구하는 Scope를 설정해줍니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">ASAuthorization</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scope</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token attribute atrule\">@available</span><span class=\"token punctuation\">(</span>iOS <span class=\"token number\">13.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> fullName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorization</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scope</span>\n\n  <span class=\"token attribute atrule\">@available</span><span class=\"token punctuation\">(</span>iOS <span class=\"token number\">13.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> email<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorization</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scope</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>사실 Scope라고 해봐야 두 개가 전부입니다. 😅<br>저희는 이메일과 이름 둘 다 필요하기 때문에 두 개 모두 요구 Scope에 추가해주었습니다.</p>\n<p><code>request</code> 세팅이 끝났다면, <code>ASAuthorizationController</code> 인스턴스의 <code>delegate</code> 와 <code>presentationContextProvider</code> 의 위임자를 설정해주고 <code>performRequests</code> 로 실제 리퀘스트를 보내줍니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ASAuthorizationControllerDelegate 채택 관련 트러블!</p></blockquote>\n<p>자.. 그런데 위임자를 설정해줄 때 분명 애플이</p>\n<p><img src=\"https://i.imgur.com/TTPVlQF.png\"></p>\n<p>이 두 가지 함수를 구현해주어야 한다고 했거든요..?</p>\n<p><img src=\"https://i.imgur.com/3gBI9Ob.png\"></p>\n<p>저는 근데 왜 이런 애들이 나올까요…</p>\n<p>조금 찾아보니 이 친구들은 <code>NSObjectProtocol</code> 이라는 프로토콜에 필요한 요소들이였습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@available</span><span class=\"token punctuation\">(</span>iOS <span class=\"token number\">13.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">ASAuthorizationControllerDelegate</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSObjectProtocol</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">optional</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">authorizationController</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorizationController</span><span class=\"token punctuation\">,</span> didCompleteWithAuthorization authorization<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorization</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">optional</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">authorizationController</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorizationController</span><span class=\"token punctuation\">,</span> didCompleteWithError error<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>ASAuthorizationControllerDelegate</code> 가 <code>NSObjectProtocol</code> 을 채택하고 있거든요.</p>\n<p><img src=\"https://i.imgur.com/UiXXeZc.png\"></p>\n<p>공식 문서에서 Obj-C 오브젝트들에 모두 필요한 프로토콜이라고 합니다.<br>그래서 문제는.. 저는 <code>Reactor</code> 라는 커스텀 레이어 위에서 작업하고 있었다는 것이죠.. <code>Reactor</code> 는 <code>NSObjectProtocol</code> 을 채택하고 있지 않거든요..! 😠<br>그래서 이 로직을 어디서 구현해줘야 하느냐..?<br>어디겠어요 뷰컨트롤러죠..<br><code>UIViewController</code> 는 <code>NSObject</code> 의 서브클래스이고, <code>NSObject</code> 가 <code>NSObjectProtocol</code> 을 채택하고 있습니다..</p>\n<p>깨알같이 <code>didCompleteWithAuthorization</code> 과 <code>didCompleteWithError</code> 메서드는 <code>optional</code> 이였네요..<br>그래서 XCode가 제안하는 프로토콜 충족 기능으로는 추가가 안됐던 것입니다..! 😅</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">AuthSignInViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorizationControllerDelegate</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ASAuthorizationControllerPresentationContextProviding</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">presentationAnchor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> controller<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorizationController</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ASPresentationAnchor</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>window<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">handleSigninWithApple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> provider <span class=\"token operator\">=</span> <span class=\"token class-name\">ASAuthorizationAppleIDProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">createRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span>requestedScopes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">let</span> authorizationController <span class=\"token operator\">=</span> <span class=\"token class-name\">ASAuthorizationController</span><span class=\"token punctuation\">(</span>authorizationRequests<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>request<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    authorizationController<span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n    authorizationController<span class=\"token punctuation\">.</span>presentationContextProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n    authorizationController<span class=\"token punctuation\">.</span><span class=\"token function\">performRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>그래서 이렇게 뷰컨으로 로직들을 옮겨주고 이어서 작업해보겠습니다.</p>\n<p>먼저 필수적으로 충족해야하는 <code>ASAuthorizationControllerPresentationContextProviding</code> 프로토콜의 <strong><code>presentationAnchor</code></strong> 메서드부터 구현해줍니다.</p>\n<p>애플로 로그인이 수행되기 위한 <code>UIWindow</code> 를 받기 위한 간단한 메서드라서 현재 뷰컨의 윈도우를 제공해주는 것으로 간단하게 구현해줍시다.</p>\n<p>여기까지 됐다면 애플로 로그인 버튼을 눌렀을 때, 애플로 로그인 화면이 나와야합니다.</p>\n<p>과연…!</p>\n<p><img src=\"https://i.imgur.com/vidw9xn.gif\"></p>\n<p>앗.. 🫣<br>애플 로그인 해주고요.. 다시..</p>\n<p><img src=\"https://i.imgur.com/e4kcbE5.gif\"></p>\n<p>오..! 됐어요 됐어요 🎉</p>\n<h3 id=\"Handle-User-Credentials\"><a href=\"#Handle-User-Credentials\" class=\"headerlink\" title=\"Handle User Credentials\"></a>Handle User Credentials</h3><p>이제 사용자가 로그인을 했을 때 실제로 받게 되는 값을 앱에서 처리해줘야 합니다.</p>\n<p>로그인이 성공했을 때 호출되는 <code>didCompleteWithAuthroization</code> delegate 함수부터 구현해줍시다.<br>이 함수에서는 제공되는 <code>userIdentifier</code>, <code>fullName</code>, <code>email</code> 의 값을 사용해 <strong>앱에서 사용되는 계정</strong> 을 등록해주어야 합니다.<br>쉽게 말해서 제공되는 데이터를 사용해 회원가입 절차를 통과시켜주어야 한다는 것이죠.</p>\n<p>애플이 제공하는 예시에서는 <code>AppleIDCredential</code> 과 <code>ASPasswordCredential</code> 의 두 가지 방법을 제시하고 있습니다.<br>여기서 <code>ASPasswordCredential</code> 은 iCloud에 비밀번호를 연동할 때 사용되는 Credential이기 때문에 제외하고 사용하였습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">authorizationController</span><span class=\"token punctuation\">(</span>\n  controller<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorizationController</span><span class=\"token punctuation\">,</span>\n  didCompleteWithAuthorization authorization<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorization</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> appleIDCredential <span class=\"token operator\">=</span> authorization<span class=\"token punctuation\">.</span>credential <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">ASAuthorizationAppleIDCredential</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">let</span> userIdentifier <span class=\"token operator\">=</span> appleIDCredential<span class=\"token punctuation\">.</span>user\n  <span class=\"token keyword\">let</span> fullName <span class=\"token operator\">=</span> appleIDCredential<span class=\"token punctuation\">.</span>fullName\n  <span class=\"token keyword\">let</span> email <span class=\"token operator\">=</span> appleIDCredential<span class=\"token punctuation\">.</span>email\n\n  <span class=\"token comment\">// Handle Sign Up Task</span>\n  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>자 이렇게 <code>AppleIDCredential</code>을 이용해서 사용자에 대한 정보를 받아올 수 있습니다.<br>이 데이터들을 어떻게 사용해서 회원가입을 시킬 지.. 는 앱과 서버의 환경마다 다르겠죠..?</p>\n<p>애플 로그인이 실패하는 경우에는 <code>didCompleteWithError</code> 함수가 호출됩니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">authorizationController</span><span class=\"token punctuation\">(</span>\n  controller<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ASAuthorizationController</span><span class=\"token punctuation\">,</span>\n  didCompleteWithError error<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Error</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Handle Error</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Request-Existing-Credentials\"><a href=\"#Request-Existing-Credentials\" class=\"headerlink\" title=\"Request Existing Credentials\"></a>Request Existing Credentials</h3><p>위의 경우는 애플 로그인을 이용해 “처음” 가입할 때의 경우였습니다.<br>그런데 로그아웃이나 앱을 삭제 한 뒤 다시 설치해서 로그인을 할 때는요?<br>이전의 계정 정보들을 그대로 사용할 수 있어야겠죠!</p>\n<p>그럴 때는 한 번 가입했던 애플 로그인에 다시 한 번 로그인하는 로직이 필요합니다.</p>\n<p>근데요.. 사실 이전에 구현했던 <code>handleSignInWithApple()</code> 함수와 상당히 유사하게 구현할 수 있습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">handleSignInWithApple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> provider <span class=\"token operator\">=</span> <span class=\"token class-name\">ASAuthorizationAppleIDProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">createRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> authorizationController <span class=\"token operator\">=</span> <span class=\"token class-name\">ASAuthorizationController</span><span class=\"token punctuation\">(</span>authorizationRequests<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>request<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  authorizationController<span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n  authorizationController<span class=\"token punctuation\">.</span>presentationContextProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n  authorizationController<span class=\"token punctuation\">.</span><span class=\"token function\">performRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Keychain &#x2F; iCloud PW와 관련하여 추가 학습 중</p></blockquote>\n<h3 id=\"Check-User-Credentials-at-Launch\"><a href=\"#Check-User-Credentials-at-Launch\" class=\"headerlink\" title=\"Check User Credentials at Launch\"></a>Check User Credentials at Launch</h3><p>이제 애플 로그인을 다 구현했으니 자동 로그인도 구현해봅시다.</p>\n<p>앱의 시작 구간에서 (보통 AppDelegate나 SceneDelegate겠죠?) <code>getCredentialState(forUserID:completion:)</code> 함수를 사용해 사용자의 애플 아이디와 앱의 연동 상황을 체크할 수 있습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token comment\">// AppDelegate.swift</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">application</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> application<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIApplication</span><span class=\"token punctuation\">,</span> didFinishLaunchingWithOptions launchOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">UIApplication</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">LaunchOptionsKey</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">Any</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">let</span> appleIDProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">ASAuthorizationAppleIDProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  appleIDProvider<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentialState</span><span class=\"token punctuation\">(</span>forUserID<span class=\"token punctuation\">:</span> <span class=\"token class-name\">KeychainItem</span><span class=\"token punctuation\">.</span>currentUserIdentifier<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">(</span>credentialState<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">switch</span> credentialState <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>authorized<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">break</span> <span class=\"token comment\">// The Apple ID credential is valid.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>revoked<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>notFound<span class=\"token punctuation\">:</span>\n      <span class=\"token comment\">// The Apple ID credential is either revoked or was not found, so show the sign-in UI.</span>\n      <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>window<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>rootViewController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">showLoginViewController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>흠.. <code>getCredentialState</code> 에 애플 아이디가 필요하네요..?</p></blockquote>\n<p>제가 원래 <code>AppleIDCredential</code> 중 <code>userIdentifier</code> 는 사용하지 않으려고 했었는데.. 여기서 필요하네요..?<br>그래서 해당 아이디를 키체인으로 저장해두는 로직이 추가적으로 필요할 것 같습니다.</p>\n<p>해당 내용까지 적용 후에 마저 글을 작성해보도록 하겠습니다.. 🥲</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>참고 문서</p></blockquote>\n<p><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/implementing_user_authentication_with_sign_in_with_apple\">Apple Developer - Implementing User Authentication with Sign in with Apple</a></p>\n<p><a href=\"https://developer.apple.com/wwdc19/706\">WWDC19 - Introducing Sign in with Apple</a></p>\n","feature":true,"text":"Swift - Sign in with Apple오늘은 애플로 로그인을 구현해볼겁니다! 바로 가볼까요~ HIG애플로 로그인은 애플의 SDK를 사용하는 것이니 애플이 제시한 디자인 가이드를 잘 따라주어야 합니다. Sign in with Apple에 대한 ...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Swift","slug":"Swift","count":31,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":82,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":82,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Swift-Sign-in-with-Apple\"><span class=\"toc-text\">Swift - Sign in with Apple</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HIG\"><span class=\"toc-text\">HIG</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Offering-Sign-in-with-Apple\"><span class=\"toc-text\">Offering Sign in with Apple</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Collecting-Data\"><span class=\"toc-text\">Collecting Data</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Displaying-Buttons\"><span class=\"toc-text\">Displaying Buttons</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EB%A1%9C%EA%B3%A0\"><span class=\"toc-text\">로고</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EB%B2%84%ED%8A%BC-%EC%86%8D%EC%84%B1\"><span class=\"toc-text\">버튼 속성</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Implementing-Sign-in-with-Apple\"><span class=\"toc-text\">Implementing Sign in with Apple</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Capability-%EC%B6%94%EA%B0%80\"><span class=\"toc-text\">Capability 추가</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Add-a-Sign-in-with-Apple-Button\"><span class=\"toc-text\">Add a Sign in with Apple Button</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Request-Authorization-with-Apple-ID\"><span class=\"toc-text\">Request Authorization with Apple ID</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Handle-User-Credentials\"><span class=\"toc-text\">Handle User Credentials</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Request-Existing-Credentials\"><span class=\"toc-text\">Request Existing Credentials</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Check-User-Credentials-at-Launch\"><span class=\"toc-text\">Check User Credentials at Launch</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"03)🎊 WWDC23 - SwiftData","uid":"358b9ce668b5d19c091a8d1511c207a6","slug":"WWDC23/2023-06-12-WWDC23-03","date":"2023-06-11T15:00:00.000Z","updated":"2023-06-12T03:37:10.117Z","comments":true,"path":"api/articles/WWDC23/2023-06-12-WWDC23-03.json","keywords":null,"cover":"https://i.imgur.com/7ZMZmZ5.jpg","text":"WWDC23 - SwiftData오늘은 SwiftData를 알아볼거에요Widget에다 써먹어야되거든요 😄 저는 일단 CoreData를 써본 적이 없습니다.아마 조만간 쓸 것 같기는 한데.. 일단은 없어요..왜 안썼냐면요.. 슬쩍 봐도 파일이 너무 여기...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/categories/WWDC23.json"}],"tags":[{"name":"Swift","slug":"Swift","count":82,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":82,"path":"api/tags/iOS.json"},{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/tags/WWDC23.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"feature":true}}