{"title":"23)🍎 Swift - RxSwift Traits","uid":"2f437dcacf2ab858ae6b89a9091808ec","slug":"Swift/2023-02-23-Swift23","date":"2023-02-22T15:00:00.000Z","updated":"2023-03-31T10:45:36.146Z","comments":true,"path":"api/articles/Swift/2023-02-23-Swift23.json","keywords":null,"cover":null,"content":"<h1 id=\"Traits\"><a href=\"#Traits\" class=\"headerlink\" title=\"Traits\"></a>Traits</h1><p><code>Traits</code>는 <code>Observable</code>의 한 종류라고 볼 수 있습니다.</p>\n<p>Traits는 UI 영역에서 복잡하고 다양한 기능이 있는 <code>Observable</code> 대신 사용되기 위해 만들어졌습니다.</p>\n<p>따라서 RxCocoa와 아주 밀접한 관련이 있지만, 몇몇 기능들은 RxSwift 전반적으로 사용될 수 있기 때문에 RxSwift와 RxCocoa에 나누어 구현되었다고 합니다.</p>\n<h3 id=\"등장-이유\"><a href=\"#등장-이유\" class=\"headerlink\" title=\"등장 이유\"></a>등장 이유</h3><p>Traits를 왜 사용해야하는지부터 알아보도록 하겠습니다.</p>\n<p>Traits는 <code>Observable</code> 시퀀스가 안전하게 통신될 수 있도록 돕습니다.</p>\n<p>모든 방면에서 사용될 수 있는 <code>Observable</code>을 대신하여 UI 처리에 특화된 기능과 문법을 제공합니다.</p>\n<p>따라서 Traits는 <code>Observable</code>이 제공하는 기능의 일부를 떼어낸 것과 다름없기 때문에 사용할지 말지의 여부는 사용자에게 달려있다고 합니다!</p>\n<h3 id=\"기본-개념\"><a href=\"#기본-개념\" class=\"headerlink\" title=\"기본 개념\"></a>기본 개념</h3><p>Traits는 단순히 하나의 <code>read-only</code>한 <code>Observable</code>을 감싸고 있는 <code>struct</code>입니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">struct Single&lt;Element&gt; &#123;\n\tlet source: Observable&lt;Element&gt;\n&#125;\n\nstruct Driver&lt;Element&gt; &#123;\n\tlet source: Observable&lt;Element&gt;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Traits를 <code>Observable</code>로 돌려놓고 싶을 때는 <code>.asObservable()</code>로 간단하게 처리할 수 있습니다.</p>\n<h2 id=\"RxSwift-Traits\"><a href=\"#RxSwift-Traits\" class=\"headerlink\" title=\"RxSwift Traits\"></a>RxSwift Traits</h2><h3 id=\"Single\"><a href=\"#Single\" class=\"headerlink\" title=\"Single\"></a>Single</h3><p>Single은 무조건 하나의 값 또는 에러를 방출합니다.</p>\n<p>지속적인 값이 아니라 딱 한 번의 결과값이 필요할 떄 사용됩니다.</p>\n<p>한 번의 값만을 방출하기 떄문에 <code>.completed</code>가 없습니다.</p>\n<p>사용되기 가장 좋은 곳은 HTTP 통신을 할 때이며, request에 하나의 응답만이 돌아올 때 사용하면 유용합니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func getRepo(_ repo: String) -&gt; Single&lt;[String: Any]&gt; &#123;\n\treturn Single&lt;[String: Any]&gt;.create &#123; single in\n\t\tlet task &#x3D; URLSession.dataTask(with: URL(string: &quot;https:&#x2F;&#x2F;api.github.com&#x2F;\\(repo)&quot;)! &#123; data, _, error in\n\t\t\tif let error &#123;\n\t\t\t\tsingle(.failure(error))\n\t\t\t\treturn\n\t\t\t&#125;\n\n\t\t\tguard let data,\n\t\t\t\tlet json &#x3D; try? JSONSerialization.jsonObject(with: data, option: .mutableLeaves),\n\t\t\t\tlet result &#x3D; json as? [String: Any] else &#123;\n\t\t\t\t\tsingle(.failure(DataError.cantParseJSON))\n\t\t\t\t\treturn\t  \n\t\t\t&#125;\n\n\t\t\tsingle(.success(result))\n\t\t&#125;\n\t\ttask.resume()\n\n\t\treturn Disposables.create &#123; task.cancel() &#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">getRepo(&quot;ReactiveX&#x2F;RxSwift&quot;)\n\t.subscribe(onSuccess: &#123; json in\n\t\t\tprint(&quot;JSON: &quot;, json)\n\t\t&#125;,\n\t\tonError: &#123; error in\n\t\t\tprint(&quot;Error: &quot;, error)\n\t\t&#125;)\n\t.disposed(by: self.disposeBag)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Completable\"><a href=\"#Completable\" class=\"headerlink\" title=\"Completable\"></a>Completable</h3><p>Completable은 <code>.completed</code>나 <code>.error</code>만을 방출합니다.</p>\n<p>한마디로 값(<code>element</code>)을 방출하지 않습니다.</p>\n<p>작업의 내용은 중요하지 않고, 성공&#x2F;실패 여부만 중요한 경우에 사용됩니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func cacheLocally() -&gt; Completable &#123;\n\treturn Completable.create &#123; completable in\n\t\tguard success else &#123;\n\t\t\tcompletable(.error(CacheError.failedCaching))\n\t\t\treturn Disposables.create &#123; &#125;\n\t\t&#125;\n\n\t\tcompletable(.completed)\n\t\treturn Disposables.create &#123; &#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">cacheLocally()\n\t.subscribe(onCompleted: &#123;\n\t\tprint(&quot;Completed with no error.&quot;)\n\t&#125;,\n\tonError: &#123; error in\n\t\tprint(&quot;Completed with an error: \\(error.localizedDescription)&quot;)\n\t&#125;)\n\t.disposed(by: self.disposebag)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h3><p>Maybe는 Single과 Completable의 중간에 있는 Trait입니다.</p>\n<p>하나의 값을 방출하거나 방출 없이 <code>.complete</code>되거나 <code>.error</code>를 방출할 수 있습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">func generateString() -&gt; Maybe&lt;String&gt; &#123;\n\treturn Maybe&lt;String&gt;.create &#123; maybe in\n\t\tmaybe(.success(&quot;RxSwift&quot;))\n\t\t&#x2F;&#x2F; or\n\t\tmaybe(.completed)\n\t\t&#x2F;&#x2F; or\n\t\tmaybe(.error(error))\n\n\t\treturn Disposables.create &#123; &#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">generateString()\n\t.subscribe(onSuccess: &#123; element in\n\t\tprint(&quot;Completed with element \\(element)&quot;)\n\t&#125;,\n\t.onError &#123; error in\n\t\tprint(&quot;Completed with an error \\(error.localizedDescription)&quot;)\n\t&#125;,\n\tonCompleted: &#123;\n\t\tprint(&quot;Completed with no element&quot;)\n\t&#125;)\n\t.disposed(by: self.disposeBag)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"RxCocoa-Traits\"><a href=\"#RxCocoa-Traits\" class=\"headerlink\" title=\"RxCocoa Traits\"></a>RxCocoa Traits</h2><h3 id=\"Driver\"><a href=\"#Driver\" class=\"headerlink\" title=\"Driver\"></a>Driver</h3><p>가장 많이 사용되는 Trait입니다.</p>\n<p>UI 레이어만을 위해 특별하게 개발된 기능입니다.</p>\n<p>특징을 정리해보면 아래와 같습니다.</p>\n<ul>\n<li>에러가 방출하지 않습니다</li>\n<li><code>observe</code>가 Main Scheduler에서 이루어집니다.</li>\n<li>side effect를 공유합니다.</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let results &#x3D; query.rx.text\n\t.throttle(.milliseconds(300), scheduler: MainScheduler.instance)\n\t.flatMapLatest &#123; query in\n\t\tfetchAutoCompleteItems(query)\n\t&#125;\n\nresults\n\t.map &#123; &quot;\\($0.count)&quot; &#125;\n\t.bind(to: resultCount.rx.text)\n\t.disposed(by: self.disposeBag)\n\nresults\n\t.bind(to: resultsTableView.rx.items(cellIdentifier: &quot;Cell&quot;)) &#123; _, result, cell in\n\t\tcell.textLabel?.text &#x3D; &quot;\\(result)&quot;\n\t&#125;\n\t.disposed(by: self.disposeBag)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위 예시는 세가지 문제점들을 가지고 있습니다.</p>\n<ol>\n<li><code>fetchAutoCompleteItems</code>가 에러를 방출할 경우, UI에 바인딩되어 있던 것들이 모두 unbind되면서 이후의 쿼리들에 더 이상 UI가 변화하지 않을 것입니다.</li>\n<li><code>fetchAutoCompleteItems</code>가 메인쓰레드가 아닌 백그라운드 쓰레드에 결과를 반환할 경우, UI에 결과값을 바인딩하는 작업이 백그라운드 쓰레드에서 일어날 수 있고, 이는 예기치 않은 크래시를 발생시킬 수 있습니다.</li>\n<li>결과값이 두 개의 UI 컴포넌트(TableView, UILabel)에 바인딩되어 있기 때문에 각각이 따로 HTTP request를 요청해 불필요한 중복 요청이 발생합니다.</li>\n</ol>\n<p>이를 해결한 코드는 아래와 같습니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let results &#x3D; query.rx.text\n\t.throttle(.milliseconds(300), scheduler: MainScheduler.instance)\n\t.flatMapLatest &#123; query in\n\t\tfetchAutoCompleteItems(query)\n\t\t\t.observeOn(MainScheduler.instance)\n\t\t\t.catchErrorJustReturn([])\n\t&#125;\n\t.share(replay: 1)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>예시에서는 이런 과정이 쉬울 수 있으나, 실전에서 프로젝트가 커짐에 따라 이런 사소한 문제점들을 발견하는 것은 어려울 수 있습니다.</p>\n<p>따라서 RxCocoa는 이런 문제들을 해결한 UI 레이어 전용의 Trait을 제공하는데, 그것이 바로 Driver인 것 입니다.</p>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let results &#x3D; query.rx.text.asDriver()\n\t.throttle(.milliseconds(300), scheduler: MainScheduler.instance)\n\t.flatMapLatest &#123; query in\n\t\tfetchAutoCompleteItems(query)\n\t\t\t.asDriver(onErrorJustReturn: [])\n\t&#125;\n\nresults\n\t.map &#123; &quot;\\($0.count)&quot; &#125;\n\t.drive(resultCount.rx.text)\n\t.disposed(by: self.disposeBag)\n\nresults\n\t.drive(resultsTableView.rx.items(cellIdentifier: &quot;Cell&quot;)) &#123; _, result, cell in\n\t\tcell.textLabel?.text &#x3D; &quot;\\(result)&quot;\n\t&#125;\n\t.disposed(by: self.disposeBag)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>총 세 군데만 주목하면 됩니다!</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>query.rx.text.asDriver()</code>  </p></blockquote>\n<p><code>asDriver</code> 메서드는 <code>ControlProperty</code>를 <code>Driver</code>로 변환합니다.</p>\n<p><code>Driver</code>는 <code>ControlProperty</code>의 모든 프로퍼티를 갖기 때문에 따로 신경쓸 부분은 없이 변환만 하면 그대로 사용할 수 있습니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>.asDriver(onErrorJustReturn: [])</code></p></blockquote>\n<p>이전에 살펴봤던 다음 세 가지 조건만 만족한다면, 어떤 <code>Observable</code>이던 <code>Driver</code>로 변환할 수 있습니다.</p>\n<ul>\n<li>에러가 방출하지 않습니다</li>\n<li><code>observe</code>가 Main Scheduler에서 이루어집니다.</li>\n<li>side effect를 공유합니다. (<code>.share(replay:, scope:)</code>)</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">let safeSequence &#x3D; xs\n\t.observeOn(MainScheduler.instance)\n\t.catchErrorJustReturn(onErrorJustReturn)\n\t.share(replay: 1, scope: .whileConnected)\nreturn Driver(raw: safeSequence)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>정리해보면 위 과정과 <code>asDriver(onErrorJustReturn: [])</code>은 동일합니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>.drive()</code></p></blockquote>\n<p>마지막으로 <code>bind(to:)</code> 대신 <code>drive()</code>를 사용합니다.</p>\n<p><code>drive()</code>를 사용함으로서 UI에 데이터를 안전하게 바인딩할 수 있습니다.</p>\n<h3 id=\"Signal\"><a href=\"#Signal\" class=\"headerlink\" title=\"Signal\"></a>Signal</h3><p>구독과 동시에 가장 마지막 이벤트를 <code>replay</code>하지 않는다는 점 외에는 Driver와 동일합니다. </p>\n<p>하지만 sequence를 공유한다는 점은 변하지 않기 때문에 <code>share</code> 메서드를 통해 원할 때는 값을 공유받을 수 있습니다.</p>\n<h2 id=\"ControlProperty-x2F-ControlEvent\"><a href=\"#ControlProperty-x2F-ControlEvent\" class=\"headerlink\" title=\"ControlProperty &#x2F; ControlEvent\"></a>ControlProperty &#x2F; ControlEvent</h2><h3 id=\"ControlProperty\"><a href=\"#ControlProperty\" class=\"headerlink\" title=\"ControlProperty\"></a>ControlProperty</h3><p>UI 컴포넌트의 프로퍼티를 내용으로 갖는 <code>Observable</code>&#x2F;<code>ObservableType</code> 입니다.</p>\n<ul>\n<li>실패하지 않습니다.</li>\n<li><code>share(replay: 1)</code><ul>\n<li>Stateful 합니다. (구독과 동시에 마지막 값을 한 번 방출합니다.)</li>\n</ul>\n</li>\n<li>에러를 발생시키지 않습니다.</li>\n<li>메인 쓰레드에서 동작합니다.</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Reactive where Base: UISearchBar &#123;\n\tpublic var value: ControlProperty&lt;String?&gt; &#123;\n\t\tlet source: Observable&lt;String?&gt; &#x3D; Observable.deferred &#123; [weak searchBar &#x3D; self.base as UISearchBar] () -&gt; Observable&lt;String?&gt; in\n\t\t\tlet text &#x3D; searchBar?.text\n\t\t\treturn (searchBar?.rx.delegate.methodInvoked(#selector(UISearchBarDelegate.searchBar(_:textDidChange:))) ?? Observable.empty())\n\t\t\t\t.map &#123; a in\n\t\t\t\t\treturn a[1] as? String\n\t\t\t\t&#125;\n\t\t\t\t.startWith(text)\n\t\t&#125;\n\n\t\tlet bindingObserver &#x3D; Binder(self.base) &#123; (searchBar, text: String?) in\n\t\t\tsearchBar.text &#x3D; text\n\t\t&#125;\n\n\t\treturn ControlProperty(values: source, valueSink: bindingObserver)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ControlEvent\"><a href=\"#ControlEvent\" class=\"headerlink\" title=\"ControlEvent\"></a>ControlEvent</h3><p>UI 컴포넌트의 이벤트를 내용으로 갖는 <code>Observable</code>&#x2F;<code>ObservableType</code> 입니다.</p>\n<ul>\n<li>실패하지 않습니다.</li>\n<li>구독이 이루어졌을 때 초기값을 방출하지 않습니다.</li>\n<li>에러를 방출하지 않습니다.</li>\n<li>메인 쓰레드에서 동작합니다.</li>\n</ul>\n<pre class=\"line-numbers language-Swift\" data-language=\"Swift\"><code class=\"language-Swift\">extension Reactive where Base: UICollectionView &#123;\n\tpublic var itemSelected: ControlEvent&lt;IndexPath&gt; &#123;\n\t\tlet source &#x3D; delegate.methodInvoked(#selector(UICollectionViewDelegate.collectionView(_:didSelectItemAt:)))\n\t\t\t.map &#123; a in\n\t\t\t\treturn a[1] as! IndexPath\n\t\t\t&#125;\n\n\t\treturn ControlEvent(events: source)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"참고-링크\"><a href=\"#참고-링크\" class=\"headerlink\" title=\"참고 링크\"></a>참고 링크</h1><p><a href=\"https://github.com/ReactiveX/RxSwift/blob/main/Documentation/Traits.md\">RxSwift Traits</a></p>\n","text":"TraitsTraits는 Observable의 한 종류라고 볼 수 있습니다. Traits는 UI 영역에서 복잡하고 다양한 기능이 있는 Observable 대신 사용되기 위해 만들어졌습니다. 따라서 RxCocoa와 아주 밀접한 관련이 있지만, 몇몇 기능...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"RxSwift","slug":"RxSwift","count":2,"path":"api/tags/RxSwift.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Traits\"><span class=\"toc-text\">Traits</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EB%93%B1%EC%9E%A5-%EC%9D%B4%EC%9C%A0\"><span class=\"toc-text\">등장 이유</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90\"><span class=\"toc-text\">기본 개념</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RxSwift-Traits\"><span class=\"toc-text\">RxSwift Traits</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Single\"><span class=\"toc-text\">Single</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Completable\"><span class=\"toc-text\">Completable</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Maybe\"><span class=\"toc-text\">Maybe</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RxCocoa-Traits\"><span class=\"toc-text\">RxCocoa Traits</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Driver\"><span class=\"toc-text\">Driver</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Signal\"><span class=\"toc-text\">Signal</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ControlProperty-x2F-ControlEvent\"><span class=\"toc-text\">ControlProperty &#x2F; ControlEvent</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ControlProperty\"><span class=\"toc-text\">ControlProperty</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ControlEvent\"><span class=\"toc-text\">ControlEvent</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%EC%B0%B8%EA%B3%A0-%EB%A7%81%ED%81%AC\"><span class=\"toc-text\">참고 링크</span></a></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"24)🍎 Swift - Moya","uid":"3792db1f46c6369b4473f92f8ea4160f","slug":"Swift/2023-02-26-Swift24","date":"2023-02-25T15:00:00.000Z","updated":"2023-03-31T14:18:24.179Z","comments":true,"path":"api/articles/Swift/2023-02-26-Swift24.json","keywords":null,"cover":"https://i.imgur.com/3np5TJM.png","text":"Moya 모야가 대체 모야? (아마 한국인이 작성한 모야 게시물 80%는 이걸로 시작할듯…) 그래서 모야는 뭘까요? Moya는 enum 타입을 적극적으로 활용하여 네트워크 요청 레이어를 type-safe하게 래핑한 네트워킹 라이브러리입니다. 컴파일 타...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"},{"name":"Moya","slug":"Moya","count":1,"path":"api/tags/Moya.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"22)🍎 Swift - Compositional Layout.02","uid":"98a6caad455ce327628ef8de6d0451a0","slug":"Swift/2023-01-31-Swift22","date":"2023-01-30T15:00:00.000Z","updated":"2023-03-31T14:20:34.012Z","comments":true,"path":"api/articles/Swift/2023-01-31-Swift22.json","keywords":null,"cover":"https://i.imgur.com/sTVYBGH.png","text":"Supplementary ItemCollectionView를 사용하다보면 자주 사용하게 되는 요소들이 있습니다. Badges, Headers, Footers라고 불리는 이것들은 리스트의 앞이나 뒤에 붙어 전체적인 리스트에 대한 정보를 제공해줍니다. B...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":78,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":78,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}