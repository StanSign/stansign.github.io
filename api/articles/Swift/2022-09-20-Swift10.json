{"title":"10)🍎Swift - Struct vs Class","uid":"82a0cf49292d5e4a2482e5b47ada0044","slug":"Swift/2022-09-20-Swift10","date":"2022-09-19T15:00:00.000Z","updated":"2023-03-31T10:42:09.835Z","comments":true,"path":"api/articles/Swift/2022-09-20-Swift10.json","keywords":null,"cover":[],"content":"<h2 id=\"구조체-struct-와-클래스-class\"><a href=\"#구조체-struct-와-클래스-class\" class=\"headerlink\" title=\"구조체(struct)와 클래스(class)\"></a>구조체(<code>struct</code>)와 클래스(<code>class</code>)</h2><p>Swift에는 두 가지 데이터 타입이 있습니다. 바로 <code>struct</code>와 <code>class</code>입니다. 어느 정도 감으로 사용하고 있었지만 정확하게 알아보고 싶어서 공부를 해보겠습니다.</p>\n<h3 id=\"값-타입-vs-참조-타입\"><a href=\"#값-타입-vs-참조-타입\" class=\"headerlink\" title=\"값 타입 vs 참조 타입\"></a>값 타입 vs 참조 타입</h3><p>정의의 차이로 설명하자면 <code>class</code>는 참조 타입, <code>struct</code>는 값 타입입니다. 값 타입인 <code>struct</code>에 소속된 인스턴스들은 값을 복사하여 새로운 인스턴스를 만들어 사용합니다. 참조 타입인 <code>class</code>에 소속된 인스턴스들은 참조 값이 전달됩니다. </p>\n<h4 id=\"할당-메모리-영역\"><a href=\"#할당-메모리-영역\" class=\"headerlink\" title=\"할당 메모리 영역\"></a>할당 메모리 영역</h4><h5 id=\"Struct\"><a href=\"#Struct\" class=\"headerlink\" title=\"Struct\"></a>Struct</h5><p>값 복사 방식을 사용하는 구조체는 메모리의 스택 영역에 할당됩니다. 따라서 스택 영역의 특징들을 갖습니다.</p>\n<ul>\n<li>Thread-Safe하다. (스레드가 독립적으로 사용)</li>\n<li>한 번의 명령으로 할당&amp;해제 가능 (스택 포인터 사용)</li>\n<li>컴파일 시간에 크기 배정</li>\n</ul>\n<h5 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h5><p>참조 방식을 사용하는 클래스는 메모리의 힙 영역에 할당됩니다. 따라서 힙 영역의 특징들을 갖습니다.</p>\n<ul>\n<li>런타임에 크기가 배정된다.</li>\n<li>Thread-Safe하지 않다. (스레드가 공유하여 사용)</li>\n</ul>\n<h5 id=\"권장하는-타입은\"><a href=\"#권장하는-타입은\" class=\"headerlink\" title=\"권장하는 타입은?\"></a>권장하는 타입은?</h5><p>애플은 되도록이면  <code>struct</code>를 사용하는 것을 권장하고 있습니다. 메모리 관리 시에 별도의 연산 과정이 필요하지 않고 속도도 빠르기 때문입니다. 그렇다면 <code>class</code> 는 왜 사용할까요?</p>\n<h4 id=\"상속\"><a href=\"#상속\" class=\"headerlink\" title=\"상속\"></a>상속</h4><p><code>class</code> 는 상속이 가능합니다. <code>protocol</code>을 사용하여  기존의 <code>class</code>에서 확장된 버전의 <code>class</code>를 사용할 수 있습니다. 이 내용은 추후에 따로 다루고 링크를 남겨두도록 하겠습니다!</p>\n<h3 id=\"그럼-언제-뭘-쓸까요\"><a href=\"#그럼-언제-뭘-쓸까요\" class=\"headerlink\" title=\"그럼 언제 뭘 쓸까요?\"></a>그럼 언제 뭘 쓸까요?</h3><p>그렇다면 언제 <code>struct</code>를, 언제 <code>class</code>를 사용해야 할까요?<br>위에서 한 번 언급했던대로 애플은 <code>struct</code>를 사용하는 것을 권장하고 있습니다. Swift의 <code>struct</code>는 다른 언어에서는 <code>class</code>만이 갖고 있는 편리한 기능들을 상당 수 지원합니다. Swift의 <code>struct</code>는 저장&#x2F;연산 프로퍼티, 메서드, 심지어 프로토콜까지 사용할 수 있습니다. 실제로 애플은 대부분의 표준 라이브러리(숫자, 문자열, 배열, 딕셔너리 등)에 <code>struct</code>를 사용했습니다.</p>\n<h4 id=\"obj-c-언어와-상호-이용할-때는-class를-이용\"><a href=\"#obj-c-언어와-상호-이용할-때는-class를-이용\" class=\"headerlink\" title=\"obj-c 언어와 상호 이용할 때는 class를 이용\"></a>obj-c 언어와 상호 이용할 때는 <code>class</code>를 이용</h4><p>obj-c의 API를 사용하여 데이터를 처리할 때는 <code>class</code>를 사용해야만 합니다. 따라서 이런 경우에는 클래스를 사용할 수 밖에 없습니다.</p>\n<h4 id=\"고유한-값에-대한-제어가-필요할-때는-class-이용\"><a href=\"#고유한-값에-대한-제어가-필요할-때는-class-이용\" class=\"headerlink\" title=\"고유한 값에 대한 제어가 필요할 때는 class 이용\"></a>고유한 값에 대한 제어가 필요할 때는 <code>class</code> 이용</h4><p><code>class</code>는 참조 타입이기 때문에 어느 한 곳에서 값을 수정하더라도 앱의 모든 곳에서 변경이 일어납니다. 이런 현상을 의도적으로 원한다면  <code>class</code>를 사용하면 좋습니다.</p>\n<h4 id=\"상속과-공유를-모델링-할-때는-struct를-이용\"><a href=\"#상속과-공유를-모델링-할-때는-struct를-이용\" class=\"headerlink\" title=\"상속과 공유를 모델링 할 때는 struct를 이용\"></a>상속과 공유를 모델링 할 때는 <code>struct</code>를 이용</h4><p><code>class</code>와 <code>struct</code>는 모두 상속을 지원합니다. 하지만 <code>struct</code>는 <code>class</code>로부터 상속되지는 못하고, <code>protocol</code>로부터만 차용될 수 있습니다.<br><code>protocol</code>은 클래스, 구조체, 열거형 데이터들이 상속할 수 있지만 <code>class</code>는 같은 <code>class</code>들끼리만 상속이 가능하기 때문에 데이터를 설계할 때 우선 <code>protocol</code>을 사용해보는 것을 추천합니다.</p>\n<h5 id=\"참고\"><a href=\"#참고\" class=\"headerlink\" title=\"참고\"></a>참고</h5><p><img src=\"https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes\" alt=\"Choosing Between Structures and Classes\"></p>\n","text":"구조체(struct)와 클래스(class)Swift에는 두 가지 데이터 타입이 있습니다. 바로 struct와 class입니다. 어느 정도 감으로 사용하고 있었지만 정확하게 알아보고 싶어서 공부를 해보겠습니다. 값 타입 vs 참조 타입정의의 차이로 설명...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Swift","slug":"Swift","count":26,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4-struct-%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4-class\"><span class=\"toc-text\">구조체(struct)와 클래스(class)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B0%92-%ED%83%80%EC%9E%85-vs-%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85\"><span class=\"toc-text\">값 타입 vs 참조 타입</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%ED%95%A0%EB%8B%B9-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%98%81%EC%97%AD\"><span class=\"toc-text\">할당 메모리 영역</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Struct\"><span class=\"toc-text\">Struct</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Class\"><span class=\"toc-text\">Class</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EA%B6%8C%EC%9E%A5%ED%95%98%EB%8A%94-%ED%83%80%EC%9E%85%EC%9D%80\"><span class=\"toc-text\">권장하는 타입은?</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D\"><span class=\"toc-text\">상속</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B7%B8%EB%9F%BC-%EC%96%B8%EC%A0%9C-%EB%AD%98-%EC%93%B8%EA%B9%8C%EC%9A%94\"><span class=\"toc-text\">그럼 언제 뭘 쓸까요?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#obj-c-%EC%96%B8%EC%96%B4%EC%99%80-%EC%83%81%ED%98%B8-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EB%95%8C%EB%8A%94-class%EB%A5%BC-%EC%9D%B4%EC%9A%A9\"><span class=\"toc-text\">obj-c 언어와 상호 이용할 때는 class를 이용</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EA%B3%A0%EC%9C%A0%ED%95%9C-%EA%B0%92%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%9C%EC%96%B4%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0-%EB%95%8C%EB%8A%94-class-%EC%9D%B4%EC%9A%A9\"><span class=\"toc-text\">고유한 값에 대한 제어가 필요할 때는 class 이용</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EC%83%81%EC%86%8D%EA%B3%BC-%EA%B3%B5%EC%9C%A0%EB%A5%BC-%EB%AA%A8%EB%8D%B8%EB%A7%81-%ED%95%A0-%EB%95%8C%EB%8A%94-struct%EB%A5%BC-%EC%9D%B4%EC%9A%A9\"><span class=\"toc-text\">상속과 공유를 모델링 할 때는 struct를 이용</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EC%B0%B8%EA%B3%A0\"><span class=\"toc-text\">참고</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"2)🧰 Swift - 등호의 의미와 print","uid":"cf2f5162a371fd39afcfa188ee9b14c2","slug":"Allen/2022-09-20-Allen02","date":"2022-09-19T15:00:00.000Z","updated":"2023-03-31T10:30:52.804Z","comments":true,"path":"api/articles/Allen/2022-09-20-Allen02.json","keywords":null,"cover":null,"text":"앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) 프로그래밍 기본등호(&#x3D;)의 의미 프로그래밍에서 사용하는 등호(&#x3D;)는 할당의 의미이다. 할당연산자var a &#x3D; 5 a &#x3D; a + 7 등호 기준으...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"1)🧰 Swift - 컴퓨터의 동작 원리","uid":"b08c3ce9980327554bb7435efb5f3b94","slug":"Allen/2022-09-19-Allen01","date":"2022-09-18T15:00:00.000Z","updated":"2023-03-31T10:30:35.048Z","comments":true,"path":"api/articles/Allen/2022-09-19-Allen01.json","keywords":null,"cover":null,"text":"이번에 Swift 언어와 iOS의 기본에 대해 부족하다는 생각이 들어서 앨런님의 온라인 부트캠프를 수강하게 되었습니다. 매주 내용들을 정리해보며 공부해볼 생각입니다!앨런 Swift문법 마스터 스쿨 (온라인 BootCamp - 2개월과정) CS 101컴...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"AllenBootCamp","slug":"AllenBootCamp","count":45,"path":"api/categories/AllenBootCamp.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Allen","slug":"Allen","count":45,"path":"api/tags/Allen.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}