{"title":"8)📱iOS앱개발 - Lambda 함수에서 다른 Lambda 함수 실행하기","uid":"a41d20cacf7715bb74660a95ac0d6e15","slug":"Assemble/220130_08/2022-01-30-assemble08","date":"2022-01-29T15:00:00.000Z","updated":"2023-03-31T10:38:42.995Z","comments":true,"path":"api/articles/Assemble/220130_08/2022-01-30-assemble08.json","keywords":null,"cover":[],"content":"<p>DB의 데이터를 자동으로 채우고 api로 불러오는 작업을 계속 진행하던 중에 Lambda 함수에서 다른 Lambda 함수를 불러오면 간단하게 끝낼 수 있는 작업을 마주치게 되었습니다. 방법을 찾아보니 AWS에서 Invoke 함수를 제공하고 있었습니다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import boto3\n\nlambda_client &#x3D; boto3.client(&#39;lambda&#39;,\n                             region_name&#x3D;&#39;ap-northeast-2&#39;, # 서울 (본인이 설정한 지역 코드)\n                             aws_access_key_id&#x3D;&#39;YOUR ACCESS KEY&#39;,\n                             aws_secret_access_key&#x3D;&#39;YOUR SECRET KEY&#39;) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>lambda 함수에만 사용하는 함수는 아니기 때문에 클라이언트 유형을 lambda로 설정해주고, 본인의 환경에 맞게 값들을 입력해줍니다.<br><strong>region_name</strong>: 사용하고 있는 AWS 리전 코드를 입력해줍니다. AWS 콘솔 우측 상단에서 확인 가능합니다.</p>\n<img src=\"https://github.com/StanSign/StanSign.github.io/blob/main/_posts/Assemble/220130_08/cap01.png?raw=true\" alt=\"server\" width=\"300\">\n\n<p><strong>aws_access_key_id</strong>: AWS 계정의 보안자격키를 입력해줍니다.<br><strong>aws_secret_access_key</strong>: AWS 계정의 보안자격 시크릿키를 입력해줍니다.<br>이 두가지 값은 AWS의 IAM 서비스에서 발급&#x2F;조회할 수 있습니다.</p>\n<img src=\"https://github.com/StanSign/StanSign.github.io/blob/main/_posts/Assemble/220130_08/cap02.png?raw=true\" alt=\"IAM\" width=\"550\">\n\n<p>IAM 서비스의 사용자 탭에서 사용자가 없다면 새로운 사용자를 추가하거나, 있다면 수정하여 얻을 수 있습니다.</p>\n<img src=\"https://github.com/StanSign/StanSign.github.io/blob/main/_posts/Assemble/220130_08/cap03.png?raw=true\" alt=\"add auth\" width=\"550\">\n<img src=\"https://github.com/StanSign/StanSign.github.io/blob/main/_posts/Assemble/220130_08/cap04.png?raw=true\" alt=\"add auth2\" width=\"550\">\n\n<p>권한 탭의 권한 추가에서 <strong>기존 정책 직접 연결</strong>을 선택해주고, 정책 필터에 “<strong>lambda</strong>“를 검색해줍니다. 그럼 아래에 <strong>AWSLambda_FullAccess</strong>라는 항목이 나올텐데, 위 캡처에는 이미 적용된 권한이라 표시되지 않았습니다. 이름 그대로 Lambda에 대한 모든 권한을 부여해주는 권한입니다. </p>\n<img src=\"https://github.com/StanSign/StanSign.github.io/blob/main/_posts/Assemble/220130_08/cap05.png?raw=true\" alt=\"key\" width=\"550\">\n\n<p>보안 자격 증명 탭에서 액세스 키를 조회하거나 생성할 수 있습니다. 액세스 키 만들기 버튼을 통해 새로운 키를 만들 수 있는데, 이때 주의할 점은 시크릿 키는 이때 말고는 조회할 수 있는 방법이 없으므로 .csv파일로 저장해서 잘 보관해두거나, 따로 다른 곳에 적어두어 보관해둡시다. </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">response &#x3D; lambda_client.invoke(\n    FunctionName&#x3D;&#39;updateActors&#39;, \n    InvocationType&#x3D;&#39;Event&#39;, \n    Payload&#x3D;json.dumps(&quot;&quot;)\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>invoke 함수로 다른 Lambda 함수를 실행할 수 있습니다.<br><strong>FunctionName</strong></p>\n<ul>\n<li><strong>함수 이름</strong>: updateActors(이름만), updateActors:v1(별칭포함)</li>\n<li><strong>함수 ARN</strong>: arn:aws:lambda:us-west-2:123456789012:function:my-function</li>\n<li><strong>부분적 ARN</strong>: 123456789012:function:my-function</li>\n</ul>\n<p><strong>InvocationType</strong></p>\n<ul>\n<li><strong>RequestResponse</strong>(default): 동기적 함수 호출</li>\n<li><strong>Event</strong>: 비동기적 함수 호출</li>\n<li><strong>DryRun</strong>: 파라미터 유효성 검사, 권한 확인</li>\n</ul>\n<p><strong>Payload</strong>: 입력으로 들어가는 값들을 지정 (json 형식)</p>\n","text":"DB의 데이터를 자동으로 채우고 api로 불러오는 작업을 계속 진행하던 중에 Lambda 함수에서 다른 Lambda 함수를 불러오면 간단하게 끝낼 수 있는 작업을 마주치게 되었습니다. 방법을 찾아보니 AWS에서 Invoke 함수를 제공하고 있었습니다....","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Assemble","slug":"Assemble","count":9,"path":"api/categories/Assemble.json"}],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"Assemble","slug":"Assemble","count":9,"path":"api/tags/Assemble.json"},{"name":"AWS","slug":"AWS","count":5,"path":"api/tags/AWS.json"}],"toc":"","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"9)📱iOS앱개발 - CaseIterable 이해하기","uid":"aeca58d27d9a585d8ce5c912856b6811","slug":"Assemble/220214_09/2022-02-14-assemble09","date":"2022-02-13T15:00:00.000Z","updated":"2023-03-31T10:39:00.196Z","comments":true,"path":"api/articles/Assemble/220214_09/2022-02-14-assemble09.json","keywords":null,"cover":[],"text":"Pageboy 라이브러리의 예제를 보던 도중 CaseIterable 프로토콜을 사용하는 예제가 있는데 이게 뭔지를 몰라서 공부를 해보았습니다. CaseIterable 프로토콜은 모든 case들에 대해 컬렉션을 만들어 제공해주는 타입입니다. 쉽게 말해서...","link":"","photos":[],"count_time":{"symbolsCount":753,"symbolsTime":"1 mins."},"categories":[{"name":"Assemble","slug":"Assemble","count":9,"path":"api/categories/Assemble.json"}],"tags":[{"name":"Swift","slug":"Swift","count":74,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":74,"path":"api/tags/iOS.json"},{"name":"Assemble","slug":"Assemble","count":9,"path":"api/tags/Assemble.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"7)📱iOS앱개발 - API Gateway로 DB에 정보 입력/수정하기","uid":"63d243280a5706ad4c80cf0178f771fe","slug":"Assemble/220125_07/2022-01-25-assemble07","date":"2022-01-24T15:00:00.000Z","updated":"2023-03-31T10:38:30.780Z","comments":true,"path":"api/articles/Assemble/220125_07/2022-01-25-assemble07.json","keywords":null,"cover":[],"text":"DB 틀이 어느정도 맞춰졌으니 실제로 데이터를 넣어보려고 합니다. 이전에 만들어두었던 Lambda 함수와 API Gateway를 사용하면 RESTful하게 데이터를 입력해줄 수 있습니다. API Gateway 위와 같이 리소스를 생성해주고 PUT 메서...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Assemble","slug":"Assemble","count":9,"path":"api/categories/Assemble.json"}],"tags":[{"name":"Assemble","slug":"Assemble","count":9,"path":"api/tags/Assemble.json"},{"name":"AWS","slug":"AWS","count":5,"path":"api/tags/AWS.json"},{"name":"mySQL","slug":"mySQL","count":4,"path":"api/tags/mySQL.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fab fa-instagram","link":"https://www.instagram.com/nomatter_jun/"}}}}}}