{"title":"9)📱iOS앱개발 - CaseIterable 이해하기","uid":"aeca58d27d9a585d8ce5c912856b6811","slug":"Assemble/220214_09/2022-02-14-assemble09","date":"2022-02-13T15:00:00.000Z","updated":"2023-03-31T10:39:00.196Z","comments":true,"path":"api/articles/Assemble/220214_09/2022-02-14-assemble09.json","keywords":null,"cover":[],"content":"<p>Pageboy 라이브러리의 예제를 보던 도중 <strong>CaseIterable</strong> 프로토콜을 사용하는 예제가 있는데 이게 뭔지를 몰라서 공부를 해보았습니다.</p>\n<img src=\"https://github.com/StanSign/StanSign.github.io/blob/main/_posts/Assemble/220214_09/cap01.png?raw=true\" alt=\"Iterable\" width=\"550\">\n\n<p>CaseIterable 프로토콜은 모든 case들에 대해 컬렉션을 만들어 제공해주는 타입입니다. 쉽게 말해서 enum 열거형의 각 case에 배열처럼 접근할 수 있다는 말입니다. 또 더 쉽게 말하면, enum 열거형 타입에 forEach와 같은 루프등을 쓸 수 있게 됩니다.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">enum Tab: String, CaseIterable &#123;\n    case detail\n    case front\n    case board\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>위 예제를 보면 Tab이라는 enum 열거형 변수가 있습니다. 우선 String 타입을 갖는 enum이기 때문에 각 case의 이름과 동일한 Raw Value가 각각 지정됩니다. </p>\n<img src=\"https://github.com/StanSign/StanSign.github.io/blob/main/_posts/Assemble/220214_09/cap02.png?raw=true\" alt=\"allCases\" width=\"400\">\n\n<p>그리고 오늘 다루는 CaseIterable 프로토콜 또한 채택되어 있습니다. 덕분에 우리는 Tab이라는 값에 <strong>“allCases”</strong> 프로퍼티를 사용해 <strong>배열처럼 접근</strong>할 수 있습니다. 나아가서는 배열이기에 <strong>고차함수</strong>(map, reduce, filter, …) 또한 사용할 수 있습니다. </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">private let tabItems &#x3D; Tab.allCases.map(&#123; BarItem(for: $0) &#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>위 예제를 보면 Tab이라는 enum 타입에 map을 사용하여 BarItem 클래스의 규칙에 따라 변환된 각 case들을 tabItems에 저장하였습니다. </p>\n","text":"Pageboy 라이브러리의 예제를 보던 도중 CaseIterable 프로토콜을 사용하는 예제가 있는데 이게 뭔지를 몰라서 공부를 해보았습니다. CaseIterable 프로토콜은 모든 case들에 대해 컬렉션을 만들어 제공해주는 타입입니다. 쉽게 말해서...","link":"","photos":[],"count_time":{"symbolsCount":753,"symbolsTime":"1 mins."},"categories":[{"name":"Assemble","slug":"Assemble","count":9,"path":"api/categories/Assemble.json"}],"tags":[{"name":"Swift","slug":"Swift","count":82,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":82,"path":"api/tags/iOS.json"},{"name":"Assemble","slug":"Assemble","count":9,"path":"api/tags/Assemble.json"}],"toc":"","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"1)🍎Swift - 클로저(Closure).01","uid":"95363f08e13410733c358df6bc3d7681","slug":"Swift/2022-03-01-Swift01","date":"2022-02-28T15:00:00.000Z","updated":"2023-03-31T10:40:34.717Z","comments":true,"path":"api/articles/Swift/2022-03-01-Swift01.json","keywords":null,"cover":null,"text":"혼자 공부하다 도저히 안되겠어서 정리해보는 태그를 하나 만들었습니다!첫 게시물의 주제는 느낌적으로 써왔지만 제대로 공부해본 적은 없는 클로저입니다. 클로저란?지금까지 클로저하면 그냥 “그룹으로 실행되는 코드 덩어리” 정도로 생각하고 사용해왔습니다.그런...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Swift","slug":"Swift","count":31,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":82,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":82,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"8)📱iOS앱개발 - Lambda 함수에서 다른 Lambda 함수 실행하기","uid":"a41d20cacf7715bb74660a95ac0d6e15","slug":"Assemble/220130_08/2022-01-30-assemble08","date":"2022-01-29T15:00:00.000Z","updated":"2023-03-31T10:38:42.995Z","comments":true,"path":"api/articles/Assemble/220130_08/2022-01-30-assemble08.json","keywords":null,"cover":[],"text":"DB의 데이터를 자동으로 채우고 api로 불러오는 작업을 계속 진행하던 중에 Lambda 함수에서 다른 Lambda 함수를 불러오면 간단하게 끝낼 수 있는 작업을 마주치게 되었습니다. 방법을 찾아보니 AWS에서 Invoke 함수를 제공하고 있었습니다....","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Assemble","slug":"Assemble","count":9,"path":"api/categories/Assemble.json"}],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"AWS","slug":"AWS","count":5,"path":"api/tags/AWS.json"},{"name":"Assemble","slug":"Assemble","count":9,"path":"api/tags/Assemble.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}