{"title":"4)📘 Python - Context Manager","uid":"880e35cd89b3cfce92587e2ccc115063","slug":"Python/2022-07-16-Python04","date":"2022-07-15T15:00:00.000Z","updated":"2023-03-31T10:40:14.501Z","comments":true,"path":"api/articles/Python/2022-07-16-Python04.json","keywords":null,"cover":null,"content":"<h1 id=\"contextManager\"><a href=\"#contextManager\" class=\"headerlink\" title=\"contextManager\"></a>contextManager</h1><p>Context Manager는 많은 코드 시간과 리소스 중에 정확히 원하는 시간과 리소스를 사용할 수 있도록 도와주는 기능입니다. 우리가 무심결에도 사용하던 <code>with</code>문 또한 Context Manager 중의 하나입니다. 이 <code>with</code>문은 보통 파일 하나를 열어 수정할 때 자주 사용됩니다.</p>\n<script src=\"https://gist.github.com/StanSign/16199d4ad0828d798c8266dbfd3e0ad6.js?file=open.py\"></script>\n\n<script src=\"https://gist.github.com/StanSign/16199d4ad0828d798c8266dbfd3e0ad6.js?file=with.py\"></script>\n\n<p>위 두가지 코드는 같은 역할을 수행합니다. 아래의 <code>with</code>문을 사용한 경우가 훨씬 가독성에도 좋고 사용하기도 편해보입니다. 이런 장점들 덕분에 Context Manager는 여러 프로그래머들이 애용하는 기능이 되었습니다.</p>\n<h1 id=\"contextlib\"><a href=\"#contextlib\" class=\"headerlink\" title=\"contextlib\"></a>contextlib</h1><p><code>with</code>문은 이미 굉장히 편리하고 유용하지만, contextlib 모듈을 통해 직접 Context Manager를 만들 수도 있습니다. <code>.__enter__()</code>와 <code>.__exit__()</code>를 사용해서 구현하는 방법과 <code>contextlib.contextManager()</code> 데코레이터를 사용하는 방법이 있습니다. 하나씩 살펴보도록 하겠습니다.</p>\n<h2 id=\"enter-exit\"><a href=\"#enter-exit\" class=\"headerlink\" title=\"__enter__() + __exit__()\"></a><code>__enter__()</code> + <code>__exit__()</code></h2><script src=\"https://gist.github.com/StanSign/16199d4ad0828d798c8266dbfd3e0ad6.js?file=enter_exit.py\"></script>\n\n<p><code>File</code> 클래스는 <code>__enter__</code> 메서드를 호출하여 <code>f_name</code>과 <code>method</code>를 받아와 <code>__init__()</code> 메서드를 통해 파일을 열고 반환합니다. 이렇게 열린 파일은 <code>self.f</code>로서 접근 가능하고 블록 안에서는 <code>with as</code>문을 통해 <code>file</code>이라는 이름으로 명명하였기 떄문에 <code>file.write(&quot;abc&quot;)</code>와 같이 파일을 수정할 수 있습니다. 블록이 끝나면 <code>__exit__()</code>문이 호출되고 파일을 닫습니다.</p>\n<p>이떄 <code>__exit__()</code>  메서드의 <code>type, value, traceback</code> 변수는 사용되지 않은 것을 볼 수 있는데요, 이 세 변수는 예외처리가 발생할 경우에 사용됩니다. <code>__exit__()</code> 메서드가 <code>True</code>를 반환한다면 예외 처리가 적용된 것을 의미하고, 아니라면 처리되지 않은 것으로 여겨 <code>with</code>문의 부분에서 에러가 발생하게 됩니다. </p>\n<h2 id=\"contextmanager-데코레이터\"><a href=\"#contextmanager-데코레이터\" class=\"headerlink\" title=\"@contextmanager 데코레이터\"></a>@contextmanager 데코레이터</h2><p><code>@contextmanager</code> 데코레이터를 사용하여 Context Manager를 만들 수도 있습니다. <code>contextlib</code> 모듈은 이때 사용되게 됩니다. 위 <code>__enter__()</code> + <code>__exit__()</code>의 방법보다 더욱 간단하게 작성할 수 있습니다.</p>\n<script src=\"https://gist.github.com/StanSign/16199d4ad0828d798c8266dbfd3e0ad6.js?file=contextmanager.py\"></script>\n\n<p><code>open_file()</code> 메서드의 위에 데코레이터의 형식으로 <code>@contextlib.contextmanager</code>가 작성되어 있는 것을 볼 수 있습니다. 그런데 처음 보는 문법들이 보입니다. 저는 <code>yield</code>문이 생소했는데요, 이를 이해하기 위해서는 <code>yield</code>문 뿐만 아니라  <code>Generator</code> 또한 이해해야 합니다.</p>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p><code>yield</code>는 흔히 사용되는 <code>return</code>과 유사한 기능을 하는 키워드입니다. 한가지 예시를 보겠습니다.</p>\n<script src=\"https://gist.github.com/StanSign/16199d4ad0828d798c8266dbfd3e0ad6.js?file=return.py\"></script>\n\n<p><code>return</code>의 경우 모든 결과값을 얻어내기 전까지는 결과값을 받아낼 수 없습니다. 따라서 이 예시는 실행에 최소 16초가 걸리게 됩니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ABCDEFGHIJKLMNOP</p></blockquote>\n<p>이번에는 비슷한 동작을 하는 <code>yield</code>의 경우를 보겠습니다.</p>\n<script src=\"https://gist.github.com/StanSign/16199d4ad0828d798c8266dbfd3e0ad6.js?file=yield.py\"></script>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A</p>\n<p>B</p>\n<p>C</p>\n<p>…</p>\n<p>P</p></blockquote>\n<p>사용법이 <code>return</code>과는 조금 다른 것을 볼 수 있습니다. <code>yield</code>는 일반적인 형태의 변수를 반환하는 것이 아닌, <code>generator</code> 타입의 객체를 반환합니다. <code>generator</code> 객체는 어떤 시점에 필요한 데이터를 즉석에서 만들어내어 반환하는 객체입니다.</p>\n<p><code>generator</code>의 장점은 여기에 있습니다. 수행 시간이 오래 걸리는 작업에서 모든 결과값이 나오지 않고 일부분만 나오더라도 해당 결과값으로 다른 작업을 수행할 수 있다는 점이 매우 매력적입니다.</p>\n<p>그러면 다시 Context Manager로 돌아갑시다. 위의 예시를 다시 한번 가지고 오겠습니다.</p>\n<script src=\"https://gist.github.com/StanSign/16199d4ad0828d798c8266dbfd3e0ad6.js?file=contextmanager.py\"></script>\n\n<p>우리는 이제  <code>yield </code>가 어떤 역할을 하는지, 어떤 형태로 데이터를 생성하는 알고 있습니다. <code>yield</code>의 앞 부분은 <code>__enter__()</code>, <code>yield</code>의 뒷부분은 <code>__exit__()</code>부분이라고 생각해도 무방할 것 같습니다.</p>\n<script src=\"https://gist.github.com/StanSign/16199d4ad0828d798c8266dbfd3e0ad6.js?file=with_yield.py\"></script>\n\n<p>사용할때는 위와 같은 순서대로 수행됩니다. <code>yield</code>의 앞부분은 <code>with</code>문에 진입할 때, <code>yield</code>의 뒷부분은 <code>with</code>문이 끝나고 종료될 때 실행됩니다. </p>\n","text":"contextManagerContext Manager는 많은 코드 시간과 리소스 중에 정확히 원하는 시간과 리소스를 사용할 수 있도록 도와주는 기능입니다. 우리가 무심결에도 사용하던 with문 또한 Context Manager 중의 하나입니다. 이 w...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":4,"path":"api/categories/python.json"}],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"Context Manager","slug":"Context-Manager","count":1,"path":"api/tags/Context-Manager.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#contextManager\"><span class=\"toc-text\">contextManager</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#contextlib\"><span class=\"toc-text\">contextlib</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#enter-exit\"><span class=\"toc-text\">__enter__() + __exit__()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#contextmanager-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\"><span class=\"toc-text\">@contextmanager 데코레이터</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#yield\"><span class=\"toc-text\">yield</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"9)🍎Swift - ARC(strong, weak, unowned)","uid":"feb104f2e415f3c30b5b2264f2206c66","slug":"Swift/2022-09-09-Swift09","date":"2022-09-08T15:00:00.000Z","updated":"2023-03-31T10:42:00.054Z","comments":true,"path":"api/articles/Swift/2022-09-09-Swift09.json","keywords":null,"cover":[],"text":"Swift 문서에는 오랜만이네요. 최근 파이썬만 다루다보니 Swift 쪽 밀린 공부가 산더미에요. 오늘은 ARC에 대해 알아볼겁니다. 이야기는 계속 들어왔고 참고하는 코드들에서도 매우 자주 보였는데 이번에 제대로 알아보고 가봐야겠습니다. ARC (Au...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"3)📘 Python - Covariance & Contravariance","uid":"c4627b4e684e76e57427d504523ee0e8","slug":"Python/2022-05-06-Python03","date":"2022-05-05T15:00:00.000Z","updated":"2023-03-31T10:40:01.620Z","comments":true,"path":"api/articles/Python/2022-05-06-Python03.json","keywords":null,"cover":null,"text":"Covariance &amp; Contravariance파이썬의 경우를 살펴보기 전에, Covariance와 Contravariance가 무엇인지 알아보기 위해 정적 프로그래밍 언어의 경우를 살펴보겠습니다. 예를 들어, 상위타입 Animal과 서브타입...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":4,"path":"api/categories/python.json"}],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}