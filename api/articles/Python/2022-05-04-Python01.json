{"title":"1)📘 Python - asyncio","uid":"a531efef964a2f4190bd13943c878d7b","slug":"Python/2022-05-04-Python01","date":"2022-05-03T15:00:00.000Z","updated":"2023-03-31T10:39:43.812Z","comments":true,"path":"api/articles/Python/2022-05-04-Python01.json","keywords":null,"cover":null,"content":"<h1 id=\"asyncio\"><a href=\"#asyncio\" class=\"headerlink\" title=\"asyncio\"></a>asyncio</h1><h2 id=\"asyncio란\"><a href=\"#asyncio란\" class=\"headerlink\" title=\"asyncio란?\"></a>asyncio란?</h2><p>asyncio는 파이썬에서 사용할 수 있는 비동기 프로그래밍 모듈입니다. async&#x2F;await 함수를 통해 동시적으로 여러 작업들을 수행시킬 수 있습니다. 코루틴을 사용하여 작동하며, 이벤트 루프를 생성하고 관리함으로서 네트워크 작업, 서브-프로세스, OS 신호 핸들링 등을 할 수 있습니다.</p>\n<h2 id=\"이벤트-루프\"><a href=\"#이벤트-루프\" class=\"headerlink\" title=\"이벤트 루프\"></a>이벤트 루프</h2><p>asyncio를 사용한 프로그램은 이벤트 루프가 처음이자 곧 끝이라고 할 수 있습니다. 이벤트 루프는 비동기성 작업들을 수행하고, 작업이 끝나면 응답을 받아 처리합니다. </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">asyncio<span class=\"token punctuation\">.</span>get_running_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \t\t<span class=\"token comment\"># 현재 스레드에서 실행중인 이벤트 루프를 반환</span>\nasyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t \t\t<span class=\"token comment\"># 현재 이벤트 루프를 반환합니다.</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\"># 현재 이벤트 루프가 설정되지 않았다면, 새로 만듭니다.</span>\nasyncio<span class=\"token punctuation\">.</span>set_event_loop<span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># loop를 현재 이벤트 루프로 설정합니다.</span>\nasyncio<span class=\"token punctuation\">.</span>new_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\"># 새로운 이벤트 루프를 만듭니다.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"코루틴\"><a href=\"#코루틴\" class=\"headerlink\" title=\"코루틴\"></a>코루틴</h2><p>코루틴은 스레드와 비슷하게 동시성 프로그래밍이 가능할 수 있도록 고안된 개념입니다. 스레드가 많이 쓰이며 코루틴은 관심을 잃었었지만, 스레드의 데드락과 같은 문제점들 때문에 다시 주목받기 시작했습니다. 코루틴은 스레드를 사용하지 않으며, 메인 스레드에서 여러 작업들을 번갈아가며 수행합니다. </p>\n<p>이렇게만 설명하면 동기성 프로그래밍과 같은 개념인 것 같지만, 코루틴을 사용하면 함수의 실행을 탈출 지점이 아니여도 중간에 중단하고 다른 함수로 넘어갈 수 있습니다. 다른 작업을 마치고 나면, 다시 해당 함수의 멈춘 부분으로 돌아가 남은 작업을 마저 할 수도 있습니다. </p>\n<p>파이썬에서 asyncio가 특히 유용한 이유가 있는데, 파이썬 특유의 GIL(Global Interpreter Lock)으로 인해 한 번에 하나의 스레드만 파이썬 코드를 실행할 수 있기 때문입니다. 동시에 여러 스레드를 실행시킬 수 없다는 것인데(스레드를 사용할 수는 있습니다), 이러면 스레드를 사용할 경우 context switching으로 인해 하나의 메인 스레드만 사용하는 것 보다 오히려 속도가 느려질 수 있습니다.</p>\n<h2 id=\"async-func\"><a href=\"#async-func\" class=\"headerlink\" title=\"async func\"></a>async func</h2><p>이벤트 루프를 가져오거나 만들었다면, <code>run_until_complete()</code>등의 함수로 태스크를 이벤트 루프에 등록할 수 있습니다. 코루틴을 만들기 위해서 async func를 사용하여 함수를 정의할 수 있습니다.</p>\n<p><code>run_until_complete()</code> 함수는 코루틴이 이벤트 루프에서 실행될 수 있도록 등록하고, 해당 코루틴이 종료될 때 까지 기다립니다. </p>\n<script src=\"https://gist.github.com/StanSign/3cd61a0a81e7bd414ffb1d3941e2e786.js?file=asyncio.py\"></script>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Hello World!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h2><p><code>await</code>은 코루틴 안에서 다른 코루틴을 실행하고, 해당 코루틴이 끝나는 것을 기다립니다. 코루틴 객체 외에도 Future 객체, Task 객체에도 사용할 수 있습니다.</p>\n<script src=\"https://gist.github.com/StanSign/3cd61a0a81e7bd414ffb1d3941e2e786.js?file=asyncio_await.py\"></script>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">add: 1 + 2\nprint_add: 1 + 2 &#x3D; 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"create-task\"><a href=\"#create-task\" class=\"headerlink\" title=\"create_task\"></a>create_task</h2><p>위와 같이 코루틴을 실행한다면, 단일의 코루틴만 실행하기 때문에 동기성 프로그래밍과 큰 차이가 없습니다. 동시에 여러 코루틴을 실행하기 위해서는 <code>create_task()</code> 함수로 이벤트 루프에 등록해주어야 합니다.</p>\n<script src=\"https://gist.github.com/StanSign/3cd61a0a81e7bd414ffb1d3941e2e786.js?file=asyncio_create_task.py\"></script>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Task 1\nTask 2\nTask 2 Done\nTask 1 Done\nAll Done<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"gather\"><a href=\"#gather\" class=\"headerlink\" title=\"gather\"></a>gather</h2><p>등록해야 할 코루틴이 많을 경우 <code>create_task()</code>는 하나하나 등록해주어야 하기 때문에 번거롭습니다. 그럴떄는 <code>gather()</code>를 사용하여 한번에 등록할 수 있습니다. 또한 마지막 인자로 <code>return_exception</code> 값을 Bool 타입으로 줄 수 있는데, 기본값은 False로서 에러가 발생하면 즉시 모든 코루틴을 종료합니다. True로 설정시에는 아래처럼 에러가 난 코루틴 객체만 에러 정보를 포함하여 반환됩니다.</p>\n<script src=\"https://gist.github.com/StanSign/3cd61a0a81e7bd414ffb1d3941e2e786.js?file=asyncio_gather.py\"></script>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Task A: factorial(2)\nTask B: factorial(2)\nTask C: factorial(2)\nTask A: factorial(2) &#x3D; 2\nTask B: factorial(3)\nTask C: factorial(3)\nTask B: factorial(3) &#x3D; 6\nTask C: factorial(4)\nTask C: factorial(4) &#x3D; 24\n[2, 6, 24]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Task A: factorial(2)\nTask B: factorial(2)\nTask A: factorial(2) &#x3D; 2\nTask B: factorial(3)\nTask B: factorial(3) &#x3D; 6\n[2, 6, ValueError(&#39;Number should not be equal to 4&#39;)]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"wait-for\"><a href=\"#wait-for\" class=\"headerlink\" title=\"wait_for\"></a>wait_for</h2><p>timeout도 설정이 가능합니다. <code>wait_for()</code> 함수를 사용해서요!</p>\n<script src=\"https://gist.github.com/StanSign/3cd61a0a81e7bd414ffb1d3941e2e786.js?file=asyncio_wait_for.py\"></script>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Time Out!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"Future-Task\"><a href=\"#Future-Task\" class=\"headerlink\" title=\"Future, Task\"></a>Future, Task</h2><p>asyncio에는 코루틴 외에도 비동기성으로 처리할 수 있는 객체들이 더 있습니다. </p>\n<h3 id=\"Coroutine\"><a href=\"#Coroutine\" class=\"headerlink\" title=\"Coroutine\"></a>Coroutine</h3><p>코루틴은 코루틴 함수에 의해 생성되는 객체를 말합니다. 위의 설명과 같이 <code>async def</code>를 사용하여 작성되고, <code>await</code>를 통해 return값을 받아올 수 있습니다.</p>\n<p>코루틴은 코루틴에서만 실행이 가능해서 코루틴을 최소 한 번은 실행해주어야 합니다. <code>asyncio.run(async_func())</code>와 같이 사용할 수 있습니다.</p>\n<h3 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h3><p>위와 같이 <code>asyncio.create_task()</code>를 통해 코루틴을 Task로 만들 수 있고, 이벤트 루프에 스케줄링하여 실행 가능한 시점에 시작되도록 만들 수 있습니다. </p>\n<h3 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h3><p>Future는 코루틴 내부의 코드가 아닌 코루틴을 호출한 논블럭 함수의 결과값입니다. 만약 비동기 작업이 결과값을 요구했을 때 완료되었다면 바로 결과를 얻을 수 있지만, 그렇지 않았다면 요청한 쪽의 흐름을 블럭할 수 있습니다. 함수의 처리 시점을 값이 필요한 시점으로 미룰 수 있는 효과가 있는 것이죠. </p>\n<ul>\n<li><code>result()</code>: 결과를 반환합니다.</li>\n<li><code>done()</code>: 작업이 완료되었는지 확인합니다.</li>\n<li><code>cancelled()</code>: 작업이 취소되었는지 확인합니다.</li>\n<li><code>add_done_callback()</code>: 작업이 완료 됐을 때 콜백을 추가합니다.</li>\n<li><code>remove_done_callback()</code>: 콜백을 제거합니다.</li>\n<li><code>cancel()</code>: 작업을 취소합니다.</li>\n<li><code>get_loop()</code>: 연결된 이벤트 루프를 반환합니다.</li>\n</ul>\n","text":"asyncioasyncio란?asyncio는 파이썬에서 사용할 수 있는 비동기 프로그래밍 모듈입니다. async&#x2F;await 함수를 통해 동시적으로 여러 작업들을 수행시킬 수 있습니다. 코루틴을 사용하여 작동하며, 이벤트 루프를 생성하고 관리함...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"python","slug":"python","count":4,"path":"api/categories/python.json"}],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"asyncio","slug":"asyncio","count":1,"path":"api/tags/asyncio.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#asyncio\"><span class=\"toc-text\">asyncio</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#asyncio%EB%9E%80\"><span class=\"toc-text\">asyncio란?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84\"><span class=\"toc-text\">이벤트 루프</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EC%BD%94%EB%A3%A8%ED%8B%B4\"><span class=\"toc-text\">코루틴</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#async-func\"><span class=\"toc-text\">async func</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#await\"><span class=\"toc-text\">await</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#create-task\"><span class=\"toc-text\">create_task</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gather\"><span class=\"toc-text\">gather</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wait-for\"><span class=\"toc-text\">wait_for</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Future-Task\"><span class=\"toc-text\">Future, Task</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Coroutine\"><span class=\"toc-text\">Coroutine</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Task\"><span class=\"toc-text\">Task</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Future\"><span class=\"toc-text\">Future</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"2)📘 Python - typing","uid":"e585a8a76173e8bfa9151f74e32ccb79","slug":"Python/2022-05-05-Python02","date":"2022-05-04T15:00:00.000Z","updated":"2023-03-31T10:39:54.901Z","comments":true,"path":"api/articles/Python/2022-05-05-Python02.json","keywords":null,"cover":null,"text":"TypingTyping 모듈은 파이썬에서 지원하는 타입 힌팅(Type Hinting) 모듈입니다. Type Checking도 아니고 Hinting이라니, 참 요상하죠..? 파이썬이 이런 모듈을 지원하는 것은 파이썬의 독특한 특징이 그 이유입니다. 왜 ...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"python","slug":"python","count":4,"path":"api/categories/python.json"}],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"typing","slug":"typing","count":1,"path":"api/tags/typing.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}},"next_post":{"title":"8)🍎Swift - Coordinator 패턴.02","uid":"c6e16700a7ef39990817280778f95b8a","slug":"Swift/2022-04-12-Swift08","date":"2022-04-11T15:00:00.000Z","updated":"2023-03-31T10:41:50.034Z","comments":true,"path":"api/articles/Swift/2022-04-12-Swift08.json","keywords":null,"cover":null,"text":"TabBar + Coordinator 패턴코디네이터 패턴을 조금 응용하면 TabBar에도 적용을 할 수가 있습니다. 오늘은 단순 적용이기 때문에 코드 위주로 쓱쓱 지나갈게요! 다른 기본적인 부분은 TabBar 구성과 동일합니다. 중요한 곳은 바로 여기...","link":"","photos":[],"count_time":{"symbolsCount":737,"symbolsTime":"1 mins."},"categories":[{"name":"Swift","slug":"Swift","count":29,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":77,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":77,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}