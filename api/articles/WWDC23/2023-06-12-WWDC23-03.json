{"title":"03)🎊 WWDC23 - SwiftData","uid":"358b9ce668b5d19c091a8d1511c207a6","slug":"WWDC23/2023-06-12-WWDC23-03","date":"2023-06-11T15:00:00.000Z","updated":"2023-06-12T03:37:10.117Z","comments":true,"path":"api/articles/WWDC23/2023-06-12-WWDC23-03.json","keywords":null,"cover":"https://i.imgur.com/7ZMZmZ5.jpg","content":"<h1 id=\"WWDC23-SwiftData\"><a href=\"#WWDC23-SwiftData\" class=\"headerlink\" title=\"WWDC23 - SwiftData\"></a>WWDC23 - SwiftData</h1><p>오늘은 SwiftData를 알아볼거에요<br>Widget에다 써먹어야되거든요 😄</p>\n<p>저는 일단 CoreData를 써본 적이 없습니다.<br>아마 조만간 쓸 것 같기는 한데.. 일단은 없어요..<br>왜 안썼냐면요.. 슬쩍 봐도 파일이 너무 여기저기 분산되게 되는 것 같더라구요..<br>전용의 파일 형식도 있고 말이죠…?<br>그래서 대신 Realm을 자주 썼었습니다.</p>\n<p>그런데.. SwiftData가 새로 나왔어요!<br>iOS 17부터 지원해서 실무에서는 4~5년 뒤에나 쓰게 될 것 같지만 나온게 어딘가요 😂<br>일단 Schema를 정의해주는 과정부터 너무 간단합니다.</p>\n<p>출발해보죠!</p>\n<h2 id=\"Using-the-Model-Macro\"><a href=\"#Using-the-Model-Macro\" class=\"headerlink\" title=\"Using the Model Macro\"></a>Using the Model Macro</h2><p>SwiftData의 <strong>Schema</strong> 는 일반 클래스에 <strong><code>@Model</code> 매크로</strong> 를 붙여주는 것으로 끝입니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftData</span>\n\n<span class=\"token attribute atrule\">@Model</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Trip</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n  <span class=\"token keyword\">var</span> destination<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n  <span class=\"token keyword\">var</span> endDate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span>\n  <span class=\"token keyword\">var</span> startDate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span>\n\n  <span class=\"token keyword\">var</span> bucketList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">BucketListItem</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">var</span> livingAccommodation<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LivingAccommodation</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>너무 쉽고 간단하죠..?</p>\n<p><code>@Model</code> 매크로는 클래스 내부의 <strong>Stored Property</strong> 들을 <strong>Persisted Property</strong> 로 바꿔줍니다.</p>\n<p>사용할 수 있는 타입들은 이렇습니다.</p>\n<ul>\n<li>기본적인 Value Types (<code>Int</code>, <code>String</code>, …)</li>\n<li><code>struct</code></li>\n<li><code>enum</code></li>\n<li><code>Codable</code></li>\n<li><code>[ANY VALUE TYPE]</code></li>\n</ul>\n<p>다른 <code>@Model</code> 클래스를 참조하는 것으로 관계 구조를 형성할 수도 있습니다.</p>\n<ul>\n<li><code>[BucketListItem]?</code> 와 같은..</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SwiftData 클래스와 실제 사용되는 클래스는 동일한가요?</p></blockquote>\n<p>개인적으로 가장 궁금한 점이였습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">Storable</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">associatedtype</span> <span class=\"token class-name\">RealmObject</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">RealmSwift</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Object</span>\n  <span class=\"token keyword\">associatedtype</span> <span class=\"token class-name\">PropertyValue</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">PropertyValueType</span>\n\n  <span class=\"token comment\">/// 데이터 모델의 식별자로 사용되는 프로퍼티</span>\n  <span class=\"token keyword\">var</span> identifier<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>realmObject<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RealmObject</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">realmObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">RealmObject</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Realm을 사용하다보니 DB에서 사용하는 Data 구조체와 실제로 사용되는 도메인 형태의 구조체는 다른 구조체를 사용하곤 했거든요..<br>(보통 멀티 쓰레딩의 과정에서 문제들이 발생했습니다.)</p>\n<p>하지만 SwiftData는 저희가 원래 사용하던 코드와 별 차이가 없도록 애플이 노력했기 때문에 <strong>Model 클래스를 직접적으로 UI 레이어 등에서 사용할 수 있다</strong> 고 합니다.</p>\n<hr>\n<p><strong><code>@Attribute</code></strong> 와 <strong><code>@Relationship</code></strong> 으로 프로퍼티에 추가적인 제어를 할 수 있습니다.</p>\n<h3 id=\"Attribute\"><a href=\"#Attribute\" class=\"headerlink\" title=\"@Attribute\"></a>@Attribute</h3><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@Attribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong><code>@Attribute(.unique)</code></strong> 로 PK를 설정해줄 수 있습니다. PK로 설정된 프로퍼티와 같은 값을 가진 모델이 Create에 대응되는 <code>insert()</code>로 인해 추가될 때 Update에 대응되는 <code>upsert()</code>로 전환되는 효과를 가집니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@Attribute</span><span class=\"token punctuation\">(</span>originalName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"start_date\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> startDate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong><code>@Attribute(originalName)</code></strong> 으로는 Migration이 가능합니다. 프로퍼티의 이름은 바꾸고 싶지만 데이터는 그대로 남겨두고 싶을 때 사용할 수 있습니다.</p>\n<p>그 외에도</p>\n<ul>\n<li>외부 대용량 데이터 사용</li>\n<li><code>Transformable</code></li>\n<li>Spotlight</li>\n<li>Hash 수정<br>등의 작업이 가능하다고 하네요.</li>\n</ul>\n<h3 id=\"Relationship\"><a href=\"#Relationship\" class=\"headerlink\" title=\"@Relationship\"></a>@Relationship</h3><p>각 모델간 Relationship이 설정되어 있을 때, 삭제 정책의 기본값은 <strong>Nullify</strong> 입니다.</p>\n<p>예시로 살펴보면 <code>Trip</code>이 삭제됐을때, <code>BucketListItem</code>과 <code>LivingAccommodation</code>의 Inverse Relationship으로 등록되어 있던 <code>trip</code>이라는 프로퍼티가 NULL이 되는 것이죠.</p>\n<p>하지만 <code>.cascade</code> 정책으로 Nullify 대신 <strong>함께 삭제</strong> 되도록 할 수도 있습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@Relationship</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>cascade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> bucketList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">BucketListItem</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>originalName</code></li>\n<li>toMany Relationship일 때의 개수 제한</li>\n<li>Hash 수정</li>\n</ul>\n<h3 id=\"Transient\"><a href=\"#Transient\" class=\"headerlink\" title=\"@Transient\"></a>@Transient</h3><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@Transient</span> <span class=\"token keyword\">var</span> tripViews<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong><code>@Transient</code></strong> 매크로를 사용하면 해당 프로퍼티가 SwiftData로 쓰이는 것을 막을 수도 있습니다.</p>\n<p>대신 해당 프로퍼티는 <strong>기본값</strong> 을 꼭 가져야만 합니다.</p>\n<h2 id=\"Evolving-Schemas\"><a href=\"#Evolving-Schemas\" class=\"headerlink\" title=\"Evolving Schemas\"></a>Evolving Schemas</h2><p>앱을 개발하거나 상용화를 한 이후에도 DB의 구조는 언제든지 바뀔 수 있습니다.</p>\n<p>때문에 Migration은 필수적인 요건이죠.</p>\n<p>SwiftData도 <code>VersionedSchema</code>와 <code>SchemaMigrationPlan</code>을 통해 이를 지원합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">SampleTripSchemaV1</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">VersionedSchema</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> models<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>any <span class=\"token class-name\">PersistentModel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Trip</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BucketListItem</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LivingAccommodation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token attribute atrule\">@Model</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trip</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> destination<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> start_date<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span>\n    <span class=\"token keyword\">var</span> end_date<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span>\n\n    <span class=\"token keyword\">var</span> bucketList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">BucketListItem</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> livingAccommodation<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LivingAccommodation</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">SampleTripSchemaV2</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">VersionedSchema</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> models<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>any <span class=\"token class-name\">PersistentModel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Trip</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BucketListItem</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LivingAccommodation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token attribute atrule\">@Model</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trip</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token attribute atrule\">@Attribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> destination<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token attribute atrule\">@Attribute</span><span class=\"token punctuation\">(</span>originalName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"srart_date\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> startDate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span>\n    <span class=\"token attribute atrule\">@Attribute</span><span class=\"token punctuation\">(</span>originalName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"end_date\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> endDate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Date</span>\n\n    <span class=\"token keyword\">var</span> bucketList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">BucketListItem</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> livingAccommodation<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LivingAccommodation</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>SchemaMigrationPlan</code>으로는 이렇게 바꾼 데이터들을 어떤 순서대로 변경할지 등의 세부적인 사항들을 정할 수 있습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">SampleTripsMigrationPlan</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">SchemaMigrationPlan</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> schemas<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>any <span class=\"token class-name\">VersionedSchema</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">SampleTripsSchemaV1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SampletripsSchemaV2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SampleTripSchemaV3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> stages<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">MigrationStage</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>migrateV1toV2<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> migrateV1toV2 <span class=\"token operator\">=</span> <span class=\"token class-name\">MigrationStage</span><span class=\"token punctuation\">.</span><span class=\"token function\">custom</span><span class=\"token punctuation\">(</span>\n    fromVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SampleTripSchemaV1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span>\n    toVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SampleTripSchema2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span>    <span class=\"token punctuation\">,</span>\n    willMigrate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span> context <span class=\"token keyword\">in</span>\n      <span class=\"token keyword\">let</span> trips <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FetchDescriptor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">SampleTripsSchemaV1</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Trip</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> didMigrate<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Working-with-your-Data\"><a href=\"#Working-with-your-Data\" class=\"headerlink\" title=\"Working with your Data\"></a>Working with your Data</h2><h3 id=\"Model-Container\"><a href=\"#Model-Container\" class=\"headerlink\" title=\"Model Container\"></a>Model Container</h3><p><strong>Schema</strong> 는 단순히 “어떤 형태로 저장되는 지에 대한 가이드라인” 정도의 역할이기 때문에 실제로 데이터를 저장하는 무언가도 있어야겠죠?</p>\n<p>그것이 바로 <strong>Model Container</strong> 입니다.</p>\n<p><img src=\"https://i.imgur.com/w4vklF0.png\"></p>\n<p>Model Container는 Schema를 사용하여 실제로 데이터베이스를 구축합니다.</p>\n<p>그리고 이렇게 인스턴스화 된 각 데이터들(Persistence)은 <strong>Model Context</strong> 를 통해서 접근이 가능하죠.</p>\n<p>그러니까 <strong>Model Container</strong> 는 <strong>Schema와 Persistence 사이의 연결목</strong> 역할을 하는겁니다.</p>\n<p>Model Container는 이런 작업들을 합니다.</p>\n<ul>\n<li>버전 관리</li>\n<li>Migration</li>\n<li>Graph 분리</li>\n</ul>\n<p>Container 인스턴스를 생성하는 것은 간단합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftData</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">ModelContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Trip</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                                         <span class=\"token class-name\">BucketListItem</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                                         <span class=\"token class-name\">LiveAccommodation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>그리고 더 복잡한 형태의 DB를 구축할 수 있도록 추가적인 <code>Configuration</code>도 제공합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftData</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">ModelContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Trip</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LivingAccommodation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                   configuration<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ModelConfiguration</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"path\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>         <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Model-Configuration\"><a href=\"#Model-Configuration\" class=\"headerlink\" title=\"Model Configuration\"></a>Model Configuration</h4><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> fullSchema <span class=\"token operator\">=</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Trip</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">BucketListItem</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">LivingAccommodations</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">Address</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> trips <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelConfiguration</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Trip</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                                               <span class=\"token class-name\">BucketListItem</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                                               <span class=\"token class-name\">LivingAccommodations</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                               url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"/path/to/trip.store\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                               cloudKitContainerIdentifier<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"com.example.trips\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> people <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelConfiguration</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                                                <span class=\"token class-name\">Address</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"/path/to/people.store\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                cloudKitContainerIdentifier<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"com.example.people\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">ModelContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> fullSchema<span class=\"token punctuation\">,</span> trips<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">)</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>ModelConfiguration</strong> 을 통해서는</p>\n<ul>\n<li>Schema의 Persistence를 설명하거나 (메모리 혹은 디스크)</li>\n<li>저장되는 위치를 지정하거나</li>\n<li>Read-Only 모드도 지원하고</li>\n<li>CloudKit을 사용하는 경우 identifier를 제공합니다.</li>\n</ul>\n<p>위 예시의 경우 <code>trips</code>와 <code>people</code>의 그래프를 저장되는 위치와 CloudKit의 identifier를 분리해서 다르게 설정해주고 있네요.</p>\n<p>이후, <strong>ModelContainer</strong> 를 생성할 떄 만들어둔 Schema와 Graph들을 하나로 묶어 생성하고 관리할 수 있습니다.</p>\n<h3 id=\"Model-Context\"><a href=\"#Model-Context\" class=\"headerlink\" title=\"Model Context\"></a>Model Context</h3><p><strong>Model Context</strong> 는 Model에 생기는 변화를 관찰하다가 트리거되는 행동들을 수행합니다.</p>\n<ol>\n<li>업데이트를 추적하고, 2. 데이터를 fetch하고, 3. 변경점을 저장하고, 4. 변경점을 취소하는 등의 작업이 가능합니다.</li>\n</ol>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftData</span>\n\n<span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>mainContext\n<span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelContext</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이것이 어떻게 가능하냐!? 하면, ModelContext는 일종의 <strong>Snapshot</strong> 처럼 작동합니다.</p>\n<p>변화가 일어날 때마다 Model의 Snapshot을 찍어 그 때의 상태를 저장해두는 것이죠.</p>\n<p>덕분에 삭제, 수정과 같은 변화가 이루어져도 <strong>어떤 인스턴스가 삭제됐고, 수정되었는지에 대한 정보</strong> 를 담고 있을 수 있습니다.</p>\n<p>그래서 주의할 점은 ModelContext의 변경점들은 <strong><code>context.save()</code></strong> 를 통해 저장하지 않으면 적용되지 않습니다.</p>\n<h4 id=\"Undo-with-ModelContext\"><a href=\"#Undo-with-ModelContext\" class=\"headerlink\" title=\"Undo with ModelContext\"></a>Undo with ModelContext</h4><p><strong>Model Container</strong> 에는 기본적으로 <code>undoManager</code>가 포함되어 있습니다.</p>\n<p>세 손가락으로 스와이프, 흔들어서 입력 취소 등 시스템이 기본적으로 제공하는 제스처들을 자동으로 지원한다는 그런 얘기입니다..</p>\n<h4 id=\"ModelContext-AutoSave\"><a href=\"#ModelContext-AutoSave\" class=\"headerlink\" title=\"ModelContext AutoSave\"></a>ModelContext AutoSave</h4><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">modelContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Trip</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> isAutosaveEnabled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Undo뿐만 아니라 자동 저장도 지원하고 있습니다.</p>\n<p>앱이 백그라운드 상태로 가거나 종료될 때, 혹은 앱이 사용됨에 따라 자동적으로 Context를 저장하는 기능입니다.</p>\n<p>Fetch한 값들은 기존에 있던 <code>SortDescriptor</code>와 새로운 <code>Predicate</code>, <code>FetchDescriptor</code>를 사용해 정렬하거나 필터할 수 있습니다.</p>\n<h4 id=\"Predicate\"><a href=\"#Predicate\" class=\"headerlink\" title=\"Predicate\"></a>Predicate</h4><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> tripPredicate <span class=\"token operator\">=</span> <span class=\"token other-directive property\">#Predicate</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Trip</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>destination <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"New York\"</span></span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> tripPredicate <span class=\"token operator\">=</span> <span class=\"token other-directive property\">#Predicate</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Trip</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>destination <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"New York\"</span></span> <span class=\"token operator\">&amp;&amp;</span>\n  <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"birthday\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>#Predicate</code> 매크로를 사용해 수행할 수 있으며 기존의 <code>filter</code>와 비슷한 역할을 수행합니다.</p>\n<p>기존의 <code>filter</code>는 <code>.filter &#123; &#125;.filter &#123; &#125;</code>와 같이 줄줄이 조건을 추가해줘야 했던 반면, <strong>하나의 클로저 내부에서 모든 조건들을 검사</strong> 할 수 있는 점이 특징입니다.</p>\n<h4 id=\"Fetch-Descriptor\"><a href=\"#Fetch-Descriptor\" class=\"headerlink\" title=\"Fetch Descriptor\"></a>Fetch Descriptor</h4><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> descriptor <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchDescriptor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Trip</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">:</span> tripPredicate<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> trips <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">)</span>          <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>FetchDescriptor</code>는 위에서 살펴본 <code>Predicate</code>를 <code>context</code>에 적용시켜주는 역할을 합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> descriptor <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchDescriptor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Trip</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  sortBy<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SortDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span><span class=\"token class-name\">Trip</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  predicate<span class=\"token punctuation\">:</span> tripPredicate\n<span class=\"token punctuation\">)</span>      \n\n<span class=\"token keyword\">let</span> trips <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">)</span>           <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 <code>SortDescriptor</code>와 조합해서 사용할 수도 있습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">context<span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span>descriptor\n                  batchSize<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span>\n                  allowEscapingMutations<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> trip <span class=\"token keyword\">in</span>\n  <span class=\"token comment\">// operate on trip</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이외에도 enumerate라는 함수도 있습니다.</p>\n<p>batchSize는 한 번에 5000개의 오브젝트들을 처리하도록 제한되어 있지만, 이를 10000개로 늘리면 메모리의 할당량을 늘리고, I&#x2F;O 시간은 줄일 수 있습니다.  (메모리 연산을 디스크 처리보다 우선시)</p>\n<p>반면 사진, 영화와 같은 데이터들은 batchSize를 줄이는 것이 좋습니다. 메모리 사용량을 줄이면서 I&#x2F;O 처리량을 늘릴 수 있기 때문이죠. (디스크 처리를 메모리 연산보다 우선시)</p>\n<h2 id=\"Modifying-your-Data\"><a href=\"#Modifying-your-Data\" class=\"headerlink\" title=\"Modifying your Data\"></a>Modifying your Data</h2><p>SwiftData는 CRUD 작업도 너무 간단합니다!</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> myTrip <span class=\"token operator\">=</span> <span class=\"token class-name\">Trip</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Birthday Trip\"</span></span><span class=\"token punctuation\">,</span> destination<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"New York\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Create</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>myTrip<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Delete</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>myTrip<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>참고 문서</p></blockquote>\n<p><a href=\"https://developer.apple.com/wwdc23/10187\">WWDC23 - Meet SwiftData</a></p>\n<p><a href=\"https://developer.apple.com/wwdc23/10195\">WWDC23 - Model your Schema with SwiftData</a></p>\n<p><a href=\"https://developer.apple.com/wwdc23/10196\">WWDC23 - Dive deeper into SwiftData</a></p>\n","feature":true,"text":"WWDC23 - SwiftData오늘은 SwiftData를 알아볼거에요Widget에다 써먹어야되거든요 😄 저는 일단 CoreData를 써본 적이 없습니다.아마 조만간 쓸 것 같기는 한데.. 일단은 없어요..왜 안썼냐면요.. 슬쩍 봐도 파일이 너무 여기...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/categories/WWDC23.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"},{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/tags/WWDC23.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#WWDC23-SwiftData\"><span class=\"toc-text\">WWDC23 - SwiftData</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Using-the-Model-Macro\"><span class=\"toc-text\">Using the Model Macro</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Attribute\"><span class=\"toc-text\">@Attribute</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Relationship\"><span class=\"toc-text\">@Relationship</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Transient\"><span class=\"toc-text\">@Transient</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Evolving-Schemas\"><span class=\"toc-text\">Evolving Schemas</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Working-with-your-Data\"><span class=\"toc-text\">Working with your Data</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Model-Container\"><span class=\"toc-text\">Model Container</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Model-Configuration\"><span class=\"toc-text\">Model Configuration</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Model-Context\"><span class=\"toc-text\">Model Context</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Undo-with-ModelContext\"><span class=\"toc-text\">Undo with ModelContext</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ModelContext-AutoSave\"><span class=\"toc-text\">ModelContext AutoSave</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Predicate\"><span class=\"toc-text\">Predicate</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Fetch-Descriptor\"><span class=\"toc-text\">Fetch Descriptor</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Modifying-your-Data\"><span class=\"toc-text\">Modifying your Data</span></a></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"01)🎊 WWDC23 - What's new in UIKit","uid":"4932fe99e31aa6c7113fa36649ad4bc9","slug":"WWDC23/2023-06-07-WWDC23-01","date":"2023-06-06T15:00:00.000Z","updated":"2023-06-08T08:18:57.712Z","comments":true,"path":"api/articles/WWDC23/2023-06-07-WWDC23-01.json","keywords":null,"cover":"https://i.imgur.com/7ZMZmZ5.jpg","text":"WWDC23 - What’s new in UIKit드디어 WWDC23의 막이 열렸습니다! 다들 VisionOS 와 Vision Pro 보셨나요?? 너무너무 놀라워서 당장이라도 공부하고 싶은 마음이 컸지만.. 스유와 ARKit을 모른다면 쉽게 접근할 수...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/categories/WWDC23.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"},{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/tags/WWDC23.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 바쁜 현대인들의 일상에 <br/> 작은 변화를 심고 싶은 개발자 <br/> 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"feature":true}}