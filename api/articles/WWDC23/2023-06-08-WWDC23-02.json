{"title":"02)🎊 WWDC23 - What's new in Swift","uid":"2418b614534c5af29c48238ca23e6673","slug":"WWDC23/2023-06-08-WWDC23-02","date":"2023-06-06T15:00:00.000Z","updated":"2023-06-08T13:28:43.873Z","comments":true,"path":"api/articles/WWDC23/2023-06-08-WWDC23-02.json","keywords":null,"cover":"https://i.imgur.com/7ZMZmZ5.jpg","content":"<h1 id=\"WWDC23-What’s-new-in-Swift\"><a href=\"#WWDC23-What’s-new-in-Swift\" class=\"headerlink\" title=\"WWDC23 - What’s new in Swift\"></a>WWDC23 - What’s new in Swift</h1><p>Swift의 새로운 feature, 매크로가 너무 궁금해서 해당 세션부터 찾아보게 되었습니다.</p>\n<p>바로 시작해보죠..!</p>\n<h2 id=\"Expressive-Code\"><a href=\"#Expressive-Code\" class=\"headerlink\" title=\"Expressive Code\"></a>Expressive Code</h2><h3 id=\"Using-if-x2F-else-and-switch-Statements-as-Expressions\"><a href=\"#Using-if-x2F-else-and-switch-Statements-as-Expressions\" class=\"headerlink\" title=\"Using if&#x2F;else and switch Statements as Expressions\"></a>Using if&#x2F;else and switch Statements as Expressions</h3><p>와우..<br>시작부터 큰 소식이네요..<br><strong><code>if-else</code>구문과 <code>switch</code> 구문을 표현식</strong> 으로서 사용할 수 있다는 소식입니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> bullet <span class=\"token operator\">=</span>\n  isRoot <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>willExpand<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span>\n    <span class=\"token punctuation\">:</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span>    <span class=\"token operator\">?</span> <span class=\"token string-literal\"><span class=\"token string\">\"- \"</span></span>\n    <span class=\"token punctuation\">:</span> maxDepth <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string-literal\"><span class=\"token string\">\"▹ \"</span></span> <span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"▿ \"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>다소 과장되긴 했지만 복잡한 조건에 의해 다양한 값을 <code>let</code> 변수에 넣어주고 싶을 때는 위와 같이 삼항연산자를 겹겹이 쌓아가며 사용해야 했습니다.<br>하지만 이제 <code>if-else</code> 구문으로 읽기 쉽게 가능합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> bullet <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">if</span> isRoot <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>willExpand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-literal\"><span class=\"token string\">\"- \"</span></span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> maxDepth <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-literal\"><span class=\"token string\">\"▹ \"</span></span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-literal\"><span class=\"token string\">\"▿ \"</span></span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이 방식이 특히나 효과를 보는 곳은 전역 변수나 저장 프로퍼티를 사용할 때입니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> attributedName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> displayName<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>displayName<span class=\"token punctuation\">.</span>isEmpty <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">AttributedString</span><span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">:</span> displayName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"Untitled\"</span></span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>전역 변수나 저장 프로퍼티에 조건에 따라 다른 값을 넣어주기 위해서는 이렇게 바로 호출되는 클로저를 통해야만 했습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> attributedName <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> displayName<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>displayName<span class=\"token punctuation\">.</span>isEmpty <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">AttributedString</span><span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">:</span> displayName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"Untitled\"</span></span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>하지만 이제 <code>if-else</code> 구문을 표현식으로 사용할 수 있기 때문에 클로저가 필요 없습니다.</p>\n<h3 id=\"Result-Builders\"><a href=\"#Result-Builders\" class=\"headerlink\" title=\"Result Builders\"></a>Result Builders</h3><p>Result Builder가 뭐냐면요..</p>\n<p>저도 이번에 처음 알아보게 되었는데요.. WWDC21에서 발표되었던 내용이더라구요..!?</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">image<span class=\"token punctuation\">.</span>constraints <span class=\"token punctuation\">&#123;</span> view <span class=\"token keyword\">in</span>\n  view<span class=\"token punctuation\">.</span>centerXAnchor <span class=\"token operator\">==</span> container<span class=\"token punctuation\">.</span>centerXAnchor\n  view<span class=\"token punctuation\">.</span>topAnchor <span class=\"token operator\">==</span> container<span class=\"token punctuation\">.</span>topAnchor <span class=\"token operator\">+</span> <span class=\"token number\">20</span>\n  view<span class=\"token punctuation\">.</span>widthAnchor <span class=\"token operator\">==</span> container<span class=\"token punctuation\">.</span>widthAnchor <span class=\"token operator\">--</span> <span class=\"token number\">20</span>\n  view<span class=\"token punctuation\">.</span>heightAnchor <span class=\"token operator\">==</span> view<span class=\"token punctuation\">.</span>widthAnchor <span class=\"token operator\">*</span> <span class=\"token number\">0.6</span>      \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>마치 이렇게 SwiftUI의 형태처럼 <strong>선언형으로 값을 설정</strong>해줄 수 있는 문법입니다.</p>\n<p><strong>DSL(Domain Specific Language)</strong> 라고 불리는데요..</p>\n<p>제가 잘 모르기 때문에… 😅</p>\n<p>아무튼 타입 체킹이 빨라지고 에러가 좀 더 정확한 지점에 표시된다고 합니다.</p>\n<h3 id=\"Type-Parameter-Packs\"><a href=\"#Type-Parameter-Packs\" class=\"headerlink\" title=\"Type Parameter Packs\"></a>Type Parameter Packs</h3><p>이 부분은 <strong>Generic</strong>과 관련된 내용입니다.</p>\n<p>Swift의 모든 곳은 Generic이라고도 할 수 있습니다.</p>\n<p>배열만봐도 사실은 <code>Array&lt;Element&gt;</code>라는 Generic을 활용한 타입이죠!?</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Request</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Result</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RequestEvaluator</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">evaluate</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Result</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Request</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Result</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Result</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Request</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">RequestEvaluator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>여기 <code>Bool</code> 타입의 값을 하나만 받는 함수 <code>evaluate</code>가 있습니다.</p>\n<p>하지만 여러개의 값을 파라미터로 받고 싶을 때도 있겠죠?</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestEvaluator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestEvaluator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestEvaluator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> r3<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>문제는 이렇게 함수를 사용하려면..</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">evaluate</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Result</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">evaluate</span><span class=\"token operator\">&lt;</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">evaluate</span><span class=\"token operator\">&lt;</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">,</span> R3<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">,</span> R3<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">evaluate</span><span class=\"token operator\">&lt;</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">,</span> R3<span class=\"token punctuation\">,</span> R4<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">,</span> R3<span class=\"token punctuation\">,</span> R4<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">evaluate</span><span class=\"token operator\">&lt;</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">,</span> R3<span class=\"token punctuation\">,</span> R4<span class=\"token punctuation\">,</span> R5<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">,</span> R3<span class=\"token punctuation\">,</span> R4<span class=\"token punctuation\">,</span> R5<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">evaluate</span><span class=\"token operator\">&lt;</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">,</span> R3<span class=\"token punctuation\">,</span> R4<span class=\"token punctuation\">,</span> R5<span class=\"token punctuation\">,</span> R6<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>R1<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">,</span> R3<span class=\"token punctuation\">,</span> R4<span class=\"token punctuation\">,</span> R5<span class=\"token punctuation\">,</span> R6<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이렇게 끔찍하게 각 파라미터의 개수에 맞는 함수들을 여러번 오버로드하며 정의해주어야 합니다.</p>\n<p><img src=\"https://i.imgur.com/BNkOqNg.png\"></p>\n<p>이걸 보자마자 RxSwift의 <code>combineLatest</code>가 생각나더군요…</p>\n<p>딱 이럴때의 경우입니다.</p>\n<p>이 방법은 보기에도 안좋을 뿐더러, <strong>제공하는 파라미터의 개수를 사용하는 쪽에서 뛰어넘으면</strong> 당연하게도 컴파일러 에러를 발생시킵니다.</p>\n<p>이 문제를 해결하기 위해 Swift의 <strong>Generic</strong>에 <strong>제공된 인자의 개수보다 많은 수의 값</strong>을 받아낼 수 있는 새로운 문법이 도입되었습니다.</p>\n<p>새로운 <strong><code>each</code></strong> 키워드는 Generic 타입을 충족하는 <strong>다양한 개수의 인자들을 “packed”된 상태</strong> 로 받을 수 있도록 합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">evaluate</span><span class=\"token operator\">&lt;</span>each <span class=\"token class-name\">Result</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token label important\">_</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">repeat</span> <span class=\"token class-name\">Request</span><span class=\"token operator\">&lt;</span>each <span class=\"token class-name\">Result</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">repeat</span> each <span class=\"token class-name\">Result</span><span class=\"token punctuation\">)</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>하나의 파라미터 <code>Request&lt;Result&gt;</code> 대신 여러개의 파라미터를 반복해서 받는다는 의미로 <strong><code>repeat Request&lt;each Result&gt;</code></strong> 를 사용합니다.</p>\n<p>반환하는 값은 인자가 하나일 경우 하나의 값을, 여러 개일 경우 여러 개의 값은 Tuple <strong><code>(repeat each Result)</code></strong> 로 반환합니다.</p>\n<p>그렇다면 사용하는 쪽에서는 어떨까요?</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestEvaluator</span><span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> r3<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>Type Parameter Packs</strong> API를 사용했는지 조차 알 수 없을 정도로 자연스럽습니다..!</p>\n<h3 id=\"Swift-Macros\"><a href=\"#Swift-Macros\" class=\"headerlink\" title=\"Swift Macros\"></a>Swift Macros</h3><p>대망의 매크로입니다..</p>\n<p><code>assert</code>에서부터 시작하고 있네요.</p>\n<p><code>assert</code>는 조건문이 <code>false</code>일 때, 프로그램을 자동으로 종료시키죠.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://i.imgur.com/07v4MCp.png\"></p>\n<p>문제는 위와 같은 방식은 프로그램을 그냥 종료시켜버리고, 종료된 라인만을 로그에 남긴다는 것입니다.</p>\n<p>그래서 애플은 다른 여러가지 <code>assert</code> 방식들을 추가해줬습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token class-name\">XCAssertEqual</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://i.imgur.com/midJKz4.png\"></p>\n<p><code>XCAssertEqual</code>은 좀 더 나은 로그를 남겨줍니다. 아까보다는 훨씬 낫긴 하지만 여전히 <code>a</code>, <code>b</code>, 혹은 <code>max(a, b)</code> 중에서 어떤 값이 에러를 발생시키는지는 여전히 알 수가 없죠.</p>\n<p>하지만 이제는 <strong>Macro</strong>를 사용해서 이를 해결할 수 있습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token other-directive property\">#assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://i.imgur.com/ehe3hwP.png\"></p>\n<p>매크로는 다른 API들과 비슷하게 패키지의 형태로 <code>import</code>하여 사용할 수 있습니다.</p>\n<p>여기서 사용한 <code>#assert</code> 매크로는 PowerAssert라는 라이브러리를 설치해서 사용할 수 있네요.</p>\n<p>📎 <a href=\"https://github.com/kishikawakatsumi/swift-power-assert\">PowerAssert</a></p>\n<h4 id=\"Macro-Declarations\"><a href=\"#Macro-Declarations\" class=\"headerlink\" title=\"Macro Declarations\"></a>Macro Declarations</h4><p>이름이 매크로라면 내가 직접 원하는 형태의 매크로를 사용할 수도 있어야겠죠?</p>\n<p><code>macro</code> 키워드를 사용함으로써 매크로를 정의해줄 수 있습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> macro <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> condition<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>함수와 상당히 비슷하게 생겼죠..?</p>\n<p>함수와 동일하게 정의해줄 수 있고, 함수와 마찬가지로 타입 체크도 이루어집니다.</p>\n<p>그래서 이 <code>assert</code> 매크로를</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token other-directive property\">#assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>이렇게 잘 못 사용하면?</p>\n<p><img src=\"https://i.imgur.com/K5FdL8w.png\"></p>\n<p>어김 없이 에러를 마주할 수 있죠.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> macro <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> condition<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token other-directive property\">#externalMacro</span><span class=\"token punctuation\">(</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"PowerAssertPlugin\"</span></span><span class=\"token punctuation\">,</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"PowerAssertMacro\"</span></span>\n<span class=\"token punctuation\">)</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>대부분의 매크로는** “External Macros”** 라고 합니다.</p>\n<p>컴파일러는 매크로를 <code>String</code>으로 제공되는 <code>module</code> 정보와 <code>type</code> 정보를 통해 식별한다고 하네요..</p>\n<p><img src=\"https://i.imgur.com/UoYsO85.png\"></p>\n<p>매크로는 컴파일러 플러그인으로 작동하며 앱과는 <strong>별도의 프로그램</strong> 으로써 실행된다고 합니다.</p>\n<p>컴파일러는 플러그인에게 매크로를 전달하고, 플러그인이 매크로에 대응되는 소스코드를 컴파일러에게 제공하고 있네요.</p>\n<p>매크로에게 필요한 마지막 정보는 그들의 <strong>역할(role)</strong> 입니다.</p>\n<h4 id=\"Freestanding-Macros\"><a href=\"#Freestanding-Macros\" class=\"headerlink\" title=\"Freestanding Macros\"></a>Freestanding Macros</h4><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@freestanding</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> macro <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> condition<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token other-directive property\">#externalMacro</span><span class=\"token punctuation\">(</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"PowerAssertPlugin\"</span></span><span class=\"token punctuation\">,</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"PowerAssertMacro\"</span></span>\n<span class=\"token punctuation\">)</span>        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>#assert</code> 매크로는 <code>@freestanding(expression)</code> 매크로인데요..</p>\n<p><strong>freestanding</strong> 은 “#”로 사용할 수 있고, 대응되는 코드를 직접적으로 삽입하기 때문에 사용되었습니다.</p>\n<p><strong>expression</strong> 은 결과값이 있는 그 어느곳에서도 사용할 수 있기 때문에 사용되었다고 하네요.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@freestanding</span><span class=\"token punctuation\">(</span>exrpession<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> macro <span class=\"token class-name\">Predicate</span><span class=\"token operator\">&lt;</span>each <span class=\"token class-name\">Input</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token omit keyword\">_</span> body<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">repeat</span> each <span class=\"token class-name\">Input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Predicate</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">repeat</span> each <span class=\"token class-name\">Input</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">let</span> pred <span class=\"token operator\">=</span> <span class=\"token other-directive property\">#Predicate</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token other-directive property\">#0</span><span class=\"token punctuation\">.</span>favoriteColor <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>blue\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> blueLovers <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>expression 매크로에는 <strong><code>#Predicate</code></strong> 라는 매크로도 있습니다.</p>\n<p><code>#Predicate</code> 매크로는 클로저 안에서 type-safe하게 Predicate를 작성할 수 있도록 해준다고 하네요.</p>\n<h4 id=\"Attached-Macros\"><a href=\"#Attached-Macros\" class=\"headerlink\" title=\"Attached Macros\"></a>Attached Macros</h4><p>또 형태의 매크로도 있습니다.</p>\n<p>예시로 사용할 <code>enum</code>을 사용할 경우인데요.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Path</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">relative</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Path</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> isAbsolute<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>absolute <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Path</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> isRelative<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>relative <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> absPaths <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">&#123;</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>isAbsolute <span class=\"token punctuation\">&#125;</span>        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>enum</code>의 <code>case</code>를 검사할 때 보통 이렇게 많이 사용했습니다.</p>\n<p>이런 방식은 문제가 있습니다. <code>case</code>가 늘어날수록 점점 더 길어지는 방식의 코드라는 것이죠.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@CaseDetection</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Path</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">relative</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> absPaths <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">&#123;</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>isAbsolute <span class=\"token punctuation\">&#125;</span>        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>@CaseDetction</code>은 <strong>“Attached Macros”</strong> 입니다.</p>\n<p>Property Wrapper와 동일하게 <strong>“@“</strong> 를 사용하고 있네요!</p>\n<p>이 <code>@CaseDetection</code> 매크로는 이전의 <code>isAbsolute</code>와 <code>isRelative</code> 프로퍼티를 자동으로 생성해줍니다.</p>\n<p><img src=\"https://i.imgur.com/4WYMXt5.png\"></p>\n<p><strong>Attached Macros</strong> 는 다섯 가지 종류로 나눌 수 있고, 각각의 역할은 위와 같습니다.</p>\n<p><strong>member</strong>: <code>type</code> &#x2F; <code>extension</code>으로 새로운 정의를 추가</p>\n<ul>\n<li>ex) <code>@CaseDetection</code></li>\n</ul>\n<p><strong>peer</strong>: 정의된 표현과 함께 다른 표현으로써 정의를 추가     </p>\n<ul>\n<li>ex) <code>async</code> 메서드와 같은 로직을 수행하는 completion handler 버전의 메서드 추가</li>\n</ul>\n<p><strong>accessor</strong>: 프로퍼티에 접근하는 방식을 추가 (Property Wrapper와 유사)</p>\n<ul>\n<li>ex) 저장 프로퍼티를 연산 프로퍼티로 변경</li>\n</ul>\n<p><strong>memberAttribute</strong>: <code>type</code> &#x2F; <code>extension</code>으로 속성(attribute)를 추가</p>\n<p><strong>conformance</strong>: <code>type</code> &#x2F; <code>extension</code>으로 프로토콜을 충족시키기 위한 요소 추가</p>\n<p>일반적인 API와 다르게 매크로가 좋은 점은, 코드에서 바로 <strong>어떤 코드</strong> 가 실행되고 있는 지 확인할 수 있고, <strong>디버그 과정에서 진입</strong> 할 수 있으며, 매크로 영역 바깥으로 복붙하는 것으로 <strong>쉽게 수정</strong> 할 수도 있다는 것입니다.</p>\n<p><strong>Attached Macros</strong> 들은 동시에 여러개가 사용될수도 있습니다.</p>\n<p>예시로 SwiftUI의 코드를 들고 있는데요.. 무슨 의미인지는 알 것 같아서 한 번 살펴보겠습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token comment\">// Observation in SwiftUI</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n  <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n  <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> isFavorite<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> person<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span>\n    \n  <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">person<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이런 형태의 클래스가 있는데요, <code>Person</code>의 각 프로퍼티들의 변화를 받아 <code>ContentView</code>의 내용을 업데이트해주는 코드 같습니다.</p>\n<p>문제는 반복되는 <code>@Published</code>, <code>ObservableObject</code> 프로토콜 등 필요한 부가작업들이 너무 많다는 것이죠.</p>\n<p>매크로를 사용하면 이 과정들을 하나로 축소시킬 수 있습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token comment\">// Observation in SwiftUI</span>\n<span class=\"token attribute atrule\">@Observable</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n  <span class=\"token keyword\">var</span> isFavorite<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> person<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span>\n    \n  <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">person<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>@Observable</code> 하나면 모든 작업이 수행됩니다.</p>\n<p>내부를 한 번 살펴볼까요?</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@attached</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">:</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token attribute atrule\">@attached</span><span class=\"token punctuation\">(</span>memberAttribute<span class=\"token punctuation\">)</span>\n<span class=\"token attribute atrule\">@attached</span><span class=\"token punctuation\">(</span>conformance<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> macro <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token other-directive property\">#externalMacro</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><code>member</code> role을 통해 새로운 프로퍼티들과 메서드들을 추가합니다.</li>\n<li><code>memberAttribute</code> role을 통해 <code>@ObservationTracked</code> 매크로를 각 저장 프로퍼티에 추가하고 <code>getter</code>와 <code>setter</code>를 추가합니다. </li>\n<li><code>Observable</code> 프로토콜을 채택합니다.</li>\n</ol>\n<p>매크로를 펼친 형태의 코드는 이렇습니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@Observable</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Observable</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token attribute atrule\">@ObservationTracked</span> <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token attribute atrule\">@ObservationTracked</span> <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token attribute atrule\">@ObservationTracked</span> <span class=\"token keyword\">var</span> isFavorite<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">internal</span> <span class=\"token keyword\">let</span> <span class=\"token omit keyword\">_</span>$observationRegistrar <span class=\"token operator\">=</span> <span class=\"token class-name\">ObservationRegistrar</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">internal</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">access</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    keyPath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">KeyPath</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token omit keyword\">_</span>$observationRegistrar<span class=\"token punctuation\">.</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> keyPath<span class=\"token punctuation\">:</span> keyPath<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">internal</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">withMutation</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    keyPath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">KeyPath</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token omit keyword\">_</span> mutation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">rethrows</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token omit keyword\">_</span>$observationRegistrar<span class=\"token punctuation\">.</span><span class=\"token function\">withMutation</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> keyPath<span class=\"token punctuation\">:</span> keyPath<span class=\"token punctuation\">,</span> mutation<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>매크로에 대해서는 한 번 관련 세션을 살펴보면서 공부해봐야겠네요.</p>\n<p>새로운 패러다임의 시작일 듯한 느낌..!</p>\n<h3 id=\"Swift-Foundation\"><a href=\"#Swift-Foundation\" class=\"headerlink\" title=\"Swift Foundation\"></a>Swift Foundation</h3><p>최근 애플이 Foundation 코드들을 Swift로 다시 쓰는 프로젝트를 시작했다고 합니다.</p>\n<p>기존의 C, Obj-C 코드들을 Swift로 교체하고 있다고 하네요..</p>\n<p>이번 버전에는 <code>Date</code>, <code>Calendar</code>, <code>Locale</code>,  <code>AttributedString</code>, JSON <code>encode</code> &#x2F; <code>decode</code>가 Swift로 다시 쓰여졌다고 합니다.</p>\n<p><img src=\"https://i.imgur.com/dHcf3vk.png\"></p>\n<p>네.. 그렇다고 합니다..</p>\n<p>넘어가죠!</p>\n<h3 id=\"Ownership\"><a href=\"#Ownership\" class=\"headerlink\" title=\"Ownership\"></a>Ownership</h3><p>어떤 값을 어떤 코드가 소유하고 있는 지에 대한 추적이 가능해졌다고 합니다.</p>\n<p>저는 코드 작성자가 누군지 시그니처 같은 걸 남겨두는 건 줄 알았는데, 전혀 다른 기능이였네요.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">FileDescriptor</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> fd<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CInt</span>\n  \n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CInt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> descriptor <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">UInt8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> written <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span>withUnsafeBufferPointer <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Darwin</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>baseAddress<span class=\"token punctuation\">,</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Darwin</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이 코드는 위험성이 있습니다.</p>\n<p>파일 수정을 마친 후에 <code>close()</code>를 호출하지 않을 가능성이 농후하죠.</p>\n<p><code>FileDescriptor</code>를 클래스로 바꾸고 <code>deinit</code> 시점에 <code>close()</code>를 호출해줘도 되지만, 클래스는 reference 타입이기 때문에 하나의 파일을 관리하는 측면에서는 위험성이 큽니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">FileDescriptor</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">~</span><span class=\"token class-name\">Copyable</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> fd<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CInt</span>\n  \n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CInt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> descriptor <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">UInt8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> written <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span>withUnsafeBufferPointer <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Darwin</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>baseAddress<span class=\"token punctuation\">,</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  consuming <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Darwin</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Darwin</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>그래서 등장한 것이 <strong>Non-Copyable</strong> <code>struct</code> 입니다.</p>\n<p><strong><code>~Copyable</code></strong> 을 붙여주면, 클래스와 마찬가지로 <code>deinit</code>을 사용할 수 있게 됩니다.</p>\n<p>추가적으로 <strong><code>consuming</code></strong> 이라는 키워드도 등장했는데요, 해당 키워드가 달린 함수를 호출함으로써 구조체에 대한 소유권을 포기할 수 있습니다.</p>\n<p>Non-Copyable 구조체는 복사될 수 없으니, 소유권을 포기하게 되면 접근할 수 없는 값이 되겠죠?</p>\n<p>그래서 <code>consuming</code> 함수는 클래스를 메모리에서 해제하는 것처럼 구조체를 <strong>메모리에서 해제</strong> 시킵니다.</p>\n<h3 id=\"What’s-new-in-Swift-Concurrency\"><a href=\"#What’s-new-in-Swift-Concurrency\" class=\"headerlink\" title=\"What’s new in Swift Concurrency\"></a>What’s new in Swift Concurrency</h3><p><strong>Custom Actor Executors</strong> 라는 녀석이 새롭게 나왔습니다.</p>\n<p> 기존의 Actor라는 놈은 자유롭게 사용할 수 있는 녀석은 아니였죠?</p>\n<p>이제 Actor를 특정 <strong>DispatchQueue</strong> 에 할당시킬 수 있다고 합니다.</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">actor</span> <span class=\"token class-name\">MyConnection</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> database<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UnsafeMutablePointer</span><span class=\"token operator\">&lt;</span>sqlite3<span class=\"token operator\">></span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> queue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DispatchSerialQueue</span>\n\n  <span class=\"token keyword\">nonisolated</span> <span class=\"token keyword\">var</span> unownedExecutor<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UnownedSerialExecutor</span> <span class=\"token punctuation\">&#123;</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">asUnownedSerialExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DispatchSerialQueue</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">pruneOldEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fetchEntry</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Entry</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">pruneOldEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>unownedExecutor</code>를 이렇게 지정해주면, 모든 Synchronization이 해당 queue에서만 이루어진다고 하네요.</p>\n<p>단순히 <code>await connection.pruneOldEntries()</code>를 호출해주는 것 만으로도 지정된 <code>queue</code>에서 <code>async</code>하게 동작한다는 것이죠!</p>\n<p>이제 Realm을 다루기 좀 더 쉬워지는 걸까요.. 최근에 이걸로 고민을 많이 했는데 말이죠..</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token comment\">// Executor protocols</span>\n\n<span class=\"token keyword\">protocol</span> <span class=\"token class-name\">Executor</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AnyObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sendable</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> job<span class=\"token punctuation\">:</span> consuming <span class=\"token class-name\">ExecutorJob</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">protocol</span> <span class=\"token class-name\">SerialExecutor</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">asUnownedSerialExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">UnownedSerialExecutor</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">isSameExclusiveExecutionContext</span><span class=\"token punctuation\">(</span>other executor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">DispatchSerialQueue</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">SerialExecutor</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>아무튼 이 새로운 동작은 DispatchQueue가 새로운 <strong><code>SerialExecutor</code></strong> 프로토콜을 따르기 때문에 가능했다고 합니다.</p>\n<p><code>isSameExclusiveExecutionContext(other executor:) -&gt; Bool</code>을 통해 이미 해당 코드가 실행되고 있는 지를 검사하고, <code>asUnownedSerialExecutor() -&gt; UnownedSerialExecutor</code>를 통해 <code>Executor</code>의 <code>unowned</code> 참조를 가져온다고 합니다.</p>\n<p>그리고 가장 중요한 <code>enqueue(_ job:)</code> 를 통해 <code>Executor</code>의 <strong><code>Job</code></strong> 들을 관리한다고 하네요.</p>\n<p>여기서 <code>Job</code> 이란 <code>Executor</code>에서 비동기적으로 실행되어야 할 동기 Task라고 합니다.</p>\n<p>솔직히 무슨 말인지 너무 헷갈리네요… 😅</p>\n<p>결론은 이제 “<strong>Actor</strong> 에서 <strong>DispatchQueue</strong> 를 지정해서 사용할 수 있고, 이는 DispatchQueue가 새로운 <strong><code>SerialExecutor</code></strong> 프로토콜을 따르기 때문이다. <strong><code>SerialExecutor</code></strong> 프로토콜은 dispatch async를 포함한 여러 <strong><code>Job</code></strong> 들을 순차적으로 <strong>queue</strong> 를 통해 수행해나가는 작업을 한다.” 라고 이해하고 넘어가려고 합니다.</p>\n<p>—</p>\n<p>와우..</p>\n<p>뒤로 갈수록 정신이 아득해질 뻔 했지만.. 한 번 쭉 훑어보긴 했습니다..</p>\n<p>당장 저에게 제일 중요했던 내용들은</p>\n<ol>\n<li>Macros</li>\n<li>Type Parameter Packs</li>\n<li>DispatchQueue in Actor</li>\n</ol>\n<p>이렇게인 것 같아요!</p>\n<p>특히나 매크로는 제대로 한 번 살펴봐야 할 것 같습니다..</p>\n","feature":true,"text":"WWDC23 - What’s new in SwiftSwift의 새로운 feature, 매크로가 너무 궁금해서 해당 세션부터 찾아보게 되었습니다. 바로 시작해보죠..! Expressive CodeUsing if&#x2F;else and switch St...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/categories/WWDC23.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"},{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/tags/WWDC23.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#WWDC23-What%E2%80%99s-new-in-Swift\"><span class=\"toc-text\">WWDC23 - What’s new in Swift</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Expressive-Code\"><span class=\"toc-text\">Expressive Code</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Using-if-x2F-else-and-switch-Statements-as-Expressions\"><span class=\"toc-text\">Using if&#x2F;else and switch Statements as Expressions</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Result-Builders\"><span class=\"toc-text\">Result Builders</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Type-Parameter-Packs\"><span class=\"toc-text\">Type Parameter Packs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Swift-Macros\"><span class=\"toc-text\">Swift Macros</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Macro-Declarations\"><span class=\"toc-text\">Macro Declarations</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Freestanding-Macros\"><span class=\"toc-text\">Freestanding Macros</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Attached-Macros\"><span class=\"toc-text\">Attached Macros</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Swift-Foundation\"><span class=\"toc-text\">Swift Foundation</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ownership\"><span class=\"toc-text\">Ownership</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#What%E2%80%99s-new-in-Swift-Concurrency\"><span class=\"toc-text\">What’s new in Swift Concurrency</span></a></li></ol></li></ol></li></ol>","author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"mapped":true,"prev_post":{"title":"01)🎊 WWDC23 - What's new in UIKit","uid":"4932fe99e31aa6c7113fa36649ad4bc9","slug":"WWDC23/2023-06-07-WWDC23-01","date":"2023-06-06T15:00:00.000Z","updated":"2023-06-08T08:18:57.712Z","comments":true,"path":"api/articles/WWDC23/2023-06-07-WWDC23-01.json","keywords":null,"cover":"https://i.imgur.com/7ZMZmZ5.jpg","text":"WWDC23 - What’s new in UIKit드디어 WWDC23의 막이 열렸습니다! 다들 VisionOS 와 Vision Pro 보셨나요?? 너무너무 놀라워서 당장이라도 공부하고 싶은 마음이 컸지만.. 스유와 ARKit을 모른다면 쉽게 접근할 수...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/categories/WWDC23.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"},{"name":"WWDC23","slug":"WWDC23","count":3,"path":"api/tags/WWDC23.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}},"feature":true},"next_post":{"title":"30)🍎 Swift - WidgetKit","uid":"96d1cc8a79035ed04ee1a5935c77af8d","slug":"Swift/2023-06-08-Swift30","date":"2023-06-07T15:00:00.000Z","updated":"2023-06-11T17:14:56.806Z","comments":true,"path":"api/articles/Swift/2023-06-08-Swift30.json","keywords":null,"cover":"https://i.imgur.com/U81BhYa.png","text":"Swift - WidgetKit.01WWDC의 iOS 파트에서 꽤 크게 소개된 WidgetKit이 있었죠.. Widget이 이제 애니메이션을 갖게 되었습니다. 다른 플랫폼으로의 확장은 덤이구요. 그런데 전 그 전의 내용도 아직 못봤거든요.. 그래서 지...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"Swift","slug":"Swift","count":30,"path":"api/categories/Swift.json"}],"tags":[{"name":"Swift","slug":"Swift","count":81,"path":"api/tags/Swift.json"},{"name":"iOS","slug":"iOS","count":81,"path":"api/tags/iOS.json"}],"author":{"name":"nomatterjun","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60438045?v=4","link":"/","description":"안녕하세요 👋 <br/> 목적 있는 성장을 지향하는 <br/> iOS 개발자 준비생 이창준입니다.","socials":{"github":"https://github.com/nomatterjun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"/assets/instagram.svg","link":"https://www.instagram.com/nomatter_jun/"}}}}}}